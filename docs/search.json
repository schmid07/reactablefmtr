[{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_scales.html","id":"custom-color-palettes","dir":"Articles","previous_headings":"","what":"Custom color palettes","title":"Getting Started with Color Scales","text":"want show different color palette default, can call within colors argument like : opacity colors can controlled assigning value 0 (fully transparent) 1 (fully opaque). may also use color palettes packages, ‘Mako’ color palette viridis package:","code":"my_color_pal = c('#e5f5e0', '#a1d99b', '#31a354')  reactable(   data,   defaultSorted = 'MPG.highway',   defaultSortOrder = 'desc',   columns = list(     MPG.city = colDef(       style = color_scales(data, colors = my_color_pal)       ),     MPG.highway = colDef(       style = color_scales(data, colors = my_color_pal)       )   ) ) reactable(   data,   defaultSorted = 'MPG.highway',   defaultSortOrder = 'desc',   columns = list(     MPG.city = colDef(       style = color_scales(data, colors = my_color_pal, opacity = 0.5)       ),     MPG.highway = colDef(       style = color_scales(data, colors = my_color_pal, opacity = 0.5)       )   ) ) library(viridis)  reactable(   data,   defaultSorted = 'MPG.highway',   defaultSortOrder = 'desc',   columns = list(     MPG.city = colDef(       style = color_scales(data, colors = viridis::mako(5))       ),     MPG.highway = colDef(       style = color_scales(data, colors = viridis::mako(5))       )   ) )"},{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_scales.html","id":"add_legend-customization-options","dir":"Articles","previous_headings":"","what":"add_legend() customization options","title":"Getting Started with Color Scales","text":"like add legend color palette used within color_scales(), can including add_legend() table listing color palette used within color_scales(). color palette defined user within add_legend(), show default blue--orange color palette used color_scales(). 32 30 28 25 21  can add title footer legend title footer respectively: 32 30 28 25 21  default, color palette broken 5 distinct bins. However, can increase decrease number color bins like show legend providing number within bins: 32 31 30 29 28 27 25 22 21  using different color palette default one provided, can specify color palette way within color_tiles(): 32 30 28 25 21  data within column evenly distributed, can set color bias lean towards higher values lower values within column bias. Changing bias within legend good visual gauge bias affects distribution colors within column: 32 30 28 25 21","code":"reactable(   data,   defaultSorted = 'MPG.highway',   defaultSortOrder = 'desc',   columns = list(     MPG.highway = colDef(       style = color_scales(data)     )   ) ) %>%    add_legend(data, col_name = 'MPG.highway') reactable(   data,   defaultSorted = 'MPG.highway',   defaultSortOrder = 'desc',   columns = list(     MPG.highway = colDef(       style = color_scales(data)     )   ) ) %>%    add_legend(data, col_name = 'MPG.highway', title = 'MPG Highway', footer = 'Reported as of 1993') reactable(   data,   defaultSorted = 'MPG.highway',   defaultSortOrder = 'desc',   columns = list(     MPG.highway = colDef(       style = color_scales(data)     )   ) ) %>%    add_legend(data, col_name = 'MPG.highway', title = 'MPG Highway', footer = 'Reported as of 1993', bins = 9) reactable(   data,   defaultSorted = 'MPG.highway',   defaultSortOrder = 'desc',   columns = list(     MPG.highway = colDef(       style = color_scales(data, colors = viridis::viridis(5))     )   ) ) %>%    add_legend(data, col_name = 'MPG.highway', title = 'MPG Highway', footer = 'Reported as of 1993', colors = viridis::viridis(5)) reactable(   data,   defaultSorted = 'MPG.highway',   defaultSortOrder = 'desc',   columns = list(     MPG.highway = colDef(       style = color_scales(data, colors = viridis::viridis(5))     )   ) ) %>%    add_legend(data, col_name = 'MPG.highway', title = 'MPG Highway', footer = 'Reported as of 1993', colors = viridis::viridis(5))"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_scales.html","id":"format-numbers","dir":"Articles","previous_headings":"","what":"Format numbers","title":"Getting Started with Color Scales","text":"format numbers within columns containing color_scales(), can use formats within reactable’s colFormat() argument:","code":"reactable(   data,   defaultSorted = 'MPG.highway',   defaultSortOrder = 'desc',   columns = list(     MPG.highway = colDef(       format = colFormat(suffix = ' mpg'),       style = color_scales(data)     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_scales.html","id":"conditional-color-assignments","dir":"Articles","previous_headings":"","what":"Conditional color assignments","title":"Getting Started with Color Scales","text":"Colors can conditionally assigned values based another column using color_ref. example , assigned blue color Compact cars, red color Sporty cars, gold color Vans using dplyr::case_when(). within color_scales(), reference name conditional column just created apply colors values MPG.city MPG.highway. can apply conditional colors entire dataset setting style within defaultColDef: conditional coloring can applied based numeric conditions well. example, wanted highlight cars MPG.city value 23 greater, use method apply conditions based MPG.city column instead Type column.","code":"car_data <- data %>%    mutate(car_colors = dplyr::case_when(   Type == 'Compact' ~ 'dodgerblue',   Type == 'Sporty' ~ 'tomato',   Type == 'Van' ~ 'gold',   TRUE ~ 'other'   ))  reactable(   car_data,   defaultSorted = 'Type',   columns = list(     MPG.city = colDef(style = color_scales(car_data, color_ref = 'car_colors')),     MPG.highway = colDef(style = color_scales(car_data, color_ref = 'car_colors')),     car_colors = colDef(show = FALSE)) ) reactable(   car_data,   defaultSorted = 'Type',   defaultColDef = colDef(     style = color_scales(car_data, color_ref = 'car_colors')     ),   columns = list(car_colors = colDef(show = FALSE)) ) car_data <- car_data %>%    mutate(mpg_colors = dplyr::case_when(   MPG.city >= 23 ~ 'darkgreen',   TRUE ~ 'grey'   ))  reactable(   car_data,   defaultSorted = 'MPG.city',   defaultSortOrder = 'desc',   defaultColDef = colDef(     style = color_scales(car_data, color_ref = 'mpg_colors')     ),   columns = list(     car_colors = colDef(show = FALSE),     mpg_colors = colDef(show = FALSE)) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_scales.html","id":"color-assignments-by-another-column","dir":"Articles","previous_headings":"","what":"Color assignments by another column","title":"Getting Started with Color Scales","text":"color_by argument allows color assignment based values another column. help clarify values colors represent, can add legend table: 21 25 28 30 32","code":"reactable(   data,   columns = list(     Make = colDef(style = color_scales(data, color_by = 'MPG.highway'))   ) ) reactable(   data,   columns = list(     Make = colDef(style = color_scales(data, color_by = 'MPG.highway'))   ) ) %>%    add_legend(data, col_name = 'MPG.highway', title = 'MPG Highway', align = 'left')"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_scales.html","id":"row-wise-styling","dir":"Articles","previous_headings":"","what":"Row-wise styling","title":"Getting Started with Color Scales","text":"default, color_scales() conditionally assigns colors values based relation values within particular column. However, table ’re showing row-wise data, average temperatures month year, difficult compare temperatures compare month: including span = TRUE within color_scales() formatter, can conditionally assign colors values based relation values within entire dataset, instead within column. Now table displaying temperatures much easier read comparing temperatures across months: Note: dataset example sourced reactable demo cookbook wanted apply color scales months, can referencing either numeric positions columns column names within span: Lastly, wanted completely hide text, setting show_text = FALSE, displays table heatmap shown : Note: including cell = tooltip(), values still visible hover format numbers can specified number_fmt. Data sourced {gapminder} package","code":"dimnames <- list(start(nottem)[1]:end(nottem)[1], month.abb) temps <- matrix(nottem, ncol = 12, byrow = TRUE, dimnames = dimnames) temps <- as_tibble(temps, rownames = 'Year') temppal <- c('#36a1d6', '#76b8de', '#a0bfd9', '#ffffff', '#d88359', '#d65440', '#c62c34')  reactable(   temps,   defaultColDef = colDef(     style = color_scales(temps, span = TRUE, colors = temppal),     minWidth = 50     ) ) reactable(   temps,   defaultColDef = colDef(     style = color_scales(temps, span = 4:7, colors = temppal),     minWidth = 50)) library(gapminder)  population_data <- gapminder %>%    filter(continent == 'Americas') %>%   mutate(country = as.character(country),          year = paste0(\"'\", str_sub(year, 3, 4))) %>%    select(country, year, lifeExp) %>%   pivot_wider(names_from = year, values_from = lifeExp)   reactable(   population_data,   compact = TRUE,   pagination = FALSE,   showSortIcon = FALSE,   defaultSorted = \"'52\",   defaultSortOrder = 'desc',   defaultColDef = colDef(     maxWidth = 50,     align = 'center',     cell = tooltip(number_fmt = scales::comma),     style = color_scales(population_data, show_text = FALSE, span = TRUE)   ),   columns = list(     country = colDef(       maxWidth = 175,       align = 'left'     )   ) ) %>%    add_title('Average Life Expectancy') %>%    add_source('Data sourced from the {gapminder} package')"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_scales.html","id":"text-options","dir":"Articles","previous_headings":"","what":"Text options","title":"Getting Started with Color Scales","text":"default, color text auto-adjust based background color cell. turn feature set text color color, can setting brighten_text FALSE setting text color within text_color. may also display text bold bold_text. Data sourced {gapminder} package  change size text, can text_size. Data sourced {gapminder} package","code":"reactable(   population_data,   compact = TRUE,   pagination = FALSE,   showSortIcon = FALSE,   defaultSorted = \"'52\",   defaultSortOrder = 'desc',   defaultColDef = colDef(     maxWidth = 50,     align = 'center',     cell = tooltip(number_fmt = scales::comma),     style = color_scales(population_data, brighten_text = FALSE, text_color = 'grey', bold_text = TRUE, span = TRUE)   ),   columns = list(     country = colDef(       maxWidth = 175,       align = 'left'     )   ) ) %>%    add_title('Average Life Expectancy') %>%    add_source('Data sourced from the {gapminder} package') reactable(   population_data,   compact = TRUE,   pagination = FALSE,   showSortIcon = FALSE,   defaultSorted = \"'52\",   defaultSortOrder = 'desc',   defaultColDef = colDef(     maxWidth = 50,     align = 'center',     cell = tooltip(number_fmt = scales::comma),     style = color_scales(population_data, text_size = 24, span = TRUE)   ),   columns = list(     country = colDef(       maxWidth = 175,       align = 'left'     )   ) ) %>%    add_title('Average Life Expectancy') %>%    add_source('Data sourced from the {gapminder} package')"},{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_tiles.html","id":"format-numbers","dir":"Articles","previous_headings":"","what":"Format numbers","title":"Getting Started with Color Tiles","text":"Numbers can formatted within number_fmt argument color_tiles(). One method formatting numbers utilizing formatters scales package, numbers can formatted way ggplot2.","code":"df %>%   reactable(     columns = list(       pop = colDef(         cell = color_tiles(., number_fmt = scales::label_number_si(accuracy = 0.1))       ),       gdpPercap = colDef(         cell = color_tiles(., number_fmt = scales::comma)       ),       lifeExp = colDef(         cell = color_tiles(., number_fmt = scales::label_number(accuracy = 1))       )     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_tiles.html","id":"custom-color-palettes","dir":"Articles","previous_headings":"","what":"Custom color palettes","title":"Getting Started with Color Tiles","text":"want show different color palette default, can call within colors argument like :","code":"library(RColorBrewer) library(viridis)  df %>%   reactable(     defaultSorted = 'pop',     defaultSortOrder = 'desc',     columns = list(       pop = colDef(         cell = color_tiles(., number_fmt = scales::label_number_si(accuracy = 0.1), colors = viridis::viridis(5))       ),       gdpPercap = colDef(         cell = color_tiles(., number_fmt = scales::comma, colors = RColorBrewer::brewer.pal(7, 'Greens'))       ),       lifeExp = colDef(         cell = color_tiles(., number_fmt = scales::label_number(accuracy = 1), colors = c('tomato','white','dodgerblue'))       )     )   )"},{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_tiles.html","id":"add_legend-customization-options","dir":"Articles","previous_headings":"","what":"add_legend() customization options","title":"Getting Started with Color Tiles","text":"like add legend color palette used within color_tiles(), can including add_legend() table listing color palette used within color_tiles(). color palette defined user within add_legend(), show default blue--orange color palette used color_tiles(). 83 76 72 57 40  can add title footer legend title footer respectively: 83 76 72 57 40  default, color palette broken 5 distinct bins. However, can increase decrease number color bins like show legend providing number within bins: 83 79 76 74 72 65 57 49 40  using different color palette default one provided, can specify color palette way within color_tiles(): 83 76 72 57 40  data within column evenly distributed, can set color bias lean towards higher values lower values within column bias. Changing bias within legend good visual gauge bias affects distribution colors within column: 83 76 72 57 40","code":"df %>%   reactable(     columns = list(       lifeExp = colDef(         cell = color_tiles(., number_fmt = scales::comma)       )     )   ) %>%    add_legend(df, col_name = 'lifeExp') df %>%   reactable(     columns = list(       lifeExp = colDef(         cell = color_tiles(., number_fmt = scales::label_number(accuracy = 1))         )       )   ) %>%    add_legend(df, col_name = 'lifeExp', title = 'Life Expectancy (yrs)', footer = 'Reported as of 2007') df %>%   reactable(     columns = list(       lifeExp = colDef(         cell = color_tiles(., number_fmt = scales::label_number(accuracy = 1))         )       )   ) %>%    add_legend(df, col_name = 'lifeExp', title = 'Life Expectancy (yrs)', footer = 'Reported as of 2007', bins = 9) df %>%   reactable(     columns = list(       lifeExp = colDef(         cell = color_tiles(., number_fmt = scales::label_number(accuracy = 1), colors = viridis::viridis(5))         )       )   ) %>%    add_legend(df, col_name = 'lifeExp', title = 'Life Expectancy (yrs)', footer = 'Reported as of 2007', colors = viridis::viridis(5)) df %>%   reactable(     columns = list(       lifeExp = colDef(         cell = color_tiles(., number_fmt = scales::label_number(accuracy = 1), colors = viridis::viridis(5), bias = 3)         )       )   ) %>%    add_legend(df, col_name = 'lifeExp', title = 'Life Expectancy (yrs)', footer = 'Reported as of 2007', colors = viridis::viridis(5), bias = 3)"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_tiles.html","id":"add-a-box-shadow","dir":"Articles","previous_headings":"","what":"Add a box shadow","title":"Getting Started with Color Tiles","text":"Box shadows can added tiles create ‘3-D’ effect via box_shadow.","code":"df %>%   reactable(     columns = list(       pop = colDef(         cell = color_tiles(., number_fmt = scales::label_number_si(accuracy = 0.1), box_shadow = TRUE)       ),       gdpPercap = colDef(         cell = color_tiles(., number_fmt = scales::comma, box_shadow = TRUE)       ),       lifeExp = colDef(         cell = color_tiles(., number_fmt = scales::label_number(accuracy = 1), box_shadow = TRUE)       )     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_tiles.html","id":"assign-colors-from-another-column","dir":"Articles","previous_headings":"","what":"Assign colors from another column","title":"Getting Started with Color Tiles","text":"Colors can conditionally assigned values based another column using color_ref. example , assigned blue color Compact cars, red color Sporty cars, gold color Vans using dplyr::case_when(). within color_tiles(), reference name conditional column just created apply colors values MPG.city MPG.highway. can apply conditional colors entire dataset setting style within defaultColDef: conditional coloring can applied based numeric conditions well. example, wanted highlight cars MPG.city value 23 greater, use method apply conditions based MPG.city column instead Type column.","code":"df_continents <- df %>%   mutate(     continent_cols = dplyr::case_when(       continent == 'Africa' ~ 'orange',       continent == 'Americas' ~ 'pink',       continent == 'Asia' ~ 'violet',       continent == 'Europe' ~ 'gold',       continent == 'Oceania' ~ 'skyblue',       TRUE ~ 'grey'     )   )  df_continents %>%   reactable(     defaultSorted = 'continent',     defaultSortOrder = 'desc',     columns = list(       continent_cols = colDef(show = FALSE),       pop = colDef(         cell = color_tiles(., number_fmt = scales::label_number_si(accuracy = 0.1), color_ref = 'continent_cols')       ),       gdpPercap = colDef(         cell = color_tiles(., number_fmt = scales::comma, color_ref = 'continent_cols')       ),       lifeExp = colDef(         cell = color_tiles(., number_fmt = scales::label_number(accuracy = 1), color_ref = 'continent_cols')       )     )   ) df_continents %>%   reactable(     defaultSorted = 'continent',     defaultSortOrder = 'desc',     defaultColDef = colDef(         cell = color_tiles(., color_ref = 'continent_cols')         ),     columns = list(       continent_cols = colDef(         show = FALSE       )     )   ) df_lifexp <- df %>%   mutate(     lifexp_cols = dplyr::case_when(       lifeExp >= 80 ~ 'orange',       TRUE ~ 'lightgrey'     )   )  df_lifexp %>%   reactable(     defaultSorted = 'continent',     defaultSortOrder = 'desc',     defaultColDef = colDef(         cell = color_tiles(., color_ref = 'lifexp_cols')         ),     columns = list(       lifexp_cols = colDef(         show = FALSE       )     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_tiles.html","id":"color-assignments-by-another-column","dir":"Articles","previous_headings":"","what":"Color assignments by another column","title":"Getting Started with Color Tiles","text":"color_by argument allows color assignment based values another column. help clarify values colors represent, can add legend table: 40 57 72 76 83","code":"df %>%   reactable(     columns = list(       country = colDef(         cell = color_tiles(., color_by = 'lifeExp')       )     )   ) df %>%   reactable(     columns = list(       country = colDef(         cell = color_tiles(., color_by = 'lifeExp')       )     )   ) %>%    add_legend(df, col_name = 'lifeExp', title = 'Life Expectancy (yrs)', align = 'left')"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_tiles.html","id":"row-wise-styling","dir":"Articles","previous_headings":"","what":"Row-wise styling","title":"Getting Started with Color Tiles","text":"default, color_tiles() conditionally assigns colors values based relation values within particular column. However, table ’re showing row-wise data, average temperatures month year, difficult compare temperatures compare month: including span = TRUE within color_tiles() formatter, can conditionally assign colors values based relation values within entire dataset, instead within column. Now table displaying temperatures much easier read comparing temperatures across months: Note: dataset example sourced reactable demo cookbook wanted apply color tiles months, can referencing either numeric positions columns column names within span: Lastly, wanted completely hide text, setting show_text = FALSE, displays table heatmap shown : Note: setting tooltip = TRUE, values still visible hover. Data sourced {gapminder} package","code":"dimnames <- list(start(nottem)[1]:end(nottem)[1], month.abb) temps <- matrix(nottem, ncol = 12, byrow = TRUE, dimnames = dimnames) temps <- as_tibble(temps, rownames = 'Year') temppal <- c('#36a1d6', '#76b8de', '#a0bfd9', '#ffffff', '#d88359', '#d65440', '#c62c34')  reactable(   temps,   defaultColDef = colDef(     minWidth = 50,     cell = color_tiles(temps, span = TRUE, colors = temppal)     )   ) reactable(   temps,   defaultColDef = colDef(     minWidth = 50,     cell = color_tiles(temps, span = 4:7, colors = temppal),     )   ) population_data <- gapminder %>%   filter(continent == 'Americas') %>%   mutate(country = as.character(country),          year = paste0(\"'\", str_sub(year, 3, 4))) %>%   select(country, year, lifeExp) %>%   pivot_wider(names_from = year, values_from = lifeExp)  reactable(   population_data,   compact = TRUE,   pagination = FALSE,   showSortIcon = FALSE,   defaultSorted = \"'52\",   defaultSortOrder = 'desc',   defaultColDef = colDef(     maxWidth = 50,     cell = color_tiles(population_data, number_fmt = scales::comma, show_text = FALSE, tooltip = TRUE, span = TRUE)     ),     columns = list(       country = colDef(maxWidth = 200)     )   ) %>%   add_title('Average Life Expectancy') %>%   add_source('Data sourced from the {gapminder} package')"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/color_tiles.html","id":"text-options","dir":"Articles","previous_headings":"","what":"Text options","title":"Getting Started with Color Tiles","text":"default, color text auto-adjust based background color cell. turn feature set text color color, can setting brighten_text FALSE setting text color within text_color. may also display text bold bold_text. Data sourced {gapminder} package  change size text, can text_size. Data sourced {gapminder} package","code":"reactable(   population_data,   compact = TRUE,   pagination = FALSE,   showSortIcon = FALSE,   defaultSorted = \"'52\",   defaultSortOrder = 'desc',   defaultColDef = colDef(     maxWidth = 50,     cell = color_tiles(population_data, number_fmt = scales::comma, brighten_text = FALSE, text_color = 'grey', bold_text = TRUE, span = TRUE)     ),     columns = list(       country = colDef(maxWidth = 200)     )   ) %>%   add_title('Average Life Expectancy') %>%   add_source('Data sourced from the {gapminder} package') reactable(   population_data,   compact = TRUE,   pagination = FALSE,   showSortIcon = FALSE,   defaultSorted = \"'52\",   defaultSortOrder = 'desc',   defaultColDef = colDef(     maxWidth = 50,     cell = color_tiles(population_data, number_fmt = scales::comma, text_size = 24, span = TRUE)     ),     columns = list(       country = colDef(maxWidth = 200)     )   ) %>%   add_title('Average Life Expectancy') %>%   add_source('Data sourced from the {gapminder} package')"},{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"position-text","dir":"Articles","previous_headings":"","what":"Position text","title":"Getting Started with Data Bars","text":"default, values positioned “inside-end” filled bars: However, can change location values text_position. available options “inside-end” (default), “outside-base”, “outside-end”, “inside-base”, “center”, “”, “none”. example “outside-base” way old version data_bars() displayed values. Values positioned inside base filled bars “inside-base”: Values positioned inside end filled bars “outside-end”: Values positioned inside center filled bars “center”: Values positioned filled bars “”: Lastly, values can hidden “none”:","code":"data <- data.frame(   Group = c(\"Red Group 1\",\"Red Group 2\",\"Red Group 3\",\"Red Group 4\",\"Red Group 5\",             \"Blue Group 1\",\"Blue Group 2\",\"Blue Group 3\",\"Blue Group 4\",\"Blue Group 5\",             \"Green Group 1\",\"Green Group 2\",\"Green Group 3\",\"Green Group 4\",\"Green Group 5\"),   Pct1 = c(.27, .82, .44, .68, .78,             .74, .66, .33, .23, .20,             .50, .55, .40, .70, .60),   Pct2 = c(.33, .17, .87, .54, .37,            .84, .72, .61, .48, .77,            .21, .39, .60, .55, .81) ) reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                       number_fmt = scales::percent)   ) ) reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                       text_position = \"outside-base\",                       number_fmt = scales::percent)   ) ) reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                       text_position = \"inside-base\",                       number_fmt = scales::percent)   ) ) reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                      text_position = \"inside-end\",                      number_fmt = scales::percent)   ) ) reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                      text_position = \"center\",                       number_fmt = scales::percent)   ) ) reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                      text_position = \"above\",                       number_fmt = scales::percent)   ) ) reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                       text_position = \"none\")   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"force-text-outside","dir":"Articles","previous_headings":"","what":"Force text outside","title":"Getting Started with Data Bars","text":"values difficult see inside bars since small relative values column, can “force” show outside data bars providing range values within force_outside:","code":"reactable(   data,   pagination = FALSE,   defaultSortOrder = \"desc\",   defaultSorted = \"Pct2\",   defaultColDef = colDef(     cell = data_bars(data,                       number_fmt = scales::percent,                      force_outside = c(0,0.4))   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"aligning-data-bars","dir":"Articles","previous_headings":"","what":"Aligning data bars","title":"Getting Started with Data Bars","text":"default, filled bars aligned left--right, can aligned right--left setting align_bars = \"right\": text positions outlined section can applied right-aligned data bars. can also mix match alignments.","code":"reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                       align_bars = \"right\",                       number_fmt = scales::percent)   ) ) reactable(   data,   pagination = FALSE,   columns = list(     Pct1 = colDef(       cell = data_bars(data,                         align_bars = \"right\",                         text_position = \"inside-end\",                         number_fmt = scales::percent)       ),     Pct2 = colDef(       cell = data_bars(data,                         align_bars = \"left\",                        text_position = \"inside-end\",                        number_fmt = scales::percent)       )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"add-a-box-shadow","dir":"Articles","previous_headings":"","what":"Add a box shadow","title":"Getting Started with Data Bars","text":"Box shadows can added bars create “3-D” effect via box_shadow.","code":"reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                       box_shadow = TRUE,                       number_fmt = scales::percent)   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"round-edges","dir":"Articles","previous_headings":"","what":"Round edges","title":"Getting Started with Data Bars","text":"edges bars can rounded setting round_edges TRUE.","code":"reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                       round_edges = TRUE,                       number_fmt = scales::percent)   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"add-borders","dir":"Articles","previous_headings":"","what":"Add borders","title":"Getting Started with Data Bars","text":"Borders can placed around bars setting border properties within border_style, border_color, border_width:","code":"reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                       border_style = \"solid\",                      border_color = \"gold\",                       border_width = \"2px\",                      number_fmt = scales::percent)   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"set-a-maximum-width","dir":"Articles","previous_headings":"","what":"Set a maximum width","title":"Getting Started with Data Bars","text":"default, width filled data bars equal maximum value within particular column. cases, want display, sometimes ’s better extend range. example, percentages , want extend width show values 100%, setting max_value 1: Now look 82% value , 18% empty space filled background showing value 100% 82%.","code":"reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                       fill_color = viridis(5),                       background = \"lightgrey\",                      text_position = \"inside-end\",                       max_value = 1,                       number_fmt = scales::percent)   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"adjust-the-height-of-the-bars","dir":"Articles","previous_headings":"","what":"Adjust the height of the bars","title":"Getting Started with Data Bars","text":"default height data bars set 19px can adjusted within bar_height. increase height bars, provide numeric value greater 19: decrease height bars, provide numeric value less 19:","code":"reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                       bar_height = 35,                       number_fmt = scales::percent)   ) ) reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                      bar_height = 3,                       text_position = \"outside-end\",                       background = \"transparent\",                       number_fmt = scales::percent)   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"reference-colors-from-another-column","dir":"Articles","previous_headings":"","what":"Reference colors from another column","title":"Getting Started with Data Bars","text":"can now conditionally assign colors rows based values within another column fill_color_ref argument. allows assign colors groups shown : can conditionally assign colors based values:","code":"data %>%   mutate(color_pal = case_when(     str_detect(Group, \"Red\") ~ \"#FF3B28\",     str_detect(Group, \"Blue\") ~ \"#006FEF\",     str_detect(Group, \"Green\") ~ \"#3ABC0E\",     TRUE ~ \"darkgrey\"   )) %>% reactable(.,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(.,                      fill_color_ref = \"color_pal\",                       text_position = \"inside-end\",                      background = \"lightgrey\",                       max_value = 1,                       number_fmt = scales::percent)   ),   columns = list(color_pal = colDef(show = FALSE) ## hide the color_pal column   ) ) data %>%   mutate(color_pal = case_when(     Pct1 >= .7 ~ \"#FF3B28\",     TRUE ~ \"darkgrey\"   )) %>%   select(-Pct2) %>%  reactable(.,   pagination = FALSE,   defaultSorted = \"Pct1\",   defaultSortOrder = \"desc\",   defaultColDef = colDef(     cell = data_bars(.,                       fill_color_ref = \"color_pal\",                       text_position = \"inside-end\",                       background = \"lightgrey\",                       max_value = 1,                       number_fmt = scales::percent)   ),   columns = list(color_pal = colDef(show = FALSE)   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"gradient-colors","dir":"Articles","previous_headings":"","what":"Gradient colors","title":"Getting Started with Data Bars","text":"data_bars_gradient() now depreciated replaced gradient argument within data_bars(). Set fill_gradient = TRUE change multi-color palette left--right gradient used fill bars:","code":"reactable(   data,   pagination = FALSE,   defaultColDef = colDef(     cell = data_bars(data,                       fill_color = c(\"#1efffd\", \"#1e20ff\"),                       fill_gradient = TRUE,                       background = \"lightgrey\",                       max_value = 1,                       brighten_text = FALSE,                      text_color = \"white\",                      number_fmt = scales::percent)   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"fill-assignments-by-another-column","dir":"Articles","previous_headings":"","what":"Fill assignments by another column","title":"Getting Started with Data Bars","text":"fill_by, can apply data bars non-numeric column referencing values contained within another column. Note: works columns character-type, factors. still able control position text relative bars text_position:","code":"car_data <- MASS::Cars93 %>%    filter(Type %in% c('Compact', 'Sporty', 'Van')) %>%    select(c('Make', 'Type', 'MPG.city')) %>%    mutate(Make = as.character(Make)) %>%    tail(10)  reactable(   car_data,   columns = list(     Make = colDef(       cell = data_bars(car_data, fill_by = \"MPG.city\")     )   ) ) car_data <- MASS::Cars93 %>%    filter(Type %in% c('Compact', 'Sporty', 'Van')) %>%    select(c('Make', 'Type', 'MPG.city')) %>%    mutate(Make = as.character(Make)) %>%    tail(10)  reactable(   car_data,   defaultSorted = \"MPG.city\",   defaultSortOrder = \"desc\",   columns = list(     Make = colDef(       cell = data_bars(car_data, fill_by = \"MPG.city\", text_position = \"above\")     )   ) )"},{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"add_legend-customization-options","dir":"Articles","previous_headings":"","what":"add_legend() customization options","title":"Getting Started with Data Bars","text":"like add legend table, can including add_legend(). two things need within add_legend(), name column legend displayed , color palette used within table. Since used custom color palette fill_color data_bars example , need match color palette within colors legend. Adding legend useful using fill_by option data_bars since values aren’t directly displayed bars used numeric column. 17 18 20 22 25","code":"reactable(   car_data,   defaultSorted = \"MPG.city\",   defaultSortOrder = \"desc\",   columns = list(     Make = colDef(       cell = data_bars(car_data, fill_by = \"MPG.city\", text_position = \"above\", fill_color = c(\"#22577A\",\"#38A3A5\",\"#57CC99\",\"#80ED99\",\"#C7F9CC\"))     )   ) ) %>%  add_legend(car_data, col_name = 'MPG.city', title = 'MPG City', align = 'left', colors = c(\"#22577A\",\"#38A3A5\",\"#57CC99\",\"#80ED99\",\"#C7F9CC\"))"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"positive-and-negative-values","dir":"Articles","previous_headings":"","what":"Positive and negative values","title":"Getting Started with Data Bars","text":"data_bars_pos_neg() also now depreciated replaced default setting data_bars() automatically detects negative values within column adjusts bars go opposite directions rather one. two colors provided, first color applied negative-filled bars second color applied positive-filled bars labels can positioned fashion used positive-valued data bars examples :","code":"data %>%    mutate(Change = Pct1 - Pct2) %>%    select(Group, Change) %>%  reactable(.,   pagination = FALSE,   columns = list(     Change = colDef(       cell = data_bars(.,                         fill_color = c(\"lightblue\",\"orange\"),                        number_fmt = scales::percent))   ) ) data %>%    mutate(Change = Pct1 - Pct2) %>%    select(Group, Change) %>%  reactable(.,   pagination = FALSE,   defaultSorted = \"Change\",   defaultSortOrder = \"asc\",   columns = list(     Change = colDef(       cell = data_bars(.,                         fill_color = c(\"lightblue\",\"orange\"),                        text_position = \"inside-end\",                         number_fmt = scales::percent))   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"add-icons","dir":"Articles","previous_headings":"","what":"Add icons","title":"Getting Started with Data Bars","text":"Now within data_bars() formatter, can directly add icons tables! First let’s start dataset shows fake data leading social media websites. later use names sites within Logo column apply icons Font Awesome icon library. Please note names sites lower-case match icon names within Font Awesome. add logos company end data bars, use icon_ref reference column (Company) containing names companies: default, color icon inherited color filled data bar, can changed either icon_color icon_color_ref using order apply company’s primary color icons: alternative use fill_color_ref instead, applies company’s primary color fill data bars icons inherit color well: size icons can also adjusted icon_size:","code":"data <- data.frame(   Company = c(\"facebook\", \"twitter\", \"linkedin\", \"reddit\", \"youtube\", \"instagram\", \"pinterest\", \"snapchat\"),   Primary = c(\"#4267B2\", \"#1DA1F2\", \"#0E76A8\", \"#FF4500\", \"#FF0000\", \"#833AB4\", \"#E60023\", \"#FFFC00\"),   Values = c(75, 120, 90, 100, 80, 70, 60, 40) ) reactable(   data,   defaultSorted = \"Values\",   defaultSortOrder = \"desc\",   columns = list(     Values = colDef(       cell = data_bars(data,                         fill_color = \"black\",                        fill_opacity = 0.8,                         text_position = \"inside-end\"))   ) ) reactable(   data,   defaultSorted = \"Values\",   defaultSortOrder = \"desc\",   columns = list(     Values = colDef(       cell = data_bars(data,                         icon_ref = \"Company\",                         fill_color = \"black\",                         fill_opacity = 0.8,                         text_position = \"inside-end\"))   ) ) reactable(   data,   defaultSorted = \"Values\",   defaultSortOrder = \"desc\",   columns = list(     Values = colDef(       cell = data_bars(data,                        icon_ref = \"Company\",                         icon_color_ref = \"Primary\",                        fill_color = \"black\",                         fill_opacity = 0.8,                         text_position = \"inside-end\"))   ) ) reactable(   data,   defaultSorted = \"Values\",   defaultSortOrder = \"desc\",   columns = list(     Values = colDef(       cell = data_bars(data,                         icon_ref = \"Company\",                        fill_color_ref = \"Primary\",                        text_position = \"inside-end\"))   ) ) reactable(   data,   defaultSorted = \"Values\",   defaultSortOrder = \"desc\",   columns = list(     Values = colDef(       cell = data_bars(data,                         icon_ref = \"Company\",                         icon_size = 35,                         fill_color_ref = \"Primary\",                        text_position = \"inside-end\",                         background = \"transparent\")     ),     Company = colDef(show = FALSE),      Primary = colDef(show = FALSE)   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/data_bars.html","id":"add-images","dir":"Articles","previous_headings":"","what":"Add images","title":"Getting Started with Data Bars","text":"Similarly, can now assign images data bars! First let’s load dataset nflfastR used Embed Images example (dataset limited just 2018-2019 seasons): URL’s team logos contained within team_logo_espn column can referenced using img_ref overlay top data bars. images can also re-sized using img_height img_width. default image size 20px 20px.","code":"## load multiple seasons seasons <- 2018:2019 pbp <- map_df(seasons, function(x) {   readRDS(url(     paste0(       \"https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_\",       x,       \".rds\"     )   )) }) ## figures with QB stats qbs <- pbp %>%   filter(week <= 17,!is.na(epa)) %>%   group_by(id, name) %>%   summarize(     epa = mean(qb_epa),     cpoe = mean(cpoe, na.rm = T),     n_dropbacks = sum(pass),     n_plays = n(),     team = last(posteam)   ) %>%   ungroup() %>%   filter(n_dropbacks > 100 & n_plays > 1000) ## `summarise()` has grouped output by 'id'. You can override using the `.groups` argument. ## join team logos to dataset qbs <- qbs %>%   left_join(teams_colors_logos, by = c('team' = 'team_abbr')) %>%    select(name, team_logo_espn, team_color, cpoe, epa) reactable(   qbs,   defaultPageSize = 20,   columns = list(     team_logo_espn = colDef(show = FALSE), ## hide column containing team logos     team_color = colDef(show = FALSE), ## hide column containing team colors     name = colDef(maxWidth = 120),     cpoe = colDef(       cell = data_bars(qbs,                         fill_color_ref = \"team_color\",                        fill_opacity = 0.3,                        brighten_text = FALSE,                         text_position = \"inside-end\",                        number_fmt = scales::percent,                         img_ref = \"team_logo_espn\",                         img_height = 30,                         img_width = 30)     ),     epa = colDef(       cell = data_bars(qbs,                         fill_color_ref = \"team_color\",                        fill_opacity = 0.3,                         brighten_text = FALSE,                        text_position = \"inside-end\",                        number_fmt = scales::number_format(accuracy = 0.01),                        img_ref = \"team_logo_espn\",                        img_height = 30,                         img_width = 30)     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_assign.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Assign Icons to Values","text":"reactablefmtr, can easily replace values table icons Font Awesome. Using icon_assign(), can replace values Cylinders column icons. default, values assigned blue circular icon cylinder car. grey empty icons show value compares maximum number cylinders table. Note icon_assign() works numeric columns. Cylinders column factor column original dataset, first needed convert numeric column using icon_assign().","code":"data <- MASS::Cars93[1:20, c(\"Make\", \"Cylinders\", \"MPG.city\", \"Price\")]  ### convert column to numeric data$Cylinders <- as.numeric(as.character(data$Cylinders))  reactable(   data,    defaultColDef = colDef(align = \"left\", maxWidth = 200),    columns = list(Cylinders = colDef(cell = icon_assign(data))   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_assign.html","id":"change-icon-and-color","dir":"Articles","previous_headings":"","what":"Change Icon and Color","title":"Assign Icons to Values","text":"MPG.city column, let’s say wanted use icon circle represent car’s MPG. can easily set icon “envira” icon Font Awesome library, change color green. Now, sort MPG.city column, can easily see “green leaves” present, eco-friendly car terms fuel efficiency.","code":"reactable(   data,   defaultColDef = colDef(align = \"left\", maxWidth = 200),    columns = list(     Cylinders = colDef(cell = icon_assign(data)),     MPG.city = colDef(cell = icon_assign(data, icon = \"envira\", fill_color = \"forestgreen\"))   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_assign.html","id":"bucketing","dir":"Articles","previous_headings":"","what":"Bucketing","title":"Assign Icons to Values","text":"think MPG.city column little overcrowded icons, alternative option break values buckets choice buckets option icon_assign(). , wanted bucket rank MPG.city five groups, just add buckets = 5 get column easier eyes:","code":"reactable(   data,   defaultColDef = colDef(align = \"left\", maxWidth = 200),    columns = list(     Cylinders = colDef(cell = icon_assign(data)),     MPG.city = colDef(cell = icon_assign(data, icon = \"envira\", fill_color = \"forestgreen\", buckets = 5))   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_assign.html","id":"show-values","dir":"Articles","previous_headings":"","what":"Show Values","title":"Assign Icons to Values","text":"wanted display values alongside icons, can include show_values set equal either “left” “right” depending side prefer. example add values right-hand side icons MPG.city column:","code":"reactable(   data,   defaultColDef = colDef(align = \"left\", maxWidth = 200),    columns = list(     Cylinders = colDef(cell = icon_assign(data)),     MPG.city = colDef(cell = icon_assign(data, icon = \"envira\", fill_color = \"forestgreen\", buckets = 5, show_values = \"right\"))   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_assign.html","id":"format-numbers","dir":"Articles","previous_headings":"","what":"Format Numbers","title":"Assign Icons to Values","text":"Lastly, want show values column contains formatted numbers Price column table, can add dollar signs price car number_fmt = scales::dollar, method used format numbers data_bars() color_tiles(). , bucketed Price column 5 groups like MPG.city column included number_fmt option. Notice also displaying empty icons optional. can hidden setting empty_color = \"white\".","code":"reactable(   data,   defaultColDef = colDef(align = \"left\", maxWidth = 200),    columns = list(     Cylinders = colDef(cell = icon_assign(data)),     MPG.city = colDef(cell = icon_assign(data, icon = \"envira\", fill_color = \"forestgreen\", buckets = 5, show_values = \"right\")),     Price = colDef(cell = icon_assign(data, icon = \"dollar-sign\", fill_color = \"red\", empty_color = \"white\", buckets = 5, show_values = \"right\", number_fmt = scales::dollar))   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_assign.html","id":"aligning-icons","dir":"Articles","previous_headings":"","what":"Aligning Icons","title":"Assign Icons to Values","text":"Icons can aligned within column either left, right, center align_icons.","code":"data <- MASS::Cars93[1:20, c(\"Make\", \"Passengers\")]  reactable(   data,   defaultColDef = colDef(maxWidth = 300, align = \"center\",                          cell = icon_assign(data, icon = \"user\", align_icons = \"center\")   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_sets.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Getting Started with Icon Sets","text":"icon_sets(), can conditionally format values using icons Font Awesome. icon_sets() placed within cell argument colDef, circle icons added values column colored blue, grey, orange smallest values largest values.","code":"data <- sample_n(penguins, 50) %>%    filter(!is.na(bill_length_mm)) %>%    select(species, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)  reactable(   data,   defaultColDef = colDef(     cell = icon_sets(data)   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_sets.html","id":"using-icons-from-font-awesome","dir":"Articles","previous_headings":"","what":"Using Icons from Font Awesome","title":"Getting Started with Icon Sets","text":"icon_sets() accepts free icon available Font Awesome icon gallery. example, since data ’re displaying bill flipper measurements penguins, may want use ruler icons Font Awesome visually show . can also apply multiple icons column. example, can assign balance scale icons lean left right lightest heaviest penguins:","code":"reactable(   data,   columns = list(     bill_length_mm = colDef(cell = icon_sets(data, icons = c(\"ruler\"))),     bill_depth_mm = colDef(cell = icon_sets(data, icons = c(\"ruler-vertical\"))),     flipper_length_mm = colDef(cell = icon_sets(data, icons = c(\"ruler-horizontal\"))),     body_mass_g = colDef(cell = icon_sets(data, icons = c(\"balance-scale-left\", \"balance-scale\", \"balance-scale-right\")))     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_sets.html","id":"icon-colors","dir":"Articles","previous_headings":"","what":"Icon Colors","title":"Getting Started with Icon Sets","text":"number colors used icon_sets() determines values low high assigned. default number colors used icon_sets() three. Therefore, data split three groups: low, medium, high. one color provided, values assigned color. two colors provided, first color represent lower 50% values second color represent upper 50% values. four colors provided, first color represent lowest 25%, next color represent values 25-50%, . can use many colors like icon_sets() automatically assign colors low high. opacity colors can controlled assigning value 0 (fully transparent) 1 (fully opaque).","code":"library(viridis)  reactable(   data,   defaultColDef = colDef(     cell = icon_sets(data, colors = viridis::viridis(5))   ) ) library(viridis)  reactable(   data,   defaultColDef = colDef(     cell = icon_sets(data, opacity = 0.5, colors = viridis::viridis(5))   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_sets.html","id":"icon-positioning","dir":"Articles","previous_headings":"","what":"Icon Positioning","title":"Getting Started with Icon Sets","text":"icons can positioned five different ways relative values cells: left, right, , , (hides values). default icon position right values, can easily changed available positions like :","code":"reactable(   data,   defaultColDef = colDef(     align = \"center\",      cell = icon_sets(data, icon_position = \"left\")   ) ) reactable(   data,   defaultColDef = colDef(     align = \"center\",      cell = icon_sets(data, icon_position = \"above\")   ) ) reactable(   data,   defaultColDef = colDef(     align = \"center\",      cell = icon_sets(data, icon_position = \"below\")   ) ) reactable(   data,   defaultColDef = colDef(     align = \"center\",      cell = icon_sets(data, icon_position = \"over\")   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_sets.html","id":"adjusting-the-size-of-the-icons","dir":"Articles","previous_headings":"","what":"Adjusting the Size of the Icons","title":"Getting Started with Icon Sets","text":"size icons can adjusted providing numeric value within icon_size. default icon size represented px 16.","code":"car_data <- MASS::Cars93 %>%    filter(Type %in% c(\"Compact\", \"Sporty\", \"Van\")) %>%    select(c(\"Make\", \"Type\", \"MPG.city\", \"MPG.highway\")) %>%    head(10)   reactable(   car_data,   defaultColDef = colDef(     align = \"center\",      cell = icon_sets(car_data, icon_size = 28, icons = \"gas-pump\", colors = c(\"red\", \"grey\", \"darkgreen\"))   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_sets.html","id":"assigning-icons-from-another-column","dir":"Articles","previous_headings":"","what":"Assigning Icons from Another Column","title":"Getting Started with Icon Sets","text":"Icons can conditionally assigned text/values another column using icon_ref within icon_sets(). One method creating column containing icon references using dplyr::case_when() assign icons within created column. column exists dataset, simply can referenced within icon_ref shown within Type column. also option hiding text next icons including icon_position = \"\":","code":"car_types <- car_data %>%    mutate(car_icons = dplyr::case_when(     Type == \"Compact\" ~ \"car\",     Type == \"Sporty\" ~ \"flag-checkered\",     Type == \"Van\" ~ \"shuttle-van\",     TRUE ~ \"other\"   ))  car_types %>%  reactable(   .,   defaultSorted = \"Type\",   defaultColDef = colDef(     align = \"center\",     cell = icon_sets(., icon_size = 28, icons = \"gas-pump\", colors = c(\"red\", \"grey\", \"darkgreen\"))   ),   columns = list(     car_icons = colDef(show = FALSE),     Type = colDef(       align = \"right\",       cell = icon_sets(., icon_ref = \"car_icons\", icon_size = 28, colors = \"black\")     )   ) ) car_types %>%  reactable(   .,   defaultSorted = \"Type\",   defaultColDef = colDef(     align = \"center\",     cell = icon_sets(., icon_size = 28, icons = \"gas-pump\", colors = c(\"red\", \"grey\", \"darkgreen\"))   ),   columns = list(     car_icons = colDef(show = FALSE),     Type = colDef(       cell = icon_sets(., icon_ref = \"car_icons\", icon_position = \"over\", icon_size = 28, colors = \"black\")     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/icon_sets.html","id":"assigning-icon-colors-from-another-column","dir":"Articles","previous_headings":"","what":"Assigning Icon Colors from Another Column","title":"Getting Started with Icon Sets","text":"Now icons assigned type vehicle, can also assign colors another column icon_color_ref using approach icon_ref, instead conditionally assigning icons, assign colors:","code":"car_types <- car_types %>%    mutate(car_colors = dplyr::case_when(     Type == \"Compact\" ~ \"dodgerblue\",     Type == \"Sporty\" ~ \"black\",     Type == \"Van\" ~ \"gold\",     TRUE ~ \"other\"   ))  car_types %>%  reactable(   .,   defaultSorted = \"Type\",   defaultColDef = colDef(     align = \"center\",     cell = icon_sets(., icon_size = 28, icons = \"gas-pump\", colors = c(\"red\", \"grey\", \"darkgreen\"))   ),   columns = list(     car_colors = colDef(show = FALSE),     car_icons = colDef(show = FALSE),     Type = colDef(       cell = icon_sets(., icon_color_ref = \"car_colors\", icon_ref = \"car_icons\", icon_position = \"over\", icon_size = 28, colors = \"black\")     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nba_player_ratings.html","id":"reactablefmtr-elements-used","dir":"Articles","previous_headings":"","what":"{reactablefmtr} elements used","title":"2019 NBA Player Ratings","text":"embed_img() used display team logos TEAM column. Logo URL’s imported cleaned dataset {teamcolors} icon_assign() used bucket number minutes played five groups display stopwatch icons MIN column color_scales() used conditionally color cells three columns OVERALL RAPTOR data_bars() used display data bars WAR column fivethirtyeight() theme used table theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nba_player_ratings.html","id":"code","dir":"Articles","previous_headings":"","what":"Code","title":"2019 NBA Player Ratings","text":"","code":"library(reactablefmtr) library(htmltools) library(crosstalk) # for control filters  ### load data from 538 data <- read.csv(file = \"RAPTOR_by_team_19-20.csv\")  ### create shared dataset for crosstalk crosstalk_data <- SharedData$new(data)  ### crosstalk team filter team_filter <- filter_select(   id = \"team\",   label = \"TEAM\",   sharedData = crosstalk_data,   group = ~ TEAM_NAME )  ### crosstalk conference filter conference_filter <- filter_select(   id = \"conf\",   label = \"CONFERENCE\",   sharedData = crosstalk_data,   group = ~ CONFERENCE )  ### crosstalk minutes filter minutes_filter <- filter_slider(   id = \"minutes\",   label = \"MINUTES PLAYED\",   sharedData = crosstalk_data,   column = ~ MIN,   ticks = TRUE,   dragRange = FALSE,   step = 100,   width = \"50%\" )  ### load font from google fonts htmltools::tags$link(href = \"https://fonts.googleapis.com/css?family=Chivo:400,600,700&display=swap\", rel = \"stylesheet\")  nba_table <-  reactable(   crosstalk_data,   theme = fivethirtyeight(centered = TRUE),   compact = TRUE,   ### add column group header   columnGroups = list(     colGroup(name = \"OVERALL RAPTOR\", columns = c(\"OFF\",\"DEF\",\"TOT\"))     ),   showSortIcon = FALSE,   searchable = TRUE,   language = reactableLang(     searchPlaceholder = \"SEARCH FOR A PLAYER...\"),   defaultPageSize = 100,   columns = list(     TEAM_NAME = colDef(show = FALSE),     CONFERENCE = colDef(show = FALSE),     RANK = colDef(maxWidth = 55, name = \"\"),     PLAYER = colDef(maxWidth = 225),     ### add logos using embed_img()     TEAM_LOGO = colDef(       name = \"TEAM\",       maxWidth = 70,       align = \"center\",       cell = embed_img(height = 25, width = 40)     ),     ### add icons using icon_assign()     MIN = colDef(       maxWidth = 85,       align = \"center\",       cell = icon_assign(         data,         icon = \"stopwatch\",         fill_color = \"#555555\",         buckets = 5       ),       style = list(borderRight = \"1px dashed rgba(0, 0, 0, 0.3)\")     ),     ### add color scales using color_scales()     OFF = colDef(       maxWidth = 60,       cell = function(x)         sprintf(\"%+0.1f\", x),       style = color_scales(data, colors = c(\"#fd84a9\", \"white\", \"#42c2ca\"))     ),     ### add color scales using color_scales()     DEF = colDef(       maxWidth = 60,       cell = function(x)         sprintf(\"%+0.1f\", x),       style = color_scales(data, colors = c(\"#fd84a9\", \"white\", \"#42c2ca\"))     ),     ### add color scales using color_scales()     TOT = colDef(       maxWidth = 60,       cell = function(x)         sprintf(\"%+0.1f\", x),       style = color_scales(data, colors = c(\"#fd84a9\", \"white\", \"#42c2ca\"))     ),     ### add bars using data_bars_pos_neg()     WAR = colDef(       maxWidth = 280,       align = \"center\",       cell = data_bars(         data,         fill_color = c(\"#fd84a9\", \"#fee6ed\", \"#d9f2f4\", \"#42c2ca\"),         number_fmt = scales::number_format(accuracy = 0.1)       ),       style = list(borderLeft = \"1px dashed rgba(0, 0, 0, 0.3)\")     )   ) )  ### display crosstalk filters div(bscols(   widths = c(4, NA, NA),     list(team_filter,          conference_filter,          minutes_filter)) )  ### display table div(nba_table)"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings.html","id":"code","dir":"Articles","previous_headings":"","what":"Code","title":"","text":"","code":"# Function to pull data from PFR get_pfr_standings <- function(year) {    url <- paste0(\"https://www.pro-football-reference.com/years/\",year,\"/\")   AFC_table <- url %>%     xml2::read_html() %>%     html_nodes(xpath = '//*[@id=\"AFC\"]') %>%     html_table()   AFC_table <- AFC_table[[1]]   NFC_table <- url %>%     xml2::read_html() %>%     html_nodes(xpath = '//*[@id=\"NFC\"]') %>%     html_table()   NFC_table <- NFC_table[[1]]   NFL_table <- rbind(AFC_table, NFC_table)   NFL_table_clean <- NFL_table %>%     mutate(Division = ifelse(str_detect(Tm, \"FC\"), Tm, NA)) %>%     fill(Division, .direction = \"down\") %>%     filter(str_detect(Tm, \"FC\", negate = TRUE)) %>%     mutate(Playoffs = ifelse(str_detect(Tm, \"[*+]\"), \"Yes\", \"No\")) %>%     mutate(Tm = gsub(\"[*+]\", \"\", Tm)) %>%     rename(Record = `W-L%`) %>%     unite(Record, W, L, T, sep = \"-\") %>%     mutate(Team = word(Tm, -1)) %>%     mutate(       Team = case_when(         Team == \"Team\" ~ \"Football Team\",         TRUE ~ Team       )     ) %>%     mutate_at(c(\"SRS\", \"OSRS\", \"DSRS\", \"PF\", \"PA\", \"MoV\", \"SoS\"),               as.numeric) %>%     mutate(SOS = ntile(SoS, 4)) %>%     select(       Division,       Team,       Record,       Playoffs,       SOS,       PF,       PA,       MoV,       OSRS,       DSRS,       SRS,     ) }  # Join to team logos from {nflfastR} data <- get_pfr_standings(2021) %>%   left_join(distinct(select(teams_colors_logos, team_nick, team_logo_espn)),             by = c('Team' = 'team_nick')) %>%   select(Division, team_logo_espn, everything())  # Create table data %>%   mutate(     mov_cols = case_when(MoV >= 0 ~ \"darkgreen\",                          TRUE ~ \"red\"),     playoff_cols = case_when(Playoffs == \"Yes\" ~ \"darkgreen\",                              TRUE ~ \"red\")   ) %>%   reactable(     .,     theme = fivethirtyeight(centered = TRUE, header_font_size = 11),     pagination = FALSE,     showSortIcon = FALSE,     highlight = TRUE,     compact = TRUE,     defaultSorted = \"SRS\",     defaultSortOrder = \"desc\",     columnGroups = list(       colGroup(name = \"Team Rating (SRS)\",                columns = c(\"SRS\", \"OSRS\", \"DSRS\")),       colGroup(name = \"Team Scoring & Margin of Victory\",                columns = c(\"PF\", \"PA\", \"MoV\"))     ),     rowStyle = group_border_sort(\"Division\"),     columns = list(       Division = colDef(         name = \"Div.\",         maxWidth = 85,         style = group_merge_sort(\"Division\")       ),       team_logo_espn = colDef(         name = \"\",         maxWidth = 75,         sortable = FALSE,         style = background_img(height = \"200%\", width = \"125%\")       ),       Team = colDef(         minWidth = 100,         align = \"left\",         cell = merge_column(., \"Record\", merged_position = \"below\"),         style = list(borderRight = \"1px solid #777\")       ),       Record = colDef(show = FALSE),       Playoffs = colDef(         maxWidth = 70,         align = \"center\",         cell = pill_buttons(., color_ref = \"playoff_cols\", opacity = 0.7),         style = list(borderRight = \"1px solid #777\")       ),       playoff_cols = colDef(show = FALSE),       SOS = colDef(         maxWidth = 47,         align = \"center\",         cell = icon_sets(., icon_set = \"ski rating\", icon_position = \"over\"),         style = list(borderRight = \"1px solid #777\")       ),       PF = colDef(         maxWidth = 180,         cell = data_bars(., text_size = 13, box_shadow = TRUE)),       PA = colDef(         maxWidth = 180,         cell = data_bars(., text_size = 13, box_shadow = TRUE)),       MoV = colDef(         maxWidth = 80,         cell = pill_buttons(., number_fmt = function(value) sprintf(\"%+0.1f\", value), colors = \"transparent\", opacity = 0, bold_text = TRUE, text_color_ref = \"mov_cols\"         ),         style = list(borderRight = \"1px solid #777\")       ),       mov_cols = colDef(show = FALSE),       OSRS = colDef(         maxWidth = 55,         cell = color_tiles(., bias = 1.3, box_shadow = TRUE)       ),       DSRS = colDef(         maxWidth = 55,         cell = color_tiles(., bias = 0.6, box_shadow = TRUE)       ),       SRS = colDef(         maxWidth = 55,         cell = color_tiles(., bias = 0.7, box_shadow = TRUE)       )     )   ) %>%   add_title(\"2021 NFL Standings & Team Ratings\", margin = margin(0, 0, 10, 0)) %>%   add_icon_legend(icon_set = \"ski rating\") %>%   add_source(\"Table created by: Kyle Cuilla @kc_analytics with {reactablefmtr} •  Data: Pro-Football-Reference.com\", font_size = 12)"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"get-the-data","dir":"Articles","previous_headings":"","what":"Get the data","title":"Building the NFL Standings Table","text":"data pulled Pro Football Reference. PFR proprietary method rating teams Simple Rating System (SRS). team offensive SRS, defensive SRS, overall SRS. PFR also uses SRS calculate team’s Strength Schedule (SOS). Additional metrics dataset total points scored, total points allowed, average margin victory. data pulled tidied format able directly final table. team logos added dataset {nflfastR} package. code used pull tidy data can found vignettes/nfl_standings.Rmd. data appears basic {reactable} table:","code":"library(reactablefmtr) library(tidyverse)  reactable(data)"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"apply-a-theme-to-the-table","dir":"Articles","previous_headings":"","what":"Apply a theme to the table","title":"Building the NFL Standings Table","text":"20 built-themes {reactablefmtr}. apply theme {reactable} table, simply reference name theme within reactable::theme. , applying fivethirtyeight() theme, inspired 538. Additional customization options available within theme, centered vertically centers content cell set TRUE.","code":"reactable(data,           theme = fivethirtyeight(centered = TRUE, header_font_size = 11)           )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"merge-cells-and-add-borders-to-groups","dir":"Articles","previous_headings":"","what":"Merge cells and add borders to groups","title":"Building the NFL Standings Table","text":"begin first column table, “Division”, work way left--right. sort Division column final table, notice borders appear division similar divisions merged together. sort column table, borders disappear divisions become unmerged. achieve , need use two built-formatters {reactablefmtr}. first called group_border_sort() needs placed within rowStyle parameter {reactable}. group_border_sort(), just need specify name column like merge sort. able specify four columns time. second called group_merge_sort(). merges similar values together sorting needs placed within style parameter colDef(). Note: Credit functions goes Greg Lin, creator {reactable} package. Greg wrote JavaScript version functions {reactable} Demo Cookbook. {reactablefmtr} version functions make easy use R without needing modify JavaScript code.","code":"data %>%   reactable(.,             theme = fivethirtyeight(centered = TRUE, header_font_size = 11),             defaultSorted = \"Division\",             # add border between groups when sorting by the Division column             rowStyle = group_border_sort(\"Division\"),             columns = list(               Division = colDef(                 name = \"Div.\",                 # hide rows containing duplicate values on sort                  style = group_merge_sort(\"Division\")               ))   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"render-team-logos","dir":"Articles","previous_headings":"","what":"Render team logos","title":"Building the NFL Standings Table","text":"two ways render team logos image address within {reactablefmtr}. first way outlined utilizing embed_img(). way using table background_img(). advantage using background_img() can adjust aspect images without stretching size cells table. default, height width image 100% fits within cell. However, can create effect “zooming-” images providing height width greater 100%: Note: likely need adjust maxWidth achieve image aspect looking .","code":"data %>%   reactable(.,             theme = fivethirtyeight(centered = TRUE, header_font_size = 11),             defaultSorted = \"Division\",             # add border between groups when sorting by the Division column             rowStyle = group_border_sort(\"Division\"),             columns = list(               Division = colDef(                 name = \"Div.\",                 # hide rows containing duplicate values on sort                  style = group_merge_sort(\"Division\")               ),               team_logo_espn = colDef(                 name = \"\",                 maxWidth = 30,                 sortable = FALSE,                 # render team logos from their image address                 style = background_img()               ))   ) data %>%   reactable(.,             theme = fivethirtyeight(centered = TRUE, header_font_size = 11),             defaultSorted = \"Division\",             # add border between groups when sorting by the Division column             rowStyle = group_border_sort(\"Division\"),             columns = list(               Division = colDef(                 name = \"Div.\",                 # hide rows containing duplicate values on sort                  style = group_merge_sort(\"Division\")               ),               team_logo_espn = colDef(                 name = \"\",                 maxWidth = 50,                 sortable = FALSE,                 # render team logos from their image address and increase their size                 style = background_img(height = \"200%\", width = \"125%\")               ))   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"merge-and-stack-two-columns-together","dir":"Articles","previous_headings":"","what":"Merge and stack two columns together","title":"Building the NFL Standings Table","text":"combine “Team” column “Record” column, can use merge_column() formatter. default, column merged column ’re operating placed right-hand side. changing merged_position “”, ’ll placed . also options available style column individually. Note: merged column, “Record”, still appear table ’s column. hide column, set show = FALSE within colDef().","code":"data %>%   reactable(.,             theme = fivethirtyeight(centered = TRUE, header_font_size = 11),             defaultSorted = \"Division\",             # add border between groups when sorting by the Division column             rowStyle = group_border_sort(\"Division\"),             columns = list(               Division = colDef(                 name = \"Div.\",                 # hide rows containing duplicate values on sort                  style = group_merge_sort(\"Division\")               ),               team_logo_espn = colDef(                 name = \"\",                 maxWidth = 75,                 sortable = FALSE,                 # render team logos from their image address and increase their size                 style = background_img(height = \"200%\", width = \"125%\")               ),               Team = colDef(                 minWidth = 100,                 # merge the \"Record\" column with the \"Team\" column and place it below                 cell = merge_column(., \"Record\", merged_position = \"below\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               Record = colDef(show = FALSE)               )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"conditionally-style-the-playoffs-column","dir":"Articles","previous_headings":"","what":"Conditionally style the playoffs column","title":"Building the NFL Standings Table","text":"playoffs column, can use pill_buttons() formatter conditionally assign color red teams make playoffs color green teams make playoffs. method use creating new column within dataset called “playoff_cols” uses {dplyr}’s case_when() conditionally assign colors. column created, can reference column within pill_buttons() listing name column color_ref. opacity colors can adjusted providing value 0 1 value 0 fully transparent value 1 fully opaque. Note: since added new column, “playoff_cols”, dataset, appear table unless hide show = FALSE.","code":"data %>%   mutate(     playoff_cols = case_when(Playoffs == \"Yes\" ~ \"darkgreen\",                              TRUE ~ \"red\")   ) %>%   reactable(.,             theme = fivethirtyeight(centered = TRUE, header_font_size = 11),             defaultSorted = \"Division\",             # add border between groups when sorting by the Division column             rowStyle = group_border_sort(\"Division\"),             columns = list(               Division = colDef(                 name = \"Div.\",                 # hide rows containing duplicate values on sort                  style = group_merge_sort(\"Division\")               ),               team_logo_espn = colDef(                 name = \"\",                 maxWidth = 75,                 sortable = FALSE,                 # render team logos from their image address and increase their size                 style = background_img(height = \"200%\", width = \"125%\")               ),               Team = colDef(                 minWidth = 100,                 # merge the \"Record\" column with the \"Team\" column and place it below                 cell = merge_column(., \"Record\", merged_position = \"below\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               Record = colDef(show = FALSE),               Playoffs = colDef(                 maxWidth = 70,                 align = \"center\",                 cell = pill_buttons(., color_ref = \"playoff_cols\", opacity = 0.7),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               playoff_cols = colDef(show = FALSE)             )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"assign-icons-using-reactablefmtrs-built-in-icon-sets","dir":"Articles","previous_headings":"","what":"Assign icons using {reactablefmtr}’s built-in icon sets","title":"Building the NFL Standings Table","text":"Strength Schedule (SOS) column, four levels difficulty. assign unique icon level difficulty, can use built-icon sets within icon_sets() work us. icon set ’ll use “ski rating” set based ski trail rating difficulties. multiple ways position icons within cell. use icon position “”, hides numbers within column displays icons . Note: alignment icons within column can controlled setting align either “left”, “right”, “center”.","code":"data %>%   mutate(     playoff_cols = case_when(Playoffs == \"Yes\" ~ \"darkgreen\",                              TRUE ~ \"red\")   ) %>%   reactable(.,             theme = fivethirtyeight(centered = TRUE, header_font_size = 11),             defaultSorted = \"Division\",             # add border between groups when sorting by the Division column             rowStyle = group_border_sort(\"Division\"),             columns = list(               Division = colDef(                 name = \"Div.\",                 # hide rows containing duplicate values on sort                  style = group_merge_sort(\"Division\")               ),               team_logo_espn = colDef(                 name = \"\",                 maxWidth = 75,                 sortable = FALSE,                 # render team logos from their image address and increase their size                 style = background_img(height = \"200%\", width = \"125%\")               ),               Team = colDef(                 minWidth = 100,                 # merge the \"Record\" column with the \"Team\" column and place it below                 cell = merge_column(., \"Record\", merged_position = \"below\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               Record = colDef(show = FALSE),               Playoffs = colDef(                 maxWidth = 70,                 align = \"center\",                 # conditionally assign colors from pre-defined column                 cell = pill_buttons(., color_ref = \"playoff_cols\", opacity = 0.7),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               playoff_cols = colDef(show = FALSE),               SOS = colDef(                 maxWidth = 47,                 align = \"center\",                 # assign built-in icon set to values                 cell = icon_sets(., icon_set = \"ski rating\", icon_position = \"over\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ))   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"add-bar-charts","dir":"Articles","previous_headings":"","what":"Add bar charts","title":"Building the NFL Standings Table","text":"points forward (PF) points (PA) columns, can use data_bars() add bar chart column. many ways style bar charts. using box_shadow create “3-D” effect bars:","code":"data %>%   mutate(     playoff_cols = case_when(Playoffs == \"Yes\" ~ \"darkgreen\",                              TRUE ~ \"red\")   ) %>%   reactable(.,             theme = fivethirtyeight(centered = TRUE, header_font_size = 11),             defaultSorted = \"Division\",             # add border between groups when sorting by the Division column             rowStyle = group_border_sort(\"Division\"),             columns = list(               Division = colDef(                 name = \"Div.\",                 # hide rows containing duplicate values on sort                  style = group_merge_sort(\"Division\")               ),               team_logo_espn = colDef(                 name = \"\",                 maxWidth = 75,                 sortable = FALSE,                 # render team logos from their image address and increase their size                 style = background_img(height = \"200%\", width = \"125%\")               ),               Team = colDef(                 minWidth = 100,                 # merge the \"Record\" column with the \"Team\" column and place it below                 cell = merge_column(., \"Record\", merged_position = \"below\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               Record = colDef(show = FALSE),               Playoffs = colDef(                 maxWidth = 70,                 align = \"center\",                 # conditionally assign colors from pre-defined column                 cell = pill_buttons(., color_ref = \"playoff_cols\", opacity = 0.7),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               playoff_cols = colDef(show = FALSE),               SOS = colDef(                 maxWidth = 47,                 align = \"center\",                 # assign built-in icon set to values                 cell = icon_sets(., icon_set = \"ski rating\", icon_position = \"over\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               PF = colDef(                 maxWidth = 180,                 # add data bars with a shadow                 cell = data_bars(., text_size = 13, box_shadow = TRUE)               ),               PA = colDef(                 maxWidth = 180,                 # add data bars with a shadow                 cell = data_bars(., text_size = 13, box_shadow = TRUE)               ))   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"conditionally-assign-colors-to-text","dir":"Articles","previous_headings":"","what":"Conditionally assign colors to text","title":"Building the NFL Standings Table","text":"Earlier, conditionally assigned colors background pill_buttons() within “Playoffs” column. can use similar approach conditionally assign colors text within pill_buttons() “MoV” column. first need create column color assignments conditionally assigning green color positive MoV values red color negative MoV values. can reference column within text_color_ref pill_buttons(). default background pill_buttons() dark-blue color. Since want show text within column, can completely hide background setting colors = \"transparent decreasing opacity 0 opacity = 0. can also assign “+” sign positive values creating function within number_fmt add “+” sign trim decimal places 1. Note: remember since created new column (“mov_cols”) containing conditional text assignments, appear table unless set show = FALSE.","code":"data %>%   mutate(     mov_cols = case_when(MoV >= 0 ~ \"darkgreen\",                          TRUE ~ \"red\"),     playoff_cols = case_when(Playoffs == \"Yes\" ~ \"darkgreen\",                              TRUE ~ \"red\")   ) %>%   reactable(.,             theme = fivethirtyeight(centered = TRUE, header_font_size = 11),             defaultSorted = \"Division\",             # add border between groups when sorting by the Division column             rowStyle = group_border_sort(\"Division\"),             columns = list(               Division = colDef(                 name = \"Div.\",                 # hide rows containing duplicate values on sort                  style = group_merge_sort(\"Division\")               ),               team_logo_espn = colDef(                 name = \"\",                 maxWidth = 75,                 sortable = FALSE,                 # render team logos from their image address and increase their size                 style = background_img(height = \"200%\", width = \"125%\")               ),               Team = colDef(                 minWidth = 100,                 # merge the \"Record\" column with the \"Team\" column and place it below                 cell = merge_column(., \"Record\", merged_position = \"below\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               Record = colDef(show = FALSE),               Playoffs = colDef(                 maxWidth = 70,                 align = \"center\",                 # conditionally assign colors from pre-defined column                 cell = pill_buttons(., color_ref = \"playoff_cols\", opacity = 0.7),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               playoff_cols = colDef(show = FALSE),               SOS = colDef(                 maxWidth = 47,                 align = \"center\",                 # assign built-in icon set to values                 cell = icon_sets(., icon_set = \"ski rating\", icon_position = \"over\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               PF = colDef(                 maxWidth = 180,                 # add data bars with a shadow                 cell = data_bars(., text_size = 13, box_shadow = TRUE)               ),               PA = colDef(                 maxWidth = 180,                 # add data bars with a shadow                 cell = data_bars(., text_size = 13, box_shadow = TRUE)               ),               MoV = colDef(                 maxWidth = 80,                 # conditionally colored text                 cell = pill_buttons(., number_fmt = function(value) sprintf(\"%+0.1f\", value), colors = \"transparent\", opacity = 0, bold_text = TRUE, text_color_ref = \"mov_cols\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               mov_cols = colDef(show = FALSE)              )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"add-color-tiles","dir":"Articles","previous_headings":"","what":"Add color tiles","title":"Building the NFL Standings Table","text":"final three columns (“OSRS”, “DSRS”, “SRS”), can easily apply color tiles default blue--orange color palette using color_tiles() within cell argument colDef. box_shadow option used create “3-D” effect data_bars() also available within color_tiles() set TRUE . bias option related spacing color palette. default bias value set 1 assigns equal spacing blue--orange colors low--high values. provide number greater 1, space colors higher end shrink color spacing lower end. number less 1 give opposite effect. method determining value bias use look distribution data within column. “OSRS” column, wider range positive values vs negative values, setting bias value number greater 1 may better display distribution data within column since higher values spaced lower values. additional customization options please see color_tiles() tutorial .","code":"table <- data %>%   mutate(     mov_cols = case_when(MoV >= 0 ~ \"darkgreen\",                          TRUE ~ \"red\"),     playoff_cols = case_when(Playoffs == \"Yes\" ~ \"darkgreen\",                              TRUE ~ \"red\")   ) %>%   reactable(.,             theme = fivethirtyeight(centered = TRUE, header_font_size = 11),             defaultSorted = \"Division\",             # add border between groups when sorting by the Division column             rowStyle = group_border_sort(\"Division\"),             columns = list(               Division = colDef(                 name = \"Div.\",                 # hide rows containing duplicate values on sort                  style = group_merge_sort(\"Division\")               ),               team_logo_espn = colDef(                 name = \"\",                 maxWidth = 75,                 sortable = FALSE,                 # render team logos from their image address and increase their size                 style = background_img(height = \"200%\", width = \"125%\")               ),               Team = colDef(                 minWidth = 100,                 # merge the \"Record\" column with the \"Team\" column and place it below                 cell = merge_column(., \"Record\", merged_position = \"below\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               Record = colDef(show = FALSE),               Playoffs = colDef(                 maxWidth = 70,                 align = \"center\",                 # conditionally assign colors from pre-defined column                 cell = pill_buttons(., color_ref = \"playoff_cols\", opacity = 0.7),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               playoff_cols = colDef(show = FALSE),               SOS = colDef(                 maxWidth = 47,                 align = \"center\",                 # assign built-in icon set to values                 cell = icon_sets(., icon_set = \"ski rating\", icon_position = \"over\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               PF = colDef(                 maxWidth = 180,                 # add data bars with a shadow                 cell = data_bars(., text_size = 13, box_shadow = TRUE)               ),               PA = colDef(                 maxWidth = 180,                 # add data bars with a shadow                 cell = data_bars(., text_size = 13, box_shadow = TRUE)               ),               MoV = colDef(                 maxWidth = 80,                 # conditionally colored text                 cell = pill_buttons(., number_fmt = function(value) sprintf(\"%+0.1f\", value), colors = \"transparent\", opacity = 0, bold_text = TRUE, text_color_ref = \"mov_cols\"),                 # add a solid border to the right-hand side of the column                 style = list(borderRight = \"1px solid #777\")               ),               mov_cols = colDef(show = FALSE),               OSRS = colDef(                 maxWidth = 55,                 # add color tiles with a shadow                 cell = color_tiles(., bias = 1.3, box_shadow = TRUE)               ),               DSRS = colDef(                 maxWidth = 55,                 # add color tiles with a shadow                 cell = color_tiles(., bias = 0.6, box_shadow = TRUE)               ),               SRS = colDef(                 maxWidth = 55,                 # add color tiles with a shadow                 cell = color_tiles(., bias = 0.7, box_shadow = TRUE)       )     )   )  table"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"include-a-legend","dir":"Articles","previous_headings":"","what":"Include a legend","title":"Building the NFL Standings Table","text":"Now column table formatted styled, can work adding final touches. first add legend icon set used “SOS” column. makes easier understand icon signifies. need include add_icon_legend() table specify icon set used (ski rating). unique icon set within icon_sets() legend within add_icon_legend(). default, labels next icon already written. wanted change labels show text, specifying four labels within labels option. Alternatively, choose hide text labels next icons setting show_labels FALSE. Easy   Moderate   Difficult    Difficult","code":"table %>%    add_icon_legend(icon_set = \"ski rating\")"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"add-a-title-and-source","dir":"Articles","previous_headings":"","what":"Add a title and source","title":"Building the NFL Standings Table","text":"add title table, can simply include add_title() table title text like display. add source table, can follow similar approach use add_source() instead. multiple style options available add_title() add_source(). title, using margin increase spacing title table, source changed font_size 12. Easy   Moderate   Difficult    Difficult Table created : Kyle Cuilla @kc_analytics {reactablefmtr} •  Data: Pro-Football-Reference.com","code":"table %>%    add_title(\"2021 NFL Standings & Team Ratings\", margin = margin(0, 0, 10, 0)) %>%    add_icon_legend(icon_set = \"ski rating\") %>%    add_source(\"Table created by: Kyle Cuilla @kc_analytics with {reactablefmtr} •  Data: Pro-Football-Reference.com\", font_size = 12)"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/nfl_standings_tutorial.html","id":"finishing-touches","dir":"Articles","previous_headings":"","what":"Finishing touches","title":"Building the NFL Standings Table","text":"finished making edits table via {reactablefmtr}. final touches can add table {reactable}’s options, setting pagination FALSE show entire table output, creating group headers columns columnGroups, adjusting width column get everything fit maxWidth minWidth. additional options available {reactable}, please see {reactable} tutorial. Easy   Moderate   Difficult    Difficult Table created : Kyle Cuilla @kc_analytics {reactablefmtr} •  Data: Pro-Football-Reference.com","code":"# Create table data %>%   mutate(     mov_cols = case_when(MoV >= 0 ~ \"darkgreen\",                          TRUE ~ \"red\"),     playoff_cols = case_when(Playoffs == \"Yes\" ~ \"darkgreen\",                              TRUE ~ \"red\")   ) %>%   reactable(     .,     theme = fivethirtyeight(centered = TRUE, header_font_size = 11),     pagination = FALSE,     showSortIcon = FALSE,     highlight = TRUE,     compact = TRUE,     defaultSorted = \"SRS\",     defaultSortOrder = \"desc\",     columnGroups = list(       colGroup(name = \"Team Rating (SRS)\",                columns = c(\"SRS\", \"OSRS\", \"DSRS\")),       colGroup(name = \"Team Scoring & Margin of Victory\",                columns = c(\"PF\", \"PA\", \"MoV\"))     ),     rowStyle = group_border_sort(\"Division\"),     columns = list(       Division = colDef(         name = \"Div.\",         maxWidth = 85,         style = group_merge_sort(\"Division\")       ),       team_logo_espn = colDef(         name = \"\",         maxWidth = 75,         sortable = FALSE,         style = background_img(height = \"200%\", width = \"125%\")       ),       Team = colDef(         minWidth = 100,         align = \"left\",         cell = merge_column(., \"Record\", merged_position = \"below\"),         style = list(borderRight = \"1px solid #777\")       ),       Record = colDef(show = FALSE),       Playoffs = colDef(         maxWidth = 70,         align = \"center\",         cell = pill_buttons(., color_ref = \"playoff_cols\", opacity = 0.7),         style = list(borderRight = \"1px solid #777\")       ),       playoff_cols = colDef(show = FALSE),       SOS = colDef(         maxWidth = 47,         align = \"center\",         cell = icon_sets(., icon_set = \"ski rating\", icon_position = \"over\"),         style = list(borderRight = \"1px solid #777\")       ),       PF = colDef(         maxWidth = 180,         cell = data_bars(., text_size = 13, box_shadow = TRUE)       ),       PA = colDef(         maxWidth = 180,         cell = data_bars(., text_size = 13, box_shadow = TRUE)       ),       MoV = colDef(         maxWidth = 80,         cell = pill_buttons(., number_fmt = function(value) sprintf(\"%+0.1f\", value), colors = \"transparent\", opacity = 0, bold_text = TRUE, text_color_ref = \"mov_cols\"         ),         style = list(borderRight = \"1px solid #777\")       ),       mov_cols = colDef(show = FALSE),       OSRS = colDef(         maxWidth = 55,         cell = color_tiles(., bias = 1.3, box_shadow = TRUE)       ),       DSRS = colDef(         maxWidth = 55,         cell = color_tiles(., bias = 0.6, box_shadow = TRUE)       ),       SRS = colDef(         maxWidth = 55,         cell = color_tiles(., bias = 0.7, box_shadow = TRUE)       )     )   ) %>%   add_title(\"2021 NFL Standings & Team Ratings\", margin = margin(0, 0, 10, 0)) %>%   add_icon_legend(icon_set = \"ski rating\") %>%   add_source(\"Table created by: Kyle Cuilla @kc_analytics with {reactablefmtr} •  Data: Pro-Football-Reference.com\", font_size = 12)"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Cookbook","text":"high-level overview functions styling customization options available {reactablefmtr}.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"titles-and-sources","dir":"Articles","previous_headings":"","what":"Titles and Sources","title":"Cookbook","text":"title, subtitle, source can added reactable table using add_title(), add_subtitle(), add_source() respectively. several built-formatters available, ability change font size, font color, font style, margin. Authors: Allison Marie Horst, Alison Presmanes Hill, Kristen B Gorman","code":"library(palmerpenguins)  reactable(penguins) %>%    add_title(     title = 'Palmer Penguins'   ) %>%    add_subtitle(     subtitle = 'Palmer Archipelago (Antarctica) penguin data',     font_size = 20,     font_color = '#666666',     margin = reactablefmtr::margin(t=10,r=0,b=15,l=0)   ) %>%    add_source(     source = 'Authors: Allison Marie Horst, Alison Presmanes Hill, and Kristen B Gorman',     font_style = 'italic',     font_weight = 'bold'   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"inserting-images-and-icons","dir":"Articles","previous_headings":"Titles and Sources Palmer Penguins Palmer Archipelago (Antarctica) penguin data","what":"Inserting images and icons","title":"Cookbook","text":"can also parse HTML reactablefmtr::html(). allows ability add images clickable links within title source shown : Authors: Allison Marie Horst, Alison Presmanes Hill, Kristen B Gorman  Artwork @allison_horst Link package: {palmerpenguins}","code":"reactable(penguins) %>%    add_title(     title = reactablefmtr::html(\"Palmer Penguins <img src='https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/man/figures/lter_penguins.png' alt='Palmer Penguins' width='200' height='110'>\")   ) %>%    add_subtitle(     subtitle = 'Palmer Archipelago (Antarctica) penguin data',     font_size = 20,     font_color = '#666666',     margin = reactablefmtr::margin(t=10,r=0,b=15,l=0)   ) %>%    add_source(     source = reactablefmtr::html(\"<i class='fas fa-book'><\/i> Authors: Allison Marie Horst, Alison Presmanes Hill, and Kristen B Gorman <br> <i class='fas fa-palette'><\/i> Artwork by @allison_horst \"),     font_style = 'italic',     font_weight = 'bold'   ) %>%    add_source(     source = html(\"<i class='fas fa-link'><\/i> Link to package: <a href='https://allisonhorst.github.io/palmerpenguins/'>{palmerpenguins}<\/a>\"),     font_style = 'italic',     font_weight = 'bold'   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"themes","dir":"Articles","previous_headings":"","what":"Themes","title":"Cookbook","text":"20 themes available within {reactablefmtr} can applied simply within reactable::theme. additional styling options within theme allows change font color font size body table header, shown NY Times-inspired table: Another important feature within theme ability vertically center values within row. default, {reactable} tables display values towards top cell. center values, include centered = TRUE within theme options:","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"fivethirtyeight","dir":"Articles","previous_headings":"Themes","what":"FiveThirtyEight","title":"Cookbook","text":"","code":"penguins %>%    reactable(theme = fivethirtyeight())"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"new-york-times","dir":"Articles","previous_headings":"Themes","what":"New York Times","title":"Cookbook","text":"","code":"penguins %>%    reactable(theme = nytimes())"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"dark","dir":"Articles","previous_headings":"Themes","what":"Dark","title":"Cookbook","text":"","code":"penguins %>%    reactable(theme = dark())"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"bootsrap-themes","dir":"Articles","previous_headings":"Themes","what":"Bootsrap Themes","title":"Cookbook","text":"","code":"penguins %>%    reactable(theme = superhero())"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"bubble-grids","dir":"Articles","previous_headings":"","what":"Bubble grids","title":"Cookbook","text":"Bubble grid charts can easily created bubble_grid() function:","code":"penguins %>%   group_by(species, sex) %>%   summarize(across(where(is.numeric), mean, na.rm = TRUE)) %>%   select(-year) %>%   reactable(     defaultColDef = colDef(       align = 'center',       cell = bubble_grid(         data = .,         number_fmt = scales::comma       )     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"adjust-size-of-bubbles","dir":"Articles","previous_headings":"Bubble grids","what":"Adjust size of bubbles","title":"Cookbook","text":"Adjust size bubbles using min_value /max_value: Data: USDA, #TidyTuesday Week 2, 2022 Note animation sort disappears bubbles color column. , default, color bubble element set animate sort, set animation = background 1s ease'. still want see sort animation, set animation property ‘1s ease’ shown : ’re interested learning animation options, please see CSS transition property documentation .","code":"# load bee colony stressor dataset from tidy tuesday  stressor <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv')  stressor %>%    filter(year == 2020 & state %in% c('United States','California','Georgia','Texas','Idaho')) %>%   group_by(state, stressor) %>%    summarize(stress_pct = mean(stress_pct, na.rm = TRUE)) %>%    pivot_wider(names_from = stressor, values_from = stress_pct) %>%    select(c(State = state, Diseases = Disesases, Pesticides, `Other pests/parasites`, Other, Unknown)) %>%   reactable(     theme = no_lines(centered = TRUE),     defaultColDef = colDef(align = 'center'),     columns = list(       Diseases = colDef(         cell = bubble_grid(           data = .,           colors = '#084C61',           number_fmt = scales::number,           min_value = 0,           max_value = 15         )       ),        Pesticides = colDef(         cell = bubble_grid(           data = .,           colors = '#DB504A',           number_fmt = scales::number,           min_value = 0,           max_value = 15         )       ),        `Other pests/parasites` = colDef(         cell = bubble_grid(           data = .,           colors = '#E3B505',           number_fmt = scales::number,           min_value = 0,           max_value = 15         )       ),       Other = colDef(         cell = bubble_grid(           data = .,           colors = '#4F6D7A',           number_fmt = scales::number,           min_value = 0,           max_value = 15         )       ),        Unknown = colDef(         cell = bubble_grid(           data = .,           colors = '#56A3A6',           number_fmt = scales::number,           min_value = 0,           max_value = 15         )       )     )   ) %>%    add_title(     title = reactablefmtr::html(\"Bee Colony Health Stressors <img src='https://svgsilh.com/svg/30649.svg' alt='Bee' width='40' height='40'>\"),     margin = reactablefmtr::margin(t=0,r=0,b=3,l=0)     ) %>%    add_subtitle(     subtitle = '% of colonies affected by stressors during 2020',     font_weight = 'normal',     font_size = 20,     margin = reactablefmtr::margin(t=0,r=0,b=6,l=0)     ) %>%    add_source(     source = 'Data: USDA, #TidyTuesday Week 2, 2022',     margin = reactablefmtr::margin(t=7,r=0,b=0,l=0),     font_style = \"italic\"     )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"bubble-squares","dir":"Articles","previous_headings":"Bubble grids","what":"Bubble squares","title":"Cookbook","text":"addition bubble circles, can also create bubble squares setting shape parameter ‘squares’:","code":"penguins %>%   group_by(species, sex) %>%   summarize(across(where(is.numeric), mean, na.rm = TRUE)) %>%   select(-year) %>%   reactable(     theme = no_lines(centered = TRUE),     defaultColDef = colDef(align = 'center'),     columns = list(       bill_length_mm = colDef(         cell = bubble_grid(           data = .,           shape = 'squares',           colors = c('#f2f0f7','#cbc9e2','#9e9ac8','#756bb1','#54278f'),           box_shadow = TRUE,           number_fmt = scales::number_format(accuracy = 0.1),           min_value = 30,           animation = 'all 1s ease'         )       ),       bill_depth_mm = colDef(         cell = bubble_grid(           data = .,           shape = 'squares',           colors = c('#feedde','#fdbe85','#fd8d3c','#e6550d','#a63603'),           box_shadow = TRUE,           number_fmt = scales::number_format(accuracy = 0.1),           min_value = 13,           max_value = 21,           animation = 'all 1s ease'         )       ),       flipper_length_mm = colDef(         cell = bubble_grid(           data = .,           shape = 'squares',           colors = c('#f1eef6','#bdc9e1','#74a9cf','#2b8cbe','#045a8d'),           box_shadow = TRUE,           number_fmt = scales::number_format(accuracy = 0.1),           min_value = 120,           animation = 'all 1s ease'         )       ),       body_mass_g = colDef(         cell = bubble_grid(           data = .,           shape = 'squares',           colors = c('#edf8e9','#bae4b3','#74c476','#31a354','#006d2c'),           opacity = 0.8,           box_shadow = TRUE,           number_fmt = scales::comma,           min_value = 2000,           animation = 'all 1s ease'         )       )     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"bar-charts","dir":"Articles","previous_headings":"","what":"Bar charts","title":"Cookbook","text":"many ways customize appearance bar charts within data_bars():","code":"penguins %>%    group_by(species, island, sex) %>%    summarize(across(where(is.numeric), mean, na.rm = TRUE)) %>%    select(-year) %>%    reactable(     theme = clean(),     pagination = FALSE,     columns = list(       bill_length_mm = colDef(         cell = data_bars(           data = .,           fill_color = viridis::mako(5),           background = '#F1F1F1',           min_value = 35,           max_value = 55,           text_position = 'outside-end',           number_fmt = scales::comma         )       ),       bill_depth_mm = colDef(         cell = data_bars(           data = .,           fill_color = c('#FFF2D9','#FFE1A6','#FFCB66','#FFB627'),           fill_gradient = TRUE,           background = 'transparent',           number_fmt = scales::comma_format(accuracy = 0.1)         )       ),       flipper_length_mm = colDef(         cell = data_bars(           data = .,           fill_color = 'black',           fill_opacity = 0.8,           round_edges = TRUE,           text_position = 'center',           number_fmt = scales::comma         )       ),       body_mass_g = colDef(         cell = data_bars(           data = .,           fill_color = 'white',           background = 'darkgrey',           border_style = 'solid',           border_width = '1px',           border_color = 'forestgreen',           box_shadow = TRUE,           text_position = 'inside-base',           number_fmt = scales::comma         )       )     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"conditional-fill","dir":"Articles","previous_headings":"Bar charts","what":"Conditional fill","title":"Cookbook","text":"Conditionally assign colors bars assigning colors within new column using dplyr::case_when() referencing column used fill bars fill_color_ref:","code":"survey <- data.frame(   response = c('Agree','Disagree','Neutral'),   percentage = c(0.64, 0.29, 0.07) )  survey %>%    mutate(response_colors = case_when(     response == 'Agree' ~ '#127852',     response == 'Disagree' ~ '#C40233',     TRUE ~ '#A5A0A1'   )) %>%    reactable(     theme = clean(centered = TRUE),     columns = list(       response_colors = colDef(show = FALSE),       response = colDef(maxWidth = 110),       percentage = colDef(         align = 'left',         cell = data_bars(           data = .,           fill_color_ref = 'response_colors',           number_fmt = scales::percent,           max_value = 1,           bar_height = 50,           text_size = '1.3em'         )       )     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"fill-by-another-column","dir":"Articles","previous_headings":"Bar charts","what":"Fill by another column","title":"Cookbook","text":"Alternatively, can use fill_by apply bar chart column containing text:","code":"survey %>%   mutate(response_colors = case_when(     response == 'Agree' ~ '#127852',     response == 'Disagree' ~ '#C40233',     TRUE ~ '#8C8687'   ),   response = paste0(response, \" (\", percentage*100, \"%)\")) %>%   reactable(     theme = void(centered = TRUE),     columns = list(       response = colDef(         name = '',         cell = data_bars(           data = .,           fill_by = 'percentage',           fill_color_ref = 'response_colors',           text_position = 'outside-end',           max_value = 1,           bar_height = 50,           text_color_ref = 'response_colors',           text_size = '1.5em',           bold_text = TRUE         )       ),       response_colors = colDef(show = FALSE),       percentage = colDef(show = FALSE)     )   ) %>%   add_title('Survey Responses')"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"add-icons-to-bars","dir":"Articles","previous_headings":"Bar charts","what":"Add icons to bars","title":"Cookbook","text":"like add icon data bars, can providing name icon within icon parameter. Note color icon automatically inherited color data bar unless provided explicity within icon_color parameter.","code":"cars <- mtcars %>%   rownames_to_column(var = 'model') %>%    select(c(model,mpg,hp))   reactable(cars,   theme = nytimes(centered = TRUE),   compact = TRUE,   defaultSortOrder = 'desc',   defaultSorted = 'hp',   pagination = FALSE,   columns = list(     hp = colDef(       minWidth = 150,       cell = data_bars(         data = cars,         text_position = 'none',         box_shadow = TRUE,         round_edges = TRUE,         fill_color = rev(MetBrewer::met.brewer('Troy')),         bias = 1.5,         icon = 'horse-head',         background = 'transparent',         bar_height = 4,         max_value = 400       )     ),     mpg = colDef(       minWidth = 150,       cell = data_bars(         data = cars,         text_position = 'none',         box_shadow = TRUE,         round_edges = TRUE,         fill_color = MetBrewer::met.brewer('VanGogh3'),         bias = 1.5,         icon = 'leaf',         background = 'transparent',         bar_height = 4       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"adding-images-to-bars","dir":"Articles","previous_headings":"Bar charts","what":"Adding images to bars","title":"Cookbook","text":"add external web image data bars, can providing link image within img parameter:","code":"cars <- mtcars %>%   rownames_to_column(var = 'model') %>%   select(c(model,mpg,cyl,drat,wt,hp,qsec)) %>%   mutate(rank = rank(qsec)) %>%   relocate(rank, .before = 'model')  reactable(cars,   theme = nytimes(centered = TRUE, font_color = '#666666'),   compact = TRUE,   defaultSortOrder = 'asc',   defaultSorted = 'qsec',   pagination = FALSE,   showSortIcon = FALSE,   columns = list(     model = colDef(       minWidth = 100,       style = cell_style(         data = cars,         font_color = '#222222',         font_weight = 'bold'       )),     mpg = colDef(maxWidth = 60),     cyl = colDef(maxWidth = 60),     hp = colDef(maxWidth = 60),     drat = colDef(maxWidth = 60),     wt = colDef(maxWidth = 60),     rank = colDef(       maxWidth = 45,       format = colFormat(digits = 0)     ),     qsec = colDef(       name = '1/4 mile time',       align = 'left',       minWidth = 200,       format = colFormat(digits = 0),       cell = data_bars(         data = cars,         fill_color = c('#FAFAFA','#E7E7E7','#D3D3D3','#BFBFBF'),         fill_gradient = TRUE,         bold_text = TRUE,         background = 'transparent',         text_position = 'inside-base',         text_color = '#222222',         number_fmt = scales::number_format(accuracy = 0.1, suffix = 's'),         bar_height = 12,         min_value = 13,         max_value = 25,         img = 'https://www.pngkit.com/png/detail/54-544889_45-top-view-of-car-clipart-images-racecar.png',         img_height = 20,         img_width = 25       )     )   ) ) %>%   add_title(     title = reactablefmtr::html(\"Fastest cars in the mtcars dataset <i class='fas fa-flag-checkered'><\/i>\"),     font_color = 'black',     text_shadow = '1px 1px 2px red',     margin = margin(t=0,r=0,b=5,l=0)   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"display-positive-and-negative-values","dir":"Articles","previous_headings":"Bar charts","what":"Display positive and negative values","title":"Cookbook","text":"Data bars able display positive negative values automatically:","code":"cars <- mtcars %>%   rownames_to_column(var = 'model') %>%    select(c(model,wt,mpg,hp)) %>%    mutate(wt = wt-mean(wt),          mpg = mpg-mean(mpg),          hp = hp-mean(hp))  reactable(cars,   theme = nytimes(centered = TRUE),   compact = TRUE,   defaultSortOrder = 'desc',   defaultSorted = 'mpg',   pagination = FALSE,   columns = list(     wt = colDef(       name = 'WT VS AVG',       minWidth = 150,       align = 'center',       cell = data_bars(         data = cars,         text_position = 'outside-end',         fill_color = viridis::mako(5),         number_fmt = scales::number_format(accuracy = 0.01)       )     ),     hp = colDef(       name = 'HP VS AVG',       minWidth = 150,       align = 'center',       cell = data_bars(         data = cars,         text_position = 'outside-end',         fill_color = c('#C40233','#127852'),         number_fmt = scales::comma       )     ),     mpg = colDef(       name = 'MPG VS AVG',       minWidth = 150,       align = 'center',       cell = data_bars(         data = cars,         text_position = 'none',         box_shadow = TRUE,         fill_color = MetBrewer::met.brewer('VanGogh3'),         number_fmt = scales::comma       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"dot-plots","dir":"Articles","previous_headings":"Bar charts","what":"Dot plots","title":"Cookbook","text":"can create dot plot charts assigning ‘circle’ icon data bars making data bars transparent:","code":"midwest %>%    group_by(state, county) %>%    summarize(perchsd = mean(perchsd/100, na.rm = TRUE),             percollege = mean(percollege/100, na.rm = TRUE)) %>%    filter(state == 'IL') %>%    reactable(   theme = clean(),   defaultSorted = 'county',   defaultPageSize = 25,   paginationType = 'jump',   columns = list(     state = colDef(maxWidth = 80),     county = colDef(maxWidth = 120),     perchsd = colDef(       name = '% with a High School Diploma',       align = 'left',       minWidth = 250,       cell = data_bars(         data = .,         fill_color = '#EEEEEE',         number_fmt = scales::percent,         text_position = 'outside-end',         max_value = 1,         icon = 'circle',         icon_color = 'firebrick',         icon_size = 15,         text_color = 'firebrick',         round_edges = TRUE       )     ),     percollege = colDef(       name = '% with a College Education',       align = 'left',       minWidth = 250,       cell = data_bars(         data = .,         fill_color = '#EEEEEE',         number_fmt = scales::percent,         text_position = 'outside-end',         max_value = 1,         icon = 'circle',         icon_color = '#226ab2',         icon_size = 15,         text_color = '#226ab2',         round_edges = TRUE       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"lollipop-charts","dir":"Articles","previous_headings":"Bar charts","what":"Lollipop charts","title":"Cookbook","text":"can create lollipop charts following similar method used create dot plot charts , adding color data bars reducing height bars:","code":"midwest %>%    group_by(state, county) %>%    summarize(perchsd = mean(perchsd/100, na.rm = TRUE),             percollege = mean(percollege/100, na.rm = TRUE)) %>%    filter(state == 'IL') %>%    reactable(   theme = clean(),   defaultSorted = 'county',   defaultPageSize = 25,   paginationType = 'jump',   columns = list(     state = colDef(maxWidth = 80),     county = colDef(maxWidth = 120),     perchsd = colDef(       name = '% with a High School Diploma',       align = 'left',       minWidth = 250,       cell = data_bars(         data = .,         fill_color = 'firebrick',         background = '#FFFFFF',         bar_height = 7,         number_fmt = scales::percent,         text_position = 'outside-end',         max_value = 1,         icon = 'circle',         icon_color = 'firebrick',         icon_size = 15,         text_color = 'firebrick',         round_edges = TRUE       )     ),     percollege = colDef(       name = '% with a College Education',       align = 'left',       minWidth = 250,       cell = data_bars(         data = .,         fill_color = '#226ab2',         background = '#FFFFFF',         bar_height = 7,         number_fmt = scales::percent,         text_position = 'outside-end',         max_value = 1,         icon = 'circle',         icon_color = '#226ab2',         icon_size = 15,         text_color = '#226ab2',         round_edges = TRUE       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"heatmaps","dir":"Articles","previous_headings":"","what":"Heatmaps","title":"Cookbook","text":"Heatmaps can created using color_scales() function hiding text setting show_text FALSE. Additionally, can set tooltip TRUE can still see values user hovers cell: 6 14 19 26 34 63","code":"sanmarcos_sales <- txhousing %>%    filter(city == 'San Marcos' & year > 2004 & year < 2015) %>%   group_by(year, month) %>%    summarize(sales = mean(sales, na.rm = TRUE)) %>%   mutate(month = month.abb[month]) %>%    pivot_wider(names_from = 'month', values_from = 'sales') %>%    ungroup() %>%    mutate(year = as.character(year),          total = rowSums(across(where(is.numeric))))  sanmarcos_legend <- txhousing %>%    filter(city == 'San Marcos' & year > 2004 & year < 2015) %>%   group_by(year, month) %>%    summarize(sales = mean(sales, na.rm = TRUE)) %>%   mutate(month = month.abb[month])   reactable(   sanmarcos_sales,   pagination = FALSE,   showSortIcon = FALSE,   theme = void(     centered = TRUE,      cell_padding = 0,     header_font_color = 'black',     font_color = 'black'     ),   defaultColDef = colDef(     maxWidth = 50,     align = 'center',     cell = tooltip(),     style = color_scales(       data = sanmarcos_sales,       span = 2:13,       colors = c('#002347','#003366','#003F7D','#FF8E00','#FD7702','#FF5003'),       bias = 1.4,       opacity = 0.9,       show_text = FALSE     )   ),   columns = list(     total = colDef(       maxWidth = 225,       cell = data_bars(         data = sanmarcos_sales,         fill_color = c('#002347','#003366','#003F7D','#FF8E00','#FD7702','#FF5003'),         bias = 1.4,         fill_opacity = 0.9,         background = 'transparent',         bar_height = 40,         text_position = 'center'         ),       style = list(borderLeft = \"2px solid #999999\")     )   ) ) %>%    add_title(     title = html(\"San Marcos Housing Sales <i class='fas fa-home'><\/i>\"),     align = 'center',     margin = reactablefmtr::margin(t=10,r=0,b=2,l=0)   ) %>%    add_subtitle(     subtitle = 'Hover over cells to see values',     font_style = 'italic',     font_color = '#777777',     font_size = 18,     align = 'center',     margin = reactablefmtr::margin(t=0,r=0,b=10,l=0)   ) %>%    add_legend(     data = sanmarcos_legend,     align = 'left',     title = '# of Sales (Jan - Dec)',     col_name = 'sales',     colors = c('#002347','#003366','#003F7D','#FF8E00','#FD7702','#FF5003'),     bias = 1.4,     bins = 6   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"nested-tables","dir":"Articles","previous_headings":"","what":"Nested tables","title":"Cookbook","text":"{reactablefmtr} styling supports nested {reactable} tables expand click:","code":"data <- MASS::Cars93[1:30, c('Type','Make','Model','MPG.city','MPG.highway')]  averages <- data %>%   group_by(Type) %>%   summarize(     MPG.city = mean(MPG.city),     MPG.highway = mean(MPG.highway)   )  reactable(   averages,   theme = clean(centered = TRUE),   columns = list(     Type = colDef(maxWidth = 250),     MPG.city = colDef(       maxWidth = 200,        style = color_scales(         data = data,          colors = viridis::mako(5)),        format = colFormat(digits = 1)),     MPG.highway = colDef(       maxWidth = 200,        cell = data_bars(         data = data,          fill_color = viridis::mako(5),          number_fmt = scales::comma))     ),   onClick = \"expand\",   details = function(index) {     data_sub <- data[data$Type == averages$Type[index], ]     reactable(       data_sub,       theme = clean(centered = TRUE),       columns = list(         Type = colDef(show = FALSE),         Make = colDef(maxWidth = 175),         Model = colDef(maxWidth = 120),         MPG.city = colDef(           maxWidth = 200,            style = color_scales(data, viridis::mako(5)),            format = colFormat(digits = 1)),         MPG.highway = colDef(           maxWidth = 200,            cell = data_bars(data, fill_color = viridis::mako(5), number_fmt = scales::comma))         )     )    } )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"pill-buttons","dir":"Articles","previous_headings":"","what":"Pill buttons","title":"Cookbook","text":"Pill buttons can applied numeric character values. default, single color applied across values, colors can assigned via another column within color_ref parameter:","code":"data <- tribble(   ~name,~date,~location,~units,~amount,~avg_unit,~status,~colors,   'John','2022-03-05','Seattle',40,10000,250,'Approved','lightgreen',   'Jane','2022-04-01','Denver',20,15000,750,'Pending Approval','gold1',   'Luke','2022-03-31','Austin',15,8000,533,'Approved','lightgreen',   'Mary','2022-03-28','New York',25,21000,840,'Cancelled','lightpink',   'Peter','2022-04-05','Miami',10,17000,1700,'Pending Approval','gold1',   'Paul','2022-03-22','Los Angeles',30,12000,400,'Approved','lightgreen'   )  data %>%    reactable(     theme = pff(centered = TRUE),     defaultColDef = colDef(footerStyle = list(fontWeight = \"bold\")),     columns = list(       name = colDef(         minWidth = 175,         footer = 'Total',         cell = merge_column(           data = .,           merged_name = 'location',           merged_position = 'below',           merged_size = 14,           size = 16,           color = '#333333',           spacing = -1         )       ),       date = colDef(         minWidth = 125,         cell = pill_buttons(           data = .,           opacity = 0.8         )       ),       location = colDef(show = FALSE),       units = colDef(footer = function(values) scales::label_number()(sum(values))),       amount = colDef(         cell = function(value) {scales::label_dollar()(value)},         footer = function(values) scales::label_dollar()(sum(values))),       avg_unit = colDef(         name = 'Avg/Unit',          cell = function(value) scales::label_dollar()(value),         footer = function(values) scales::label_dollar()(mean(values))),       status = colDef(         minWidth = 175,         cell = pill_buttons(           data = .,           color_ref = 'colors',           box_shadow = TRUE         )       ),       colors = colDef(show = FALSE)     )   ) %>%    add_title(     title = 'Client Order Summary'   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"color-tiles","dir":"Articles","previous_headings":"","what":"Color tiles","title":"Cookbook","text":"Color tiles provide alternative pill buttons color scales many customization options available.","code":"library(viridis)  penguins %>%   group_by(species, island, sex) %>%   summarize(across(where(is.numeric), mean, na.rm = TRUE)) %>%   mutate(penguin_colors = case_when(     species == 'Adelie' ~ '#F5A24B',     species == 'Chinstrap' ~ '#AF52D5',     species == 'Gentoo' ~ '#4C9B9B',     TRUE ~ 'grey'   )) %>%    select(-c(year,flipper_length_mm)) %>%   reactable(     columns = list(       species = colDef(         cell = color_tiles(           data = .,           color_ref = 'penguin_colors'         )       ),       bill_length_mm = colDef(         cell = color_tiles(           data = .,           number_fmt = scales::comma         )       ),       bill_depth_mm = colDef(         cell = color_tiles(           data = .,           colors = viridis::mako(5),           number_fmt = scales::comma_format(accuracy = 0.1)         )       ),       body_mass_g = colDef(         cell = color_tiles(           data = .,           colors = c('#011936','#465362','#82A3A1','#9FC490','#C0DFA1'),           number_fmt = scales::comma,           opacity = 0.7,           bold_text = TRUE,           box_shadow = TRUE         )       ),       penguin_colors = colDef(show = FALSE)     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"sparklines","dir":"Articles","previous_headings":"","what":"Sparklines","title":"Cookbook","text":"Use react_sparkline() create sparkline charts values stored list:","code":"penguins %>%   group_by(species, island) %>%   na.omit(.) %>%    summarize(across(where(is.numeric), list)) %>%   mutate(penguin_colors = case_when(     species == 'Adelie' ~ '#F5A24B',     species == 'Chinstrap' ~ '#AF52D5',     species == 'Gentoo' ~ '#4C9B9B',     TRUE ~ 'grey'   )) %>%    select(-c(year,body_mass_g,flipper_length_mm)) %>%  reactable(   .,   theme = pff(centered = TRUE),   compact = TRUE,   columns = list(     species = colDef(maxWidth = 90),     island = colDef(maxWidth = 85),     penguin_colors = colDef(show = FALSE),     bill_length_mm = colDef(       cell = react_sparkline(         data = .,         height = 100,         line_width = 1.5,         bandline = 'innerquartiles',         bandline_color = 'forestgreen',         bandline_opacity = 0.6,         labels = c('min','max'),         label_size = '0.9em',         highlight_points = highlight_points(min = 'blue', max = 'red'),         margin = reactablefmtr::margin(t=15,r=2,b=15,l=2),         tooltip_type = 2       )     ),     bill_depth_mm = colDef(       cell = react_sparkline(         data = .,         height = 100,         line_width = 1.5,         bandline = 'innerquartiles',         bandline_color = 'forestgreen',         bandline_opacity = 0.6,         labels = c('min','max'),         label_size = '0.9em',         highlight_points = highlight_points(min = 'blue', max = 'red'),         margin = reactablefmtr::margin(t=15,r=2,b=15,l=2),         tooltip_type = 2       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"sparklines-with-area-shown","dir":"Articles","previous_headings":"Sparklines","what":"Sparklines with area shown","title":"Cookbook","text":"can display area sparklines setting show_area formatter TRUE:","code":"penguins %>%   group_by(species, island) %>%   na.omit(.) %>%    summarize(across(where(is.numeric), list)) %>%   mutate(penguin_colors = case_when(     species == 'Adelie' ~ '#F5A24B',     species == 'Chinstrap' ~ '#AF52D5',     species == 'Gentoo' ~ '#4C9B9B',     TRUE ~ 'grey'   )) %>%    select(-c(year,body_mass_g,flipper_length_mm)) %>%    relocate(island, .before = 'species') %>%  reactable(   .,   theme = dark(centered = TRUE),   compact = TRUE,   columns = list(     species = colDef(       align = 'center',       maxWidth = 100,         cell = pill_buttons(           data = .,           color_ref = 'penguin_colors',           brighten_text = FALSE,           bold_text = TRUE         )     ),     island = colDef(maxWidth = 85),     penguin_colors = colDef(show = FALSE),     bill_length_mm = colDef(       cell = react_sparkline(         data = .,         height = 100,         show_area = TRUE,         area_opacity = 1,         line_color_ref = 'penguin_colors',         labels = 'max',         label_size = '1em',         tooltip_type = 2       )     ),     bill_depth_mm = colDef(       cell = react_sparkline(         data = .,         height = 100,         show_area = TRUE,         area_opacity = 1,         line_color_ref = 'penguin_colors',         labels = 'max',         label_size = '1em',         tooltip_type = 2       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"sparkbars","dir":"Articles","previous_headings":"Sparklines","what":"Sparkbars","title":"Cookbook","text":"Sparkbar charts can also created using react_sparkbar() function. Many options available react_sparkline() also available sparkbars.","code":"penguins %>%   group_by(species) %>%   na.omit(.) %>%    summarize(across(where(is.numeric), list)) %>%   mutate(penguin_colors = case_when(     species == 'Adelie' ~ '#F5A24B',     species == 'Chinstrap' ~ '#AF52D5',     species == 'Gentoo' ~ '#4C9B9B',     TRUE ~ 'grey'   )) %>%    select(-c(year,body_mass_g,bill_depth_mm, bill_length_mm)) %>%  reactable(   .,   theme = dark(centered = TRUE),   compact = TRUE,   columns = list(     species = colDef(       name = 'Species',       align = 'center',       maxWidth = 160,         cell = pill_buttons(           data = .,           color_ref = 'penguin_colors',           text_size = 22,           brighten_text = FALSE,           bold_text = TRUE         )     ),     penguin_colors = colDef(show = FALSE),     flipper_length_mm = colDef(       name = 'Flipper Length (mm)',       align = 'center',       cell = react_sparkbar(         data = .,         height = 160,         fill_color_ref = 'penguin_colors',         statline = 'median',         statline_color = '#FFFFFF',         statline_label_size = '1.1em',         tooltip_type = 2,         margin = reactablefmtr::margin(r = 37)       )     )   ) ) %>%    add_title(     title = 'Palmer Penguins',      background_color = '#252525',      align = 'center',     font_color = '#FFFFFF'     ) %>%    add_subtitle(     subtitle = html(\"<img src='https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/man/figures/lter_penguins.png' alt='Palmer Penguins' width='150' height='100'>\"),      background_color = '#252525',      align = 'center',     font_color = '#FFFFFF'     )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"user-interactivity","dir":"Articles","previous_headings":"","what":"User interactivity","title":"Cookbook","text":"{reactablefmtr} works well linked UI controls via {crosstalk} within Shiny app. 83 76 72 57 40","code":"library(gapminder) library(crosstalk)  population_data <- gapminder %>%   filter(year == 2007) %>%    mutate(continent_cols = case_when(     continent == 'Africa' ~ '#ED5564',     continent == 'Americas' ~ '#FFCE54',     continent == 'Asia' ~ '#A0D568',     continent == 'Europe' ~ '#AC92EB',     continent == 'Oceania' ~ '#4FC1E8',     TRUE ~ 'grey'   )) %>%   select(continent_cols, continent, country, pop, lifeExp)   data <- SharedData$new(population_data)  bscols(   widths = c(4, 8),   list(     filter_checkbox(\"continent\", \"Continent\", data, ~continent, inline = TRUE),     filter_slider(\"lifexp\", \"Life Expectancy\", data, ~lifeExp, round = TRUE, width = \"35%\")   ),   reactable(     data,     # compact = TRUE,     defaultPageSize = 15,     showSortIcon = FALSE,     theme = clean(),     columns = list(       continent = colDef(         name = 'Continent',         maxWidth = 150,         cell = pill_buttons(           data = population_data,           color_ref = 'continent_cols'         )       ),       continent_cols = colDef(show = FALSE),       country = colDef(maxWidth = 225, name = 'Country'),       pop = colDef(         'Population (MM)',         maxWidth = 150,         align = 'left',         cell = function(value) {scales::label_number(scale = 1e-6, big.mark = ',', accuracy = 0.1)(value)}       ),       lifeExp = colDef(         'Life Expectancy (yr)',         maxWidth = 300,         cell = data_bars(           data = population_data,            text_position = 'outside-base',           number_fmt = scales::label_number(accuracy = 0.1),            fill_color = viridis::viridis(5),           animation = 'width 0.4s linear'           )         )     )) %>%     add_title(       title = 'Average Life Expectancy (2007)',       margin = reactablefmtr::margin(t=18,r=0,b=0,l=0)     ) %>%      add_legend(       data = population_data,       title = 'Life Expectancy (years)',       col_name = 'lifeExp',       colors = viridis::viridis(5)     ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"gauge-charts","dir":"Articles","previous_headings":"","what":"Gauge charts","title":"Cookbook","text":"","code":"mtcars %>%   tibble::rownames_to_column(var = 'model') %>%    select(1:8) %>%    slice(6:14) %>%    reactable(     defaultColDef = colDef(       align = 'left',       cell = gauge_chart(         data = .,         number_fmt = scales::comma       )     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"show-min-max-values","dir":"Articles","previous_headings":"Gauge charts","what":"Show min & max values","title":"Cookbook","text":"","code":"mtcars %>%   tibble::rownames_to_column(var = 'model') %>%    select(c(model,mpg,hp)) %>%    reactable(     fullWidth = FALSE,     defaultSorted = 'mpg',     defaultSortOrder = 'desc',     theme = clean(centered = TRUE),     defaultColDef = colDef(align = 'left'),     columns = list(       model = colDef(minWidth = 120),       mpg = colDef(         cell = gauge_chart(           data = .,           fill_color = c('#D7191C','#FDAE61','#FFFFBF','#A6D96A','#1A9641'),           number_fmt = scales::comma,           bold_text = TRUE,           text_size = 18,           show_min_max = TRUE         )       ),       hp = colDef(         cell = gauge_chart(           data = .,           fill_color = 'orange',           background = '#555555',           bold_text = TRUE,           text_size = 18,           show_min_max = TRUE         )       )     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"icon-assign","dir":"Articles","previous_headings":"","what":"Icon assign","title":"Cookbook","text":"Assign icons values using icon_assign() function.","code":"# Created by Lee Olney @leeolney3 # Code: https://github.com/leeolney3/30DayChartChallenge/blob/main/scripts/02_pictogram.R # Table: https://github.com/leeolney3/30DayChartChallenge/blob/main/plots/02_pictogram.png  tribble(   ~\"Birds\",~Mammals,~Amphibians,~Gymnosperms,   13, 26, 41, 41 ) %>%  reactable(   .,   theme=default(header_font_size = 17.5),   defaultColDef = colDef(align = \"left\", maxWidth = 180),    columns = list(     Birds = colDef(maxWidth=150, cell = icon_assign(., icon = \"dove\", icon_size = 25, fill_color = \"#343a40\")),     Mammals = colDef(cell = icon_assign(., icon = \"hippo\", fill_color = \"#343a40\",icon_size = 25)),     Amphibians= colDef(maxWidth=170,cell = icon_assign(., icon = \"frog\", icon_size = 25, fill_color = \"#343a40\")),     Gymnosperms= colDef(maxWidth=135,cell = icon_assign(., icon = \"envira\", icon_size = 25,fill_color = \"#343a40\"))   ) ) %>%   google_font(font_family = \"Dosis\") %>%   add_title(\"Estimated % of threatened species in 2021\", font_size = 21) %>%    add_subtitle(html(\"Threatened spp. as % of extant data sufficient evaluated species by major groups of organisms, according to<br> <b>IUCN Red List version 2021-3<\/b>, where one icon represents 1% of the major group.<br><br>\"), font_weight = \"normal\", font_size = 15) %>%    add_source(html(\"<br>Note: Threatened species are those listed as Critically Endangered (CR), Endangered (EN) or Vulnerable (VU). The number of described and<br>evaluated mammals excludes domesticated species like sheep (Ovis aries ), goats (Capra hircus ), Dromedary (Camelus dromedarius ), etc.<br>#30DayChart Challenge 02 pictogram | Data source: iucnredlist.org\"), font_size = 12)"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"adding-an-icon-legend","dir":"Articles","previous_headings":"Icon assign","what":"Adding an icon legend","title":"Cookbook","text":"custom icon legends available within {reactablefmtr} can used describe icons used table: Bronze  Silver  Gold","code":"cars <- mtcars %>%   rownames_to_column(var = 'model') %>%    select(c(model,cyl,am,hp,qsec)) %>%   mutate(rank = rank(qsec)) %>%    relocate(rank, .before = 'model') %>%    mutate(medals = case_when(     rank <= 3 ~ 'medal',     TRUE ~ ''   ),   medal_colors = case_when(     rank == 1 ~ '#D6AF36',     rank == 2 ~ '#D7D7D7',     rank == 3 ~ '#A77044',     TRUE ~ 'grey'   )) %>%      mutate(transmission = case_when(     am == 0 ~ 'Automatic',     am == 1 ~ 'Manual',     TRUE ~ 'Missing'   )) %>%    select(-am) %>%   select(c(rank,medal_colors,medals,model,transmission,hp,cyl,qsec)) %>%   filter(rank <= 11)  reactable(cars,   theme = nytimes(centered = TRUE, font_color = '#444444'),   compact = TRUE,   defaultSortOrder = 'asc',   defaultSorted = 'qsec',   pagination = FALSE,   showSortIcon = FALSE,   columns = list(     model = colDef(       name = 'MODEL / TRANS.',       maxWidth = 150,       cell = merge_column(         data = cars,         merged_name = 'transmission',         merged_position = 'below',         size = 13,         merged_size = 13       )     ),     cyl = colDef(       maxWidth = 70,        align = 'center',         cell = icon_assign(           cars,           fill_color = 'slategrey',           empty_color = 'lightgrey',           empty_opacity = 0.8,           icon_size = 12           )       ),     hp = colDef(       align = 'center',        maxWidth = 70,         cell = gauge_chart(           data = cars,           size = 1,           fill_color =  rev(MetBrewer::met.brewer('Troy')),            min_value = 50           )         ),     rank = colDef(       maxWidth = 45,       cell = icon_sets(         data = cars,         icon_ref = 'medals',         icon_color_ref = 'medal_colors',         icon_position = 'left',         number_fmt = scales::number_format(accuracy = 1)       )     ),     transmission = colDef(show = FALSE),     medals = colDef(show = FALSE),     medal_colors = colDef(show = FALSE),     qsec = colDef(       name = '1/4 mile time',       align = 'left',       minWidth = 200,       format = colFormat(digits = 0),       cell = data_bars(         data = cars,         fill_color = c('#FAFAFA','#E7E7E7','#D3D3D3','#BFBFBF'),         fill_gradient = TRUE,         bold_text = TRUE,         background = 'transparent',         text_position = 'inside-base',         text_color = '#222222',         number_fmt = scales::number_format(accuracy = 0.1, suffix = 's'),         bar_height = 12,         min_value = 13,         max_value = 17.5,         img = 'https://www.pngkit.com/png/detail/54-544889_45-top-view-of-car-clipart-images-racecar.png',         img_height = 20,         img_width = 25       )     )   ) ) %>%    add_title(     title = html(\"Top 10 Fastest Cars <i class='fas fa-flag-checkered'><\/i>\"),     font_color = 'black',     margin = reactablefmtr::margin(t=0,r=0,b=2,l=0)   ) %>%    add_subtitle(     subtitle = \"Motor Trend Car Road Tests (mtcars data set)\",     font_size = 18,     font_color = '#222222',     margin = reactablefmtr::margin(t=0,r=0,b=4,l=0)   ) %>%    add_icon_legend(     icon_set = 'medals'   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"embed-images","dir":"Articles","previous_headings":"","what":"Embed images","title":"Cookbook","text":"can embed images directly web via background_img() embed_img() functions. embed_img() embeds image foreground cell. background_img() embeds image background cell.","code":"library(nflfastR) library(nflreadr)  nflreadr::load_rosters(2021) %>%    dplyr::filter(position == \"QB\") %>%    filter(full_name %in% c(\"Patrick Mahomes\",\"Tom Brady\",\"Aaron Rodgers\",\"Matthew Stafford\",\"Joe Burrow\",\"Josh Allen\",\"Lamar Jackson\",\"Justin Herbert\")) %>%    left_join(teams_colors_logos, by = c('team' = 'team_abbr')) %>%    select(full_name, headshot_url, team_logo_espn, jersey_number, position, team, height, weight, years_exp, college) %>%    mutate(height = paste0(floor(as.numeric(height)/12), \"'\", (as.numeric(height)/12 - floor(as.numeric(height)/12))*12, \"''\")) %>%   reactable(     theme = fivethirtyeight(centered = TRUE),     defaultColDef = colDef(align = 'center'),     columns = list(       team_logo_espn = colDef(show = FALSE),       full_name = colDef(maxWidth = 200, name = 'Name'),       jersey_number = colDef(name = '#', maxWidth = 50),       position = colDef(name = 'Position'),       college = colDef(name = 'College'),       years_exp = colDef(name = 'Experience'),       height = colDef(name = 'Height'),       headshot_url = colDef(name = '', minWidth = 150,          cell = embed_img(           height = 100,            width = 135         ),         style = background_img(           data = .,            height = '140%',           img_ref = 'team_logo_espn'         )       )     )   )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/reactablefmtr_cookbook.html","id":"data-visualizations","dir":"Articles","previous_headings":"","what":"Data visualizations","title":"Cookbook","text":"using {reactablefmtr}, remember just limited creating tables. hiding table elements, can convert table data visualization like one shown : Data: Trust Public Land | Original Viz: Bloomberg | Re-created Viz: {reactablefmtr}","code":"# read in data parks <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-06-22/parks.csv')  # remove dollar sign and convert to numeric parks_df <- parks %>%    filter(year == 2020) %>%    mutate(spend_per_resident_data = parse_number(spend_per_resident_data)) %>%    select(city, spend_per_resident_data)  # top 10 spend/resident top10 <- parks_df %>%    top_n(10, spend_per_resident_data) %>%    mutate(spenders = 'Top 10 spenders')  # join with bottom 10 spend/resident parks_df %>%    top_n(-10, spend_per_resident_data) %>%    mutate(spenders = 'Bottom 10 spenders') %>%    rbind(top10) %>%    mutate(spender_pal = case_when(     spenders == 'Top 10 spenders' ~ '#feb98d',     spenders == 'Bottom 10 spenders' ~ '#000000'   )) %>%    arrange(desc(spend_per_resident_data)) %>%    reactable(     data = .,     pagination = FALSE,     theme = void(       cell_padding = 1,        header_font_size = 0,        font_color = '#000000',        font_size = 15,       centered = TRUE       ),     columns = list(       spenders = colDef(show = FALSE),       spender_pal = colDef(show = FALSE),       city = colDef(maxWidth = 140, align = 'right'),       spend_per_resident_data = colDef(         cell = data_bars(           data = .,            fill_color_ref = 'spender_pal',            background = 'transparent',           text_position = 'outside-end',           bar_height = 22,           max_value = 450,            number_fmt = scales::number_format(prefix = '$'))         )       )   ) %>%    add_title(     title = 'Park Spending Per Resident',     font_size = 26   ) %>%    add_subtitle(     subtitle = 'Those who spent the most and least out of the 100 most populated cities. The national median is $89 per capita as of 2020.',     font_size = 22,      font_weight = 'normal',     margin = reactablefmtr::margin(t=4,r=0,b=0,l=0)     ) %>%    add_subtitle(     subtitle =      tags$div(htmltools::tagAppendAttributes(shiny::icon('square'), style = 'color: #000000; font-size: 14px'), 'Bottom 10 spenders',              htmltools::tagAppendAttributes(shiny::icon('square'), style = 'color: #feb98d; font-size: 14px'), 'Top 10 spenders'),     font_size = 15,      font_weight = 'normal',     margin = reactablefmtr::margin(t=12,r=0,b=6,l=0)     ) %>%   add_source(     font_size = 15,      source = 'Data: The Trust for Public Land | Original Viz: Bloomberg | Re-created Viz: {reactablefmtr}',     margin = reactablefmtr::margin(t=25,r=0,b=0,l=0)     )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"sparklines","dir":"Articles","previous_headings":"","what":"Sparklines","title":"Getting Started with Sparklines","text":"order use sparkline functions within {reactablefmtr}, one must first download {dataui} package GitHub. installed, users ability create highly customizable interactive sparkline line charts bar charts.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"react_sparkline","dir":"Articles","previous_headings":"","what":"react_sparkline()","title":"Getting Started with Sparklines","text":"start example react_sparkline() using data {palmerpenguins} package. first thing need convert flipper_length_mm column list format: , can call react_sparkline() within cell {reactable}:","code":"# Load packages library(reactablefmtr) library(tidyverse) library(palmerpenguins) df <- penguins %>%   filter(!is.na(sex)) %>%   group_by(species, sex) %>%   summarize(flipper_length = list(flipper_length_mm)) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     flipper_length = colDef(       cell = react_sparkline(df)     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"tooltip-options","dir":"Articles","previous_headings":"","what":"Tooltip options","title":"Getting Started with Sparklines","text":"default, color tooltip matches color corresponding line. However, can change color tooltip tooltip_color: may also increase decrease size tooltip labels tooltip_size: two different tooltips available choose within tooltip_type. 2nd tooltip option recommended show values clearly displaying larger sparklines: may also turn interactive tooltip setting tooltip FALSE:","code":"reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     flipper_length = colDef(       cell = react_sparkline(         df,         tooltip_color = 'red'       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     flipper_length = colDef(       cell = react_sparkline(         df,         tooltip_size = '2em'       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     flipper_length = colDef(       cell = react_sparkline(         df,         height = 80,         tooltip_type = 2       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     flipper_length = colDef(       cell = react_sparkline(         df,         tooltip = FALSE       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"line-appearance-options","dir":"Articles","previous_headings":"","what":"Line appearance options","title":"Getting Started with Sparklines","text":"can change color line line_color width line adjusting line_width: want assign line colors specific groups, can creating columns color assignments calling column name within line_color_ref: Note color tooltip automatically match color line. default, curvature line type “cardinal”, option change “linear” well “monotoneX”, “basis” within line_curve: change height sparklines, can set value within height parameter. default, value 22.","code":"reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     flipper_length = colDef(       cell = react_sparkline(         df,         line_color = \"red\",         line_width = 3       )     )   ) ) # Assign colors to each species of penguins df <- df %>%   mutate(     cols = case_when(       species == \"Adelie\" ~ \"#f5a24b\",       species == \"Chinstrap\" ~ \"#af52d5\",       species == \"Gentoo\" ~ \"#4c9b9b\",       TRUE ~ \"grey\"     )   )  reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         line_color_ref = \"cols\"       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         line_color_ref = \"cols\",         line_curve = \"linear\"       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         line_color_ref = \"cols\",         height = 80,         tooltip_type = 2       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"add-area-beneath-sparkline","dir":"Articles","previous_headings":"","what":"Add area beneath sparkline","title":"Getting Started with Sparklines","text":"setting show_area TRUE, can show filled area beneath line, default, color area automatically inherited line_color. can use “cols” column used earlier conditionally assign colors penguin species color area automatically inherited color assignments: color filled area 90% transparent, able darken colors increasing opacity within area_opacity: Alternatively, can conditionally assign colors just area using area_color_ref.","code":"reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         height = 80,         show_area = TRUE,         tooltip_type = 2       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         height = 80,         show_area = TRUE,         line_color_ref = \"cols\",         tooltip_type = 2       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         height = 80,         show_area = TRUE,         area_opacity = 1,         line_color_ref = \"cols\",         tooltip_type = 2       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         height = 80,         show_area = TRUE,         line_width = 2,         area_color_ref = \"cols\",         tooltip_type = 2       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"add-points-and-labels","dir":"Articles","previous_headings":"","what":"Add points and labels","title":"Getting Started with Sparklines","text":"wanted add points particular data points sparkline, using highlight_points. Within highlight_points, can call helper function, also called highlight_points, assign colors either min, max, first, last, /data points. , assigning color red minimum values sparkline color blue maximum values: may also apply labels directly sparkline specifying values like display labels. label options highlight_points can label either first, last, min, max, values. Note labels option work without highlight_points option:","code":"reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         highlight_points = highlight_points(min = \"red\", max = \"blue\")       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         highlight_points = highlight_points(first = \"green\", last = \"purple\"),         labels = c(\"first\", \"last\")       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"add-a-statline","dir":"Articles","previous_headings":"","what":"Add a statline","title":"Getting Started with Sparklines","text":"may want display summary statistics sparkline series can using statline option. statistical summary options available mean, median, min, max. example adds mean reference line sparklines displays mean value right line: additional options control appearance dotted line label well:","code":"reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       minWidth = 200,       cell = react_sparkline(         df,         height = 80,         statline = \"mean\",         tooltip_type = 2       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         height = 80,         statline = \"mean\",         statline_color = \"orange\",         statline_label_size = \"1.1em\",         tooltip_type = 2       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"add-a-bandline","dir":"Articles","previous_headings":"","what":"Add a bandline","title":"Getting Started with Sparklines","text":"add bandline sparklines, can use bandline option shown . options within bandline “innerquartiles” shows inner-quartile range series, “range” show full range sparkline minimum value maximum value. color opacity bandline can also adjusted shown : may also stack multiple elements together, showing bandline mean statline:","code":"reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         height = 80,         line_width = 1,         line_color_ref = \"cols\",         bandline = \"innerquartiles\",         tooltip_type = 2       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         height = 80,         line_color_ref = \"cols\",         bandline = \"innerquartiles\",         bandline_color = \"green\",         bandline_opacity = 0.4,         tooltip_type = 2       )     )   ) ) reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkline(         df,         height = 80,         line_color_ref = \"cols\",         highlight_points = highlight_points(min = \"red\", max = \"blue\"),         labels = c(\"min\", \"max\"),         statline = \"mean\",         bandline = \"innerquartiles\",         tooltip_type = 2       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"react_sparkbar","dir":"Articles","previous_headings":"","what":"react_sparkbar()","title":"Getting Started with Sparklines","text":"display sparkline chart bar chart rather line chart, can use react_sparkbar():","code":"reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkbar(df)     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"bar-appearance-options","dir":"Articles","previous_headings":"","what":"Bar appearance options","title":"Getting Started with Sparklines","text":"Many options available within react_sparkline() also available within react_sparkbar() minor differences. example, wanted assign custom colors bars, use fill_color_ref:","code":"reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkbar(         df,         fill_color_ref = \"cols\")     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"add-labels-and-highlight-particular-bars","dir":"Articles","previous_headings":"","what":"Add labels and highlight particular bars","title":"Getting Started with Sparklines","text":"Another difference react_sparkbar want highlight particular data points, use highlight_bars instead highlight_points. options data points highlight (first, last, min, max, ). height bars auto-starts minimum value series. Therefore, assign color minimum value within highlight_bars, unable see unless declare minimum value number less minimum value present dataset. Note: can control minimum maximum value bars min_value max_value, respectively. example labels applied (species sex columns hidden better show labels):","code":"df %>%    filter(species == \"Chinstrap\") %>%  reactable(   .,   columns = list(     species = colDef(show = FALSE),     sex = colDef(show = FALSE),     cols = colDef(show = FALSE),     flipper_length = colDef(       name = \"Chinstrap Penguin Flipper Length (min and max values highlighted)\",       cell = react_sparkbar(         .,         height = 140,         min_value = 150,         max_value = 225,         fill_color = \"#9f9f9f\",         labels = c(\"all\"),         label_size = \"0.8em\",         highlight_bars =  highlight_bars(min = \"red\", max = \"blue\"),         tooltip_type = 2       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/sparklines.html","id":"add-a-statline-and-bandline","dir":"Articles","previous_headings":"","what":"Add a statline and bandline","title":"Getting Started with Sparklines","text":"Just like react_sparkline(), statlines bandlines can layered onto react_sparkbar using options outlined :","code":"reactable(   df,   columns = list(     species = colDef(maxWidth = 90),     sex = colDef(maxWidth = 85),     cols = colDef(show = FALSE),     flipper_length = colDef(       cell = react_sparkbar(         df,         height = 80,         fill_color_ref = \"cols\",         bandline = \"innerquartiles\",         statline = \"mean\",         tooltip_type = 2       )     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/themes.html","id":"bootstrap-themes","dir":"Articles","previous_headings":"","what":"Bootstrap Themes","title":"Table Themes","text":"Within {reactablefmtr} package, twelve different bootstrap-inspired themes can use apply {reactable} table. Many themes available included within {shinythemes} package pair well themes Shiny apps. example, standard reactable table theme applied: “default” theme {reactablefmtr} provides similar appearance. benefit using default() {reactablefmtr} theme additional options available ability center text vertically (text ‘Model’ column now centered): table “slate” theme: can see , apply theme table, just need simply reference theme name included closed brackets end name. reason closed brackets necessary additional optional arguments can apply theme, font size, color. full options optional arguments can change theme: font_size font_color header_font_size header_font_color cell_padding Another popular bootstrap theme, “flatly”: “cosmo” theme: “journal” theme: “cyborg” theme: Additional bootstrap-inspired themes include: cerulean darkly lux minty sandstone spacelab superhero","code":"data <- MASS::Cars93[1:30, c(\"Model\", \"MPG.city\", \"MPG.highway\")]  data %>%   reactable(.,     defaultColDef =       colDef(         cell = data_bars(., fill_color = viridis::mako(5), bar_height = 30)   ) ) data %>%   reactable(.,     theme = default(centered = TRUE),     defaultColDef =       colDef(         cell = data_bars(., fill_color = viridis::mako(5), bar_height = 30)   ) ) data %>%   reactable(.,     theme = slate(),     defaultColDef =       colDef(         cell = data_bars(., fill_color = viridis::mako(5), text_position = \"inside-end\", background = \"transparent\")   ) ) data %>%   reactable(.,     theme = slate(font_size = 18, header_font_size = 20, header_font_color = \"darkorange\", cell_padding = 8),     defaultColDef =       colDef(         cell = data_bars(., fill_color = viridis::mako(5), text_position = \"inside-end\", background = \"transparent\")   ) ) data %>%   reactable(.,     theme = flatly(),     defaultColDef =       colDef(         cell = data_bars(., fill_color = viridis::mako(5), text_position = \"inside-end\")   ) ) data %>%   reactable(.,     theme = cosmo(),     defaultColDef =       colDef(         cell = data_bars(., fill_color = viridis::mako(5), text_position = \"inside-end\")   ) ) data %>%   reactable(.,     theme = journal(),     defaultColDef =       colDef(         cell = data_bars(., fill_color = viridis::mako(5), text_position = \"inside-end\")   ) ) data %>%   reactable(.,     theme = cyborg(),     defaultColDef =       colDef(         cell = data_bars(., fill_color = viridis::mako(5), text_position = \"inside-end\", background = \"transparent\")   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/themes.html","id":"newssports-sites-themes","dir":"Articles","previous_headings":"","what":"News/Sports Sites Themes","title":"Table Themes","text":"addition bootstrap-styled themes, also themes available inspired data tables displayed popular news sports sites.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/articles/themes.html","id":"the-new-york-times-theme","dir":"Articles","previous_headings":"News/Sports Sites Themes","what":"The New York Times Theme","title":"Table Themes","text":"show “nytimes” theme can applied reactable table, going re-create “Outbreak Worst” table Monitoring Coronavirus Outbreak Metro Areas Across U.S. N.Y. Times article. Note: data small sample larger dataset currently match data displayed N.Y. Times article since table updated regularly. addition applying “nytimes” theme table, can also utilize color_ref argument within color_scales() match N.Y. Times assigns colors “Daily Per 100K” column creating column case_when() referencing column name within color_ref color_scales():","code":"nytdata <- data.frame(   Rank = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20),   Area = c(\"Muskegon, Mich.\", \"Klamath Falls, Ore.\", \"Lewiston-Auburn, Me.\", \"Saginaw, Mich.\", \"Ionia, Mich.\", \"Flint, Mich.\", \"Fairbanks, Alaska\", \"Bay City, Mich.\", \"Grand Rapids, Mich.\", \"Pueblo, Colo.\", \"Midland, Mich.\", \"Detroit\", \"Owosso, Mich.\", \"Mount Pleasant, Mich.\", \"Adrian, Mich.\", \"Peoria, Ill.\", \"Battle Creek, Mich.\", \"Holland, Mich.\", \"Monroe, Mich.\", \"Kalamazoo-Portage, Mich.\"),   Population = c(\"173,566\", \"68,238\", \"108,277\", \"190,539\", \"64,697\", \"405,813\", \"96,849\", \"103,126\", \"1.1 mil.\", \"168,424\", \"83,156\", \"4.3 mil.\", \"68,122\", \"69,872\", \"98,451\", \"366,221\", \"134,159\", \"118,081\", \"150,500\", \"340,743\"),   Cases = c(\"1,801\", \"608\", \"857\", \"1,453\", \"489\", \"3,050\", \"718\", \"759\", \"7,661\", \"1,173\", \"561\", \"28,522\", \"437\", \"448\", \"631\", \"2,280\", \"830\", \"716\", \"902\", \"2,013\"),   Daily = c(74.1, 63.6, 56.5, 54.5, 54.0, 53.7, 53.0, 52.6, 50.9, 49.7, 48.2, 47.2, 45.8, 45.8, 45.8, 44.5, 44.2, 43.3, 42.8, 42.2)) nytdata %>%   mutate(     color_assign = case_when(       Daily >= 60 ~ \"#0c2c84\",       Daily >= 50 & Daily < 60 ~ \"#225ea8\",       Daily < 50 ~ \"#1d91c0\",       TRUE ~ \"#ffffff\"       )) %>%   reactable(.,     theme = nytimes(),     pagination = FALSE,     columns = list(       color_assign = colDef(show = FALSE),       Rank = colDef(name = \"\", maxWidth = 40, align = \"left\"),       Area = colDef(name = \"Metro or Micro Area\", maxWidth = 220,         footer = \"Source: N.Y. Times\",         footerStyle = list(color = \"#999999\")),       Population = colDef(align = \"right\", maxWidth = 150),       Cases = colDef(name = \"Recent Cases\", align = \"right\", maxWidth = 150),       Daily = colDef(name = \"Daily Per 100K\", maxWidth = 150,         style = color_scales(., color_ref = \"color_assign\")      )))"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/themes.html","id":"fivethirtyeight-theme","dir":"Articles","previous_headings":"News/Sports Sites Themes","what":"FiveThirtyEight Theme","title":"Table Themes","text":"“fivethirtyeight” theme, going use dataset used within NBA Player Ratings Demo. Note: data inspiration table comes 538’s NBA Raptor Ratings.","code":"### load data from 538 data <- read.csv(file = \"RAPTOR_by_team_19-20.csv\")  reactable(data,   theme = fivethirtyeight(),   ### add column group header   columnGroups = list(     colGroup(name = \"OVERALL RAPTOR\", columns = c(\"OFF\",\"DEF\",\"TOT\"))     ),   showSortIcon = FALSE,   searchable = TRUE,   language = reactableLang(     searchPlaceholder = \"SEARCH FOR A PLAYER...\"),   columns = list(     TEAM_NAME = colDef(show = FALSE),     CONFERENCE = colDef(show = FALSE),     RANK = colDef(maxWidth = 55, name = \"\"),     PLAYER = colDef(maxWidth = 225),     ### add logos using embed_img()     TEAM_LOGO = colDef(       name = \"TEAM\",       maxWidth = 70,       align = \"center\",       cell = embed_img(height = \"25\", width = \"40\")     ),     ### add icons using icon_assign()     MIN = colDef(       maxWidth = 85,       align = \"center\",       cell = icon_assign(         data,         icon = \"stopwatch\",         fill_color = \"#555555\",         buckets = 5       ),       style = list(borderRight = \"1px dashed rgba(0, 0, 0, 0.3)\")     ),     ### add color scales using color_scales()     OFF = colDef(       maxWidth = 60,       cell = function(x)         sprintf(\"%+0.1f\", x),       style = color_scales(data, colors = c(\"#fd84a9\", \"white\", \"#42c2ca\"))     ),     ### add color scales using color_scales()     DEF = colDef(       maxWidth = 60,       cell = function(x)         sprintf(\"%+0.1f\", x),       style = color_scales(data, colors = c(\"#fd84a9\", \"white\", \"#42c2ca\"))     ),     ### add color scales using color_scales()     TOT = colDef(       maxWidth = 60,       cell = function(x)         sprintf(\"%+0.1f\", x),       style = color_scales(data, colors = c(\"#fd84a9\", \"white\", \"#42c2ca\"))     ),     ### add bars using data_bars_pos_neg()     WAR = colDef(       maxWidth = 280,       align = \"center\",       cell = data_bars(         data,         fill_color = c(\"#fd84a9\", \"#fee6ed\", \"#d9f2f4\", \"#42c2ca\"),         number_fmt = scales::number_format(accuracy = 0.1)       ),       style = list(borderLeft = \"1px dashed rgba(0, 0, 0, 0.3)\")     )   ) )"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/themes.html","id":"pro-football-focus-theme","dir":"Articles","previous_headings":"News/Sports Sites Themes","what":"Pro Football Focus Theme","title":"Table Themes","text":"“pff” theme inspired Pro Football Focus, football analytics company. Note: dataset fake come Pro Football Focus.","code":"library(nflfastR)  data <- data.frame(   Name = c(\"Aaron Rodgers\", \"Tom Brady\", \"Josh Allen\", \"Kirk Cousins\", \"Russell Wilson\", \"Kyler Murray\", \"Lamar Jackson\", \"Derek Carr\", \"Patrick Mahomes\", \"Justin Herbert\"),   Team = c(\"GB\", \"TB\", \"BUF\", \"MIN\", \"SEA\", \"ARI\", \"BAL\", \"LV\", \"KC\", \"LAC\"),   POS = c(\"QB\", \"QB\", \"QB\", \"QB\", \"QB\", \"QB\", \"QB\", \"QB\", \"QB\", \"QB\"),   GP = c(16, 16, 15, 16, 16, 16, 14, 16, 12, 10),   Off = c(90.1, 89.9, 78.8, 85.1, 88.8, 83.4, 80.1, 71.9, 87.8, 80.4),   Pass = c(83.4, 80.1, 71.9, 87.8, 80.4, 90.1, 89.9, 78.8, 85.1, 88.8),   Run = c(90.1, 89.9, 78.8, 85.1, 88.8, 83.4, 80.1, 71.9, 87.8, 80.4))  color_set <- c(\"#f7c844\",\"#429460\",\"#2e6d9e\")  data %>%  left_join(teams_colors_logos, by = c('Team' = 'team_abbr')) %>%    select(Name, POS, GP, team_logo_espn, Team, Off, Pass, Run, team_logo_espn) %>%    reactable(.,     pagination = FALSE,     highlight = TRUE,     striped = TRUE,     defaultSorted = \"Off\",     defaultSortOrder = \"desc\",     theme = pff(),     defaultColDef = colDef(align = \"left\"),     columns = list(       Team = colDef(show = FALSE),       team_color = colDef(show = FALSE),       Name = colDef(maxWidth = 280),       POS = colDef(maxWidth = 70),       GP = colDef(maxWidth = 70),       team_logo_espn = colDef(name = \"TEAM\", maxWidth = 100,           cell = embed_img(., label = \"Team\", height = 20, width = 20)),       Off = colDef(align = \"center\", maxWidth = 130, cell = icon_sets(.,            colors = color_set, icons = \"square\")),       Pass = colDef(align = \"center\", maxWidth = 130, cell = icon_sets(.,            colors = color_set, icons = \"square\")),       Run = colDef(align = \"center\", maxWidth = 130, cell = icon_sets(.,            colors = color_set, icons = \"square\")     )))"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/themes.html","id":"espn-theme","dir":"Articles","previous_headings":"News/Sports Sites Themes","what":"ESPN Theme","title":"Table Themes","text":"“espn” theme inspired ESPN. Note: fake dataset used “pff” theme , color_tiles() applied table instead icon_sets().","code":"data %>%  left_join(teams_colors_logos, by = c('Team' = 'team_abbr')) %>%    select(Name, POS, GP, team_logo_espn, Team, Off, Pass, Run, team_logo_espn) %>%    reactable(.,     pagination = FALSE,     highlight = TRUE,     striped = TRUE,     defaultSorted = \"Off\",     defaultSortOrder = \"desc\",     theme = espn(),     defaultColDef = colDef(align = \"left\"),     columns = list(       Team = colDef(show = FALSE),       team_color = colDef(show = FALSE),       Name = colDef(maxWidth = 280),       POS = colDef(maxWidth = 70),       GP = colDef(maxWidth = 70),       team_logo_espn = colDef(name = \"TEAM\", maxWidth = 100,           cell = embed_img(., label = \"Team\", height = 20, width = 20)),       Off = colDef(align = \"center\", maxWidth = 130, cell = color_tiles(., colors = color_set)),       Pass = colDef(align = \"center\", maxWidth = 130, cell = color_tiles(., colors = color_set)),       Run = colDef(align = \"center\", maxWidth = 130, cell = color_tiles(., colors = color_set))     ))"},{"path":"https://kcuilla.github.io/reactablefmtr/articles/themes.html","id":"other-custom-themes","dir":"Articles","previous_headings":"","what":"Other Custom Themes","title":"Table Themes","text":"additional themes created specifically {reactablefmtr} package inspired bootstrap websites. “midnightblue” theme: “void” theme removes elements styling elements table shows table values: “hoverdark” theme appears standard-looking table, user hovers data, turns dark-themed table. additional custom themes include: hoverlight (opposite hoverdark theme) clean default midnight no_lines sunrise","code":"iris %>%   select(Species, everything()) %>%   head(30) %>%   reactable(.,     theme = midnightblue(),     highlight = TRUE,     defaultSorted = \"Petal.Width\",     defaultSortOrder = \"desc\",     defaultColDef = colDef(align = \"center\",        cell = data_bars(.,                        background = \"transparent\",                        text_position = \"inside-end\",                        fill_color = viridis::mako(5))),     columns = list(Species = colDef(maxWidth = 100))) iris %>%   select(everything(), -c(Species)) %>%   head(30) %>%   reactable(.,     theme = void(),     defaultSorted = \"Petal.Width\",     defaultSortOrder = \"desc\",     defaultColDef = colDef(align = \"center\",        cell = data_bars(.,                        background = \"transparent\",                        text_position = \"inside-end\",                        fill_color = viridis::mako(5))),     columns = list(Species = colDef(maxWidth = 100))) iris %>%   select(Species, everything()) %>%   head(30) %>%   reactable(.,     theme = hoverdark(),     highlight = TRUE,     defaultSorted = \"Petal.Width\",     defaultSortOrder = \"desc\",     defaultColDef = colDef(align = \"center\",        cell = data_bars(.,                        background = \"transparent\",                        text_position = \"inside-end\",                        fill_color = viridis::mako(5))),     columns = list(Species = colDef(maxWidth = 100)))"},{"path":"https://kcuilla.github.io/reactablefmtr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Cuilla. Author, maintainer, copyright holder. Greg Lin. Contributor. June Choe. Contributor. Kent Russell. Contributor.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cuilla K (2022). reactablefmtr: Streamlined Table Styling Formatting Reactable. https://kcuilla.github.io/reactablefmtr/, https://github.com/kcuilla/reactablefmtr.","code":"@Manual{,   title = {reactablefmtr: Streamlined Table Styling and Formatting for Reactable},   author = {Kyle Cuilla},   year = {2022},   note = {https://kcuilla.github.io/reactablefmtr/, https://github.com/kcuilla/reactablefmtr}, }"},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"reactablefmtr-","dir":"","previous_headings":"","what":"reactablefmtr","title":"reactablefmtr package","text":"{reactablefmtr} package streamlines enhances styling formatting tables built {reactable} R package. {reactablefmtr} package provides many conditional formatters highly customizable easy use. Conditionally format tables color scales, color tiles, data bars. Assign icons Font Awesome icon assign icon sets. Interactive sparklines highly customizable available line bar format. Custom table themes can easily applied {reactablefmtr} {reactable} table. Embed images directly web table. Save tables static PNG files interactive HTML files. examples, check vignettes. stay date latest upgrades development version, sure follow package news.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"reactablefmtr package","text":"{reactablefmtr} package available CRAN can installed : install development version {reactablefmtr} :","code":"install.packages(\"reactablefmtr\") remotes::install_github(\"kcuilla/reactablefmtr\")"},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"why-reactablefmtr","dir":"","previous_headings":"","what":"Why reactablefmtr?","title":"reactablefmtr package","text":"{reactable} package allows creation interactive data tables R. However, styling tables within {reactable} requires lot code, can difficult many R users (due need understand HTML CSS), scalable. example, current method creating bar charts within {reactable}:  {reactablefmtr} package presents much simpler method creating bar charts data_bars() function. addition needing far less code, also multitude customization options available easily change appearance bar charts, added bonus, bars animate sort!","code":"library(reactable) library(htmltools)  data <- MASS::Cars93[20:49, c(\"Make\", \"MPG.city\", \"MPG.highway\")]  bar_chart <- function(label, width = \"100%\", height = \"16px\", fill = \"#15607A\", background = \"#EEEEEE\") {   bar <- div(style = list(background = fill, width = width, height = height))   chart <- div(style = list(flexGrow = 1, marginLeft = \"8px\", background = background), bar)   div(style = list(display = \"flex\", alignItems = \"center\"), label, chart) }  reactable(   data,   columns = list(     MPG.city = colDef(align = \"left\", cell = function(value) {       width <- paste0(value / max(data$MPG.city) * 100, \"%\")       bar_chart(value, width = width)     }),     MPG.highway = colDef(align = \"left\", cell = function(value) {       width <- paste0(value / max(data$MPG.highway) * 100, \"%\")       bar_chart(value, width = width)     })   ) ) library(reactablefmtr)  reactable(   data,   defaultColDef = colDef(     cell = data_bars(data, text_position = \"outside-base\")   ) )"},{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"data-bars","dir":"","previous_headings":"Examples","what":"Data Bars","title":"reactablefmtr package","text":"Use data_bars() assign horizontal bars row. many ways customize look data_bars(), including alignment bars, position text labels, option add icons images bars. See tutorial customization examples.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"sparklines","dir":"","previous_headings":"Examples","what":"Sparklines","title":"reactablefmtr package","text":"Use react_sparkline() create sparklines react_sparkbar() create sparkline bar charts. sparklines highly customizable interactive. hover data point, value appear. sparklines imported {dataui} package, package need downloaded GitHub order use feature.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"color-scales","dir":"","previous_headings":"Examples","what":"Color Scales","title":"reactablefmtr package","text":"Use color_scales() assign conditional colors cells based relative values. color text cells automatically adjusts based shade cell color, allowing use dark-colored palettes. See tutorial examples.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"bubble-grids","dir":"","previous_headings":"Examples","what":"Bubble Grids","title":"reactablefmtr package","text":"Bubble grid tables can created using bubble_grid(). Bubbles can shown circles squares using shape parameter.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"gauge-charts","dir":"","previous_headings":"Examples","what":"Gauge Charts","title":"reactablefmtr package","text":"Gauge charts aka speedometer charts, can created using gauge_chart(). may choose display min max underneath gauge chart setting show_min_max TRUE:","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"custom-themes","dir":"","previous_headings":"","what":"Custom Themes","title":"reactablefmtr package","text":"Within {reactablefmtr}, 24+ custom table themes. themes include bootstrap themes, themes inspired news/sports sites New York Times, FiveThirtyEight, ESPN, well custom themes can found within {reactablefmtr}. themes can applied easily tables simply referencing theme name. Additional customization options, changing font size, font color, etc. also available. example fivethirtyeight() theme:","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"using-with-crosstalk-or-shiny","dir":"","previous_headings":"","what":"Using with Crosstalk or Shiny","title":"reactablefmtr package","text":"{reactablefmtr} works well linked UI controls via {crosstalk} within Shiny app.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"add-a-title-subtitle-and-source","dir":"","previous_headings":"","what":"Add a Title, Subtitle, and Source","title":"reactablefmtr package","text":"Titles subtitles can easily placed {reactablefmtr} {reactable} table add_title() add_subtitle(). Also option include source table add_source(). Additional customization options changing alignment, font size, font family, font style, font color available within formatter.","code":"reactable(iris[10:29, ]) %>%   add_title(\"This is a title\") %>%    add_subtitle(\"This is a subtitle\") %>%    add_source(\"This is a source\")"},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"create-data-visualizations","dir":"","previous_headings":"","what":"Create Data Visualizations","title":"reactablefmtr package","text":"says {reactablefmtr} can just used make tables? can create data visualizations like one shown . Source code","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"save-static-or-interactive-tables","dir":"","previous_headings":"","what":"Save Static or Interactive Tables","title":"reactablefmtr package","text":"{reactablefmtr} {reactable} tables can saved directly file static PNG image interactive HTML file save_reactable(). Save PNG file: Save HTML file: custom CSS styling applied table within R Markdown document: prefer use pipe:","code":"save_reactable(table_name, \"table.png\") save_reactable(table_name, \"table.html\") save_reactable(\"table_name.Rmd\", \"table.png\") table_name %>% save_reactable(\"table.png\")"},{"path":"https://kcuilla.github.io/reactablefmtr/index.html","id":"acknowledgments--contributions","dir":"","previous_headings":"","what":"Acknowledgments & Contributions","title":"reactablefmtr package","text":"huge thank Greg Lin creating amazing {reactable} package! Without Greg, {reactablefmtr} simply exist! Thank Kent Russell putting together wonderful {dataui} package suggesting integrating code {reactablefmtr} allow interactive sparkline customization reactable tables. Last least, thank contributed development /documentation package! @yjunechoe, @shannonpileggi, @TimTeaFan","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_icon_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an icon legend to a reactable table — add_icon_legend","title":"Add an icon legend to a reactable table — add_icon_legend","text":"Use `add_icon_legend()` place legend reactable table.      legend can used display icon set used within `icon_sets()`.      legend can aligned right left table.      Custom labels can applied upper lower bounds legend.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_icon_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an icon legend to a reactable table — add_icon_legend","text":"","code":"add_icon_legend(   table = NULL,   icon_set = NULL,   show_labels = TRUE,   labels = NULL,   align = \"right\",   title = NULL,   footer = NULL,   margin = NULL )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_icon_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an icon legend to a reactable table — add_icon_legend","text":"table reactable table. icon_set icon set displayed legend. Options \"ski rating\", \"medals\", \"batteries\". Default NULL. show_labels Logical. Show hide labels next legend. Default TRUE. labels Assign label icon specified icon set. Number labels must match number icons icon set. Default NULL. align horizontal alignment legend. Options 'left' 'right'. Default 'right'. title title legend. Default NULL. footer footer legend. Default NULL. margin Use margin() set margin around legend (top, right, bottom, left). Default NULL.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_icon_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an icon legend to a reactable table — add_icon_legend","text":"function adds source reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_icon_legend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an icon legend to a reactable table — add_icon_legend","text":"","code":"if (FALSE) { ## Create the reactable table and then pipe in the legend library(dplyr) data <- iris[10:29, ] table <- reactable(data, columns = list(Petal.Length = colDef( cell = icon_sets(data, icon_set = \"medals\"))))  table %>%   add_icon_legend(icon_set = \"medals\")  ## The legend can be aligned to the left or right of the table table %>%   add_icon_legend(icon_set = \"medals\", align = \"left\")  ## Add custom labels to each icon in the legend table %>%   add_icon_legend(icon_set = \"medals\", labels = c(\"Shortest Length\",\"Avg Length\",\"Longest Length\"))  ## Add a title and footer to the legend table %>%   add_icon_legend(icon_set = \"medals\", title = \"Icon Legend Title\", footer = \"Icon Legend Footer\") }"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a legend to a reactable table — add_legend","title":"Add a legend to a reactable table — add_legend","text":"Use `add_legend()` place legend reactable table.      legend can used display color scale color palette used within table.      Supply name dataset used `data` name column like show legend `col_name`.      default, colors within `colors` default color palette used `color_tiles()` `color_scales()`,      can modified match color palette used column reactable table.      number bins legend can changed number. default, label bins given.      labels bins can formatted `number_fmt` hidden setting `labels` FALSE.      Use `title` place title legend, `footer` place footer legend.      legend can aligned either bottom-left bottom-right table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a legend to a reactable table — add_legend","text":"","code":"add_legend(   table,   data = NULL,   col_name = NULL,   bins = 5,   colors = NULL,   bias = 1,   labels = TRUE,   number_fmt = NULL,   title = NULL,   footer = NULL,   align = \"right\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a legend to a reactable table — add_legend","text":"table reactable table. data Dataset containing least one numeric column. col_name name column containing numeric data within dataset. bins number bins legend. Default 5. colors color palette displayed legend. default, colors shown match default colors used `color_tiles()` v`color_scales()`. bias positive value determines spacing multiple colors. higher value spaces colors higher end lower number. Default 1. labels Logical. Show hide labels next legend. Default TRUE. number_fmt Optionally format numbers using formats scales package. Default NULL. title title legend. Default NULL. footer footer legend. Default NULL. align horizontal alignment legend. Options 'left' 'right'. Default 'right'.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a legend to a reactable table — add_legend","text":"function adds legend reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_legend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a legend to a reactable table — add_legend","text":"","code":"library(magrittr) ## Create the reactable table and then pipe in the legend data <- iris[10:29, ] table <- reactable(data, columns = list(Sepal.Length = colDef( cell = color_tiles(data))))  table %>%   add_legend(data = data,              col_name = \"Sepal.Length\") #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## The legend can be aligned to either the left or right side table %>%   add_legend(data = data,              col_name = \"Sepal.Length\",              align = \"left\") #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Change the number of bins within the legend table %>%   add_legend(data = data,              col_name = \"Sepal.Length\",              bins = 9) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Add a title and footer to the legend table %>%   add_legend(data = data,              col_name = \"Sepal.Length\",              title = \"Sepal Length\",              footer = \"measured in cm\") #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## If custom colors are used in the table, you can assign those to the legend as well table <- reactable(data, columns = list(Sepal.Length = colDef( style = color_scales(data, colors = c(\"red\",\"white\",\"blue\")))))  table %>%   add_legend(data = data,              col_name = \"Sepal.Length\",              colors = c(\"red\",\"white\",\"blue\")) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a source below a reactable table — add_source","title":"Add a source below a reactable table — add_source","text":"Use `add_source()` place source reactable reactablefmtr table.      options present `add_title()` `add_subtitle()` also available `add_source()`.      source can aligned left, right, center align option.      text properties source, font size font style can customized.      background color source can also adjusted well margin around source.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a source below a reactable table — add_source","text":"","code":"add_source(   table = NULL,   source = NULL,   align = \"left\",   font_color = \"#000\",   font_size = 16,   font_style = \"normal\",   font_weight = \"normal\",   text_decoration = NULL,   text_transform = NULL,   letter_spacing = NULL,   word_spacing = NULL,   text_shadow = NULL,   background_color = \"#FFFFFF\",   margin = NULL )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a source below a reactable table — add_source","text":"table reactable table. source string displayed source. align alignment source. Options \"left\", \"right\", \"center\". Default \"left\". font_color Color source text. Default #000. font_size Numeric value representing size font source (px). Default 16. font_style Style source font. Options \"normal\" \"italic\". Default \"normal\". font_weight font weight source. Options \"bold\" \"normal\". Default \"normal\". text_decoration Add underline, overline, line-source. Options \"underline\", \"overline\", \"underline overline\", \"line-\". Default NULL. text_transform Specify capitalize title. Options \"uppercase\", \"lowercase\", \"capitalize\". Default NULL. letter_spacing Numeric value adjusts horizontal spacing letters. number 0 adds spacing letters, number 0 decreases spacing. Default NULL. word_spacing Numeric value adjusts horizontal spacing words. number 0 adds spacing words, number 0 decreases spacing. Default NULL. text_shadow Apply shadow around title. See <https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow> options. Default NULL. background_color Color source background. Default #FFFFFF. margin Use margin() set margin around text (top, right, bottom, left). Default NULL.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a source below a reactable table — add_source","text":"function adds source reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a source below a reactable table — add_source","text":"","code":"if (FALSE) { ## Create the reactable table and then pipe in the source table <- reactable(iris[10:29, ])  table %>%   add_source(\"This is a source\")  ## Use options to adjust the style and position of the source table %>%   add_source(\"This is a source\", font_style = \"italic\", font_color = \"grey\") }"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_subtitle.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a subtitle above a reactable table — add_subtitle","title":"Add a subtitle above a reactable table — add_subtitle","text":"Use `add_subtitle()` place subtitle reactable reactablefmtr table.      options present `add_title()` `add_source()` also available `add_subtitle()`.      subtitle can aligned left, right, center align option.      text properties subtitle, font size font style can customized.      background color subtitle can also adjusted well margin around subtitle.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_subtitle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a subtitle above a reactable table — add_subtitle","text":"","code":"add_subtitle(   table = NULL,   subtitle = NULL,   align = \"left\",   font_color = \"#000\",   font_size = 24,   font_style = \"normal\",   font_weight = \"bold\",   text_decoration = NULL,   text_transform = NULL,   letter_spacing = NULL,   word_spacing = NULL,   text_shadow = NULL,   background_color = \"#FFFFFF\",   margin = NULL )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_subtitle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a subtitle above a reactable table — add_subtitle","text":"table reactable table. subtitle string displayed subtitle. align alignment subtitle. Options \"left\", \"right\", \"center\". Default \"left\". font_color Color subtitle text. Default #000. font_size Numeric value representing size font subtitle (px). Default 24. font_style Style subtitle font. Options \"normal\" \"italic\". Default \"normal\". font_weight font weight subtitle. Options \"bold\" \"normal\". Default \"bold\". text_decoration Add underline, overline, line-subtitle. Options \"underline\", \"overline\", \"underline overline\", \"line-\". Default NULL. text_transform Specify capitalize title. Options \"uppercase\", \"lowercase\", \"capitalize\". Default NULL. letter_spacing Numeric value adjusts horizontal spacing letters. number 0 adds spacing letters, number 0 decreases spacing. Default NULL. word_spacing Numeric value adjusts horizontal spacing words. number 0 adds spacing words, number 0 decreases spacing. Default NULL. text_shadow Apply shadow around title. See <https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow> options. Default NULL. background_color Color subtitle background. Default #FFFFFF. margin Use margin() set margin around text (top, right, bottom, left). Default NULL.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_subtitle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a subtitle above a reactable table — add_subtitle","text":"function adds subtitle reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_subtitle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a subtitle above a reactable table — add_subtitle","text":"","code":"if (FALSE) { ## Create the reactable table and then pipe in the subtitle table <- reactable(iris[10:29, ])  table %>%   add_subtitle(\"This is a subtitle\")  ## If a title proceeds a subtitle, the subtite will be placed below the title table %>%   add_title(\"This is a title\") %>%   add_subtitle(\"This is a subtitle\")  ## Use options to adjust the style and position of the subtitle table %>%   add_subtitle(\"This is a subtitle\", align = \"center\", font_color = \"red\") }"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a title above a reactable table — add_title","title":"Add a title above a reactable table — add_title","text":"Use `add_title()` place title reactable reactablefmtr table.      title can aligned left, right, center align option.      text properties title, font size font style can customized.      background color title can also adjusted well margin around title.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a title above a reactable table — add_title","text":"","code":"add_title(   table = NULL,   title = NULL,   align = \"left\",   font_color = \"#000\",   font_size = 32,   font_style = \"normal\",   font_weight = \"bold\",   text_decoration = NULL,   text_transform = NULL,   letter_spacing = NULL,   word_spacing = NULL,   text_shadow = NULL,   background_color = \"#FFFFFF\",   margin = NULL )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a title above a reactable table — add_title","text":"table reactable table. title string displayed title. align alignment table. Options \"left\", \"right\", \"center\". Default \"left\". font_color Color title text. Default #000. font_size Numeric value representing size font title (px). Default 32. font_style Style title font. Options \"normal\" \"italic\". Default \"normal\". font_weight font weight title. Options \"bold\" \"normal\". Default \"bold\". text_decoration Add underline, overline, line-title. Default NULL. text_transform Specify capitalize title. Options \"uppercase\", \"lowercase\", \"capitalize\". Default NULL. letter_spacing Numeric value adjusts horizontal spacing letters. number 0 adds spacing letters, number 0 decreases spacing. Default NULL. word_spacing Numeric value adjusts horizontal spacing words. number 0 adds spacing words, number 0 decreases spacing. Default NULL. text_shadow Apply shadow around title. See <https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow> options. Default NULL. background_color Color title background. Default #FFFFFF. margin Use margin() set margin around text (top, right, bottom, left). Default NULL.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a title above a reactable table — add_title","text":"function adds title reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/add_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a title above a reactable table — add_title","text":"","code":"if (FALSE) { ## Create the reactable table and then pipe in the title table <- reactable(iris[10:29, ])  table %>%   add_title(\"This is a title\")  ## Use options to adjust the style and position of the title table %>%   add_title(\"This is a title\", align = \"center\", font_color = \"red\") }"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/background_img.html","id":null,"dir":"Reference","previous_headings":"","what":"Embed a background image from web to rows of a reactable table — background_img","title":"Embed a background image from web to rows of a reactable table — background_img","text":"`background_img()` function fills background cell image web.     image must provided http https address.     difference `background_img()` `embed_img()` image `background_img()` takes entire contents cell whereas `embed_img()` .     `background_img()` can used conjunction `embed_img()` image placed behind image `embed_img()`.     `background_img()` also directly accept singular image URL within `img` come column .     Additionally, images can assigned another column providing name column containing img URL's quotes within `img_ref`.     `background_img()` placed within style argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/background_img.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Embed a background image from web to rows of a reactable table — background_img","text":"","code":"background_img(   data,   height = \"100%\",   width = \"100%\",   position = \"center\",   img = NULL,   img_ref = NULL )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/background_img.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Embed a background image from web to rows of a reactable table — background_img","text":"data Dataset containing URL's images height value given height image. Can provide percentage cell height value px. Default height 100 percent. width value given width image. Can provide percentage cell width value px. Default width 100 percent. position alignment image within cell. Options \"center\", \"top\", \"bottom\", \"left\", \"right\". Default \"center\". img Optionally provide direct link image URL. one image can provided using option. Default NULL. img_ref Optionally assign images another column referencing name column quotes. Default NULL.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/background_img.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Embed a background image from web to rows of a reactable table — background_img","text":"function renders background image     column containing valid web link.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/background_img.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Embed a background image from web to rows of a reactable table — background_img","text":"","code":"## If no image links are in the original dataset, you need to assign them like so: library(dplyr) #> Warning: package 'dplyr' was built under R version 4.0.5 #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union data <- iris %>%  mutate(  img = case_when(  Species == \"setosa\" ~  \"https://upload.wikimedia.org/wikipedia/commons/d/d9/Wild_iris_flower_iris_setosa.jpg\",  Species == \"versicolor\" ~  \"https://upload.wikimedia.org/wikipedia/commons/7/7a/Iris_versicolor.jpg\",  Species == \"virginica\" ~  \"https://upload.wikimedia.org/wikipedia/commons/9/9f/Iris_virginica.jpg\",  TRUE ~ \"NA\"))  reactable(data,  columns = list(   img = colDef(style = background_img()))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## By default, images are given a size of 100% to fill the entire cell, ## but you can adjust the size using height and width: reactable(data,  columns = list(   img = colDef(style = background_img(height = \"50%\", width = \"50%\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## An image can be applied directly over an existing column using img: reactable(data,  columns = list(   Species = colDef(   style = background_img(   img = \"https://upload.wikimedia.org/wikipedia/commons/2/26/Colored_flowers_e.jpg\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Conditionally assigned images can be applied directly over an existing column using img_ref: reactable(data,  columns = list(   Species = colDef(style = background_img(data, img_ref = \"img\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/bubble_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a customizable bubble grid chart — bubble_grid","title":"Build a customizable bubble grid chart — bubble_grid","text":"`bubble_grid()` function creates customizable bubble grid chart within reactable table.     size bubbles relation values within column - bigger value, bigger size bubble.     two shapes available bubble grid: circles squares, can specified `shape`.     colors can provided within vector `colors` via another column dataset referencing column name `color_ref`.     one color provided `colors`, colors assigned values low high within palette.     default setting `bubble_grid()`, applies blue--orange color palette bubbles. However, singular color can provided instead desired.     `bubble_grid()` can applied columns containing character data referencing another column numeric values `color_by`.     opacity colors provided can adjusted providing value 0 1 `opacity`.     `text_color` can used change color values displayed within bubbles.     values displayed within dark-colored background, `brighten_text` display values white text visible.     smaller values dark-colored background, values may visible.     like numbers visible, either:     ) setting `brighten_text` FALSE assigning universal color text within `text_color`.     B) leaving `brighten_text` TRUE setting `brighten_text_color` darker color default white color.     user wants assign colors row-wise instead column-wise, set `span` equal TRUE apply across columns.     can provide names columns either column name column position number apply subset columns.     format numbers within bubbles can changed defining format package scales package within `number_fmt`.     `bubble_grid()` needs placed within cell argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/bubble_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a customizable bubble grid chart — bubble_grid","text":"","code":"bubble_grid(   data,   shape = \"circles\",   colors = c(\"#15607A\", \"#FFFFFF\", \"#FA8C00\"),   color_ref = NULL,   color_by = NULL,   min_value = NULL,   max_value = NULL,   opacity = 1,   bias = 1,   number_fmt = NULL,   text_size = NULL,   text_color = \"black\",   text_color_ref = NULL,   show_text = TRUE,   brighten_text = TRUE,   brighten_text_color = \"white\",   bold_text = FALSE,   span = FALSE,   box_shadow = FALSE,   tooltip = FALSE,   animation = \"background 1s ease\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/bubble_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a customizable bubble grid chart — bubble_grid","text":"data Dataset containing least one numeric column. shape shape bubbles. Options 'circles' 'squares'. Default 'circles'. colors vector colors color bubbles. Colors given order low values high values. Default colors provided blue-white-orange: c(\"#15607A\", \"#FFFFFF\", \"#FA8C00\"). Can use R's built-colors color packages. color_ref Optionally assign colors another column providing name column containing colors quotes. one color can provided per row. Default NULL. color_by Assign colors column based values another column. column reference must contain numeric data. column colors assigned can either numerical character. Default NULL. min_value value use minimum value size bubbles. Default NULL. max_value value use maximum value size bubbles. default maximum value maximum value column. Default NULL. opacity value 0 1 adjusts opacity colors. value 0 fully transparent, value 1 fully opaque. Default 1. bias positive value determines spacing multiple colors. higher value spaces colors higher end lower number. Default 1. number_fmt Optionally format numbers using formats scales package. Default NULL. text_size Numeric value representing size text labels. Default NULL. text_color Assigns text color values. Default black. text_color_ref Optionally assign text color another column providing name column containing text colors quotes. one color can provided per cell. Default NULL. show_text Logical: show text hide text. Default TRUE. brighten_text Logical: automatically assign color text based background color cell. Text within dark-colored backgrounds turn white, text within light-colored backgrounds black. Default TRUE. brighten_text_color Assigns text color values values within dark-colored backgrounds. Default white. bold_text Logical: bold text. Default FALSE. span Optionally apply colors values across multiple columns instead column. apply across columns set TRUE. applying set columns, can provide either column names column positions. Default FALSE. box_shadow Logical: add box shadow tiles. Default FALSE. tooltip Logical: hover tooltip. Default FALSE. animation Control duration timing function animation sorting/updating values shown page. See [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) available timing functions examples. Animation can turned setting \"none\". Animation can applied size bubbles setting \"1s ease\". Default \"background 1s ease\".","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/bubble_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a customizable bubble grid chart — bubble_grid","text":"function builds bubble grid chart     column values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/bubble_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a customizable bubble grid chart — bubble_grid","text":"","code":"data <- iris[10:29, ]  ## By default, the bubble_grid() function uses a blue-white-orange three-color pattern: reactable(   data,   columns = list(     Petal.Length = colDef(       align = \"center\",       cell = bubble_grid(data)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## You can specify your own color palette or a single color across all values with `colors`; reactable(   data,   columns = list(     Petal.Length = colDef(       align = \"center\",       cell = bubble_grid(data,                          colors = c(\"orange\"))))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Use squares instead of circles: reactable(   data,   columns = list(     Petal.Length = colDef(       align = \"center\",       cell = bubble_grid(data,                          shape = \"squares\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Hide text and show on hover by enabling the tooltip: reactable(   data,   columns = list(     Petal.Length = colDef(       align = \"center\",       cell = bubble_grid(data,                          show_text = FALSE,                          tooltip = TRUE)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Control the scale of the circles by adjusting the min and max values: reactable(   data,   columns = list(     Petal.Length = colDef(       align = \"center\",       cell = bubble_grid(data,                          min_value = 1,                          max_value = 2)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Use span to apply bubbles to values in relation to the entire data set: reactable(   data,   defaultColDef = colDef(     cell = bubble_grid(data,                        span = TRUE))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Use number_fmt to format numbers using the scales package: car_prices <- MASS::Cars93[20:49, c(\"Make\", \"Price\")]  reactable(car_prices,   defaultColDef = colDef(     align = \"center\",     cell = bubble_grid(car_prices,                        number_fmt = scales::dollar))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cell_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Add custom styles to cells — cell_style","title":"Add custom styles to cells — cell_style","text":"Use `cell_style()` customize appearance certain cells reactable reactablefmtr table.      Assign custom styles either row number(s) values within particular column.      font color, font size, font style, font weight can modified.      Borders can also placed around cells customized style, width, color.      default, animation applied cells styled, can turned setting 'none'.      options within `cell_style()` work reactablefmtr formatters (data_bars() color_tiles()),      fully supported used separately, together.      `cell_style()` needs placed within style argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cell_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add custom styles to cells — cell_style","text":"","code":"cell_style(   data,   rows = NULL,   values = NULL,   font_color = NULL,   font_size = NULL,   font_style = \"normal\",   font_weight = \"normal\",   horizontal_align = \"right\",   vertical_align = \"top\",   text_decoration = NULL,   border_width = NULL,   border_style = NULL,   border_color = NULL,   background_color = NULL,   animation = \"1s ease\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cell_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add custom styles to cells — cell_style","text":"data dataset displayed within reactable table. rows Numeric value representing row number apply custom style. Can provide vector rows applying one row. rows provided, styles applied rows/values. values value, either numeric character, present within column. Can provide vector values applying one value. values provided, styles applied rows/values. font_color Color text. font_size Numeric value representing size font text (px). Default 16. font_style Style text font. Options \"normal\" \"italic\". Default \"normal\". font_weight font weight text Options \"normal\", \"bold\", \"bolder\", \"lighter\" value 100 900. Default \"normal\". horizontal_align horizontal alignment text within cell. Options \"left\", \"right\", \"center\". Default \"right\". vertical_align vertical alignment text within cell. Options \"top\", \"bottom\", \"center\". Default \"top\". text_decoration Optionally add underline, overline, line-text Options \"underline\", \"overline\", \"underline overline\", \"line-\". Default NULL. border_width width border around cell. Options \"thin\", \"medium\", \"thick\", numeric value \"2px\". May specified using one, two, three, four values. See [CSS border-width](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width) options. border_style style border around cell. Options \"solid\", \"dashed\", \"dotted\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\", \"none\", \"hidden\". May specified using one, two, three, four values. See [CSS border-style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style) options. border_color color border around cell. May specified using one, two, three, four values. See [CSS border-color](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color) options. background_color Color background cell. animation Control duration timing function animation sorting/updating values shown page. See [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) available timing functions examples. Animation can turned setting \"none\". Default \"1s ease\".","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cell_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add custom styles to cells — cell_style","text":"function adds custom style row rows reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cell_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add custom styles to cells — cell_style","text":"","code":"if (FALSE) { ## Add a dotted blue border around the third row in Sepal.Length data <- iris[10:29, ] reactable(data,          columns = list(            Sepal.Length = colDef(              style = cell_style(data,                                 rows = 3,                                 border_width = \"thick\",                                 border_color = \"blue\",                                 border_style = \"dotted\"))))  ## For all setosa species, highlight cell yellow and assign red font color data <- iris[10:100, ] reactable(data,          columns = list(          Species = colDef(              style = cell_style(data,                                 values = \"setosa\",                                 font_color = \"red\",                                 background_color = \"yellow\")))) }"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cerulean.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme cerulean — cerulean","title":"Theme cerulean — cerulean","text":"Bootstrap-inspired cerulean theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cerulean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme cerulean — cerulean","text":"","code":"cerulean(   font_size = 14,   font_color = \"#141415\",   header_font_size = 15,   header_font_color = \"#cfe9f7\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cerulean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme cerulean — cerulean","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table group headers. Default #141415. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #cfe9f7. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cerulean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme cerulean — cerulean","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cerulean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme cerulean — cerulean","text":"","code":"data <- iris[10:29, ]  ## Standard cerulean theme reactable(data,           theme = cerulean()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = cerulean(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme clean — clean","title":"Theme clean — clean","text":"Simple clean-look theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme clean — clean","text":"","code":"clean(   font_size = 14,   font_color = \"#222222\",   header_font_size = 15,   header_font_color = \"#222222\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme clean — clean","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table. Default #222222. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #222222. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme clean — clean","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme clean — clean","text":"","code":"data <- iris[10:29, ]  ## Standard clean theme reactable(data,           theme = clean()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = clean(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/color_scales.html","id":null,"dir":"Reference","previous_headings":"","what":"Add color scales to cells in a column — color_scales","title":"Add color scales to cells in a column — color_scales","text":"`color_scales()` function conditionally colors cell column depending value relation values particular column.     colors can provided within vector `colors` via another column dataset referencing column name `color_ref`.     opacity colors provided can adjusted providing value 0 1 `opacity`.     `text_color` can used change color values.     values displayed within dark-colored background, `brighten_text` display values white text visible.     color `brighten_text_color` can changed color white desired.     user wants assign colors row-wise instead column-wise, set `span` equal TRUE apply across columns.     can provide names columns either column name column position number apply subset columns.     `color_scales()` placed within style argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/color_scales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add color scales to cells in a column — color_scales","text":"","code":"color_scales(   data,   colors = c(\"#15607A\", \"#FFFFFF\", \"#FA8C00\"),   color_ref = NULL,   color_by = NULL,   opacity = 1,   bias = 1,   text_size = NULL,   text_color = \"black\",   text_color_ref = NULL,   show_text = TRUE,   brighten_text = TRUE,   brighten_text_color = \"white\",   bold_text = FALSE,   span = FALSE,   animation = \"background 1s ease\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/color_scales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add color scales to cells in a column — color_scales","text":"data Dataset containing least one numeric column. colors vector colors color cells. Colors given order low values high values. Default colors provided blue-white-orange: c(\"#15607A\", \"#FFFFFF\", \"#FA8C00\"). Can use R's built-colors color packages. color_ref Assign colors another column contains colors row. one color can provided per row. Default NULL. color_by Assign colors column based values another column. column reference must contain numeric data. column colors assigned can either numerical character. Default NULL. opacity value 0 1 adjusts opacity colors. value 0 fully transparent, value 1 fully opaque. Default 1. bias positive value determines spacing multiple colors. higher value spaces colors higher end lower number. Default 1. text_size Numeric value representing size text labels. Default NULL. text_color Assigns text color values. Default black. text_color_ref Assign text color another column providing name column containing text colors quotes. one color can provided per cell. Default NULL. show_text Logical: show text hide text. Default TRUE. brighten_text Logical: automatically assign color text based background color cell. Text within dark-colored backgrounds turn white, text within light-colored backgrounds black. Default TRUE. brighten_text_color Assigns text color values values within dark-colored backgrounds. Default white. bold_text Logical: bold text. Default FALSE. span Optionally apply colors values across multiple columns instead column. apply across columns set TRUE. applying set columns, can provide either column names column positions. Default set FALSE. animation Control duration timing function animation sorting/updating values shown page. See [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) available timing functions examples. Animation can turned setting \"none\". Default \"background 1s ease\".","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/color_scales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add color scales to cells in a column — color_scales","text":"function applies conditional colors     column numeric values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/color_scales.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add color scales to cells in a column — color_scales","text":"","code":"data <- iris[10:29, ]  ## By default, the colors_scales() function uses a blue-white-orange three-color pattern reactable(data,  columns = list(  Petal.Length = colDef(style = color_scales(data)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## If only two colors are desired, ## you can specify them with colors = 'c(color1, color2)'; reactable(data,  columns = list(  Petal.Length = colDef(style = color_scales(data,  colors = c(\"red\", \"green\"))))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Apply color_scales() across all numeric columns using reactable::defaultColDef reactable(data, defaultColDef = colDef(style = color_scales(data))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Use span to apply colors to values in relation to the entire dataset reactable(data, defaultColDef = colDef(style = color_scales(data, span = TRUE))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Span can take column names reactable(data, defaultColDef = colDef(style = color_scales(data, span = c(\"Sepal.Length\", \"Sepal.Width\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Or it can also take column positions instead reactable(data, defaultColDef = colDef(style = color_scales(data, span = 1:2))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/color_tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Add color tiles to cells in a column — color_tiles","title":"Add color tiles to cells in a column — color_tiles","text":"`color_tiles()` function conditionally colors background cell similarly color_scales().     difference color_tiles() uses round colored tiles around values instead entire background cell.     Another difference color_tiles() allows number formatting number_fmt whereas color_scales() .     colors can provided within vector `colors` via another column dataset referencing column name `color_ref`.     opacity colors provided can adjusted providing value 0 1 `opacity`.     `text_color` can used change color values.     values displayed within dark-colored background, `brighten_text` display values white text visible.     color `brighten_text_color` can changed color white desired.     user wants assign colors row-wise instead column-wise, set `span` equal TRUE apply across columns.     can provide names columns either column name column position number apply subset columns.     `color_tiles()` needs placed within cell argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/color_tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add color tiles to cells in a column — color_tiles","text":"","code":"color_tiles(   data,   colors = c(\"#15607A\", \"#FFFFFF\", \"#FA8C00\"),   color_ref = NULL,   color_by = NULL,   opacity = 1,   bias = 1,   number_fmt = NULL,   text_size = NULL,   text_color = \"black\",   text_color_ref = NULL,   show_text = TRUE,   brighten_text = TRUE,   brighten_text_color = \"white\",   bold_text = FALSE,   span = FALSE,   box_shadow = FALSE,   tooltip = FALSE,   animation = \"background 1s ease\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/color_tiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add color tiles to cells in a column — color_tiles","text":"data Dataset containing least one numeric column. colors vector colors color cells. Colors given order low values high values. Default colors provided blue-white-orange: c(\"#15607A\", \"#FFFFFF\", \"#FA8C00\"). Can use R's built-colors color packages. color_ref Optionally assign colors another column providing name column containing colors quotes. one color can provided per row. Default NULL. color_by Assign colors column based values another column. column reference must contain numeric data. column colors assigned can either numerical character. Default NULL. opacity value 0 1 adjusts opacity colors. value 0 fully transparent, value 1 fully opaque. Default 1. bias positive value determines spacing multiple colors. higher value spaces colors higher end lower number. Default 1. number_fmt Optionally format numbers using formats scales package. Default NULL. text_size Numeric value representing size text labels. Default NULL. text_color Assigns text color values. Default black. text_color_ref Optionally assign text color another column providing name column containing text colors quotes. one color can provided per cell. Default NULL. show_text Logical: show text hide text. Default TRUE. brighten_text Logical: automatically assign color text based background color cell. Text within dark-colored backgrounds turn white, text within light-colored backgrounds black. Default TRUE. brighten_text_color Assigns text color values values within dark-colored backgrounds. Default white. bold_text Logical: bold text. Default FALSE. span Optionally apply colors values across multiple columns instead column. apply across columns set TRUE. applying set columns, can provide either column names column positions. Default FALSE. box_shadow Logical: add box shadow tiles. Default FALSE. tooltip Logical: hover tooltip. Default FALSE. animation Control duration timing function animation sorting/updating values shown page. See [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) available timing functions examples. Animation can turned setting \"none\". Default \"background 1s ease\".","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/color_tiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add color tiles to cells in a column — color_tiles","text":"function applies conditional color tiles     column numeric values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/color_tiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add color tiles to cells in a column — color_tiles","text":"","code":"data <- iris[10:29, ]  ## By default, the colors_tiles() function uses a blue-white-orange three-color pattern reactable(data,  columns = list(  Petal.Length = colDef(cell = color_tiles(data)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## If only two colors are desired, ## you can specify them with colors = 'c(color1, color2)'; reactable(data,  columns = list(  Petal.Length = colDef(cell = color_tiles(data,  colors = c(\"red\", \"green\"))))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Use span to apply colors to values in relation to the entire dataset reactable(data, defaultColDef = colDef(cell = color_tiles(data, span = TRUE))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Span can take column names reactable(data, defaultColDef = colDef(cell = color_tiles(data, span = c(\"Sepal.Length\", \"Sepal.Width\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Or it can also take column positions instead reactable(data, defaultColDef = colDef(cell = color_tiles(data, span = 1:2))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Use number_fmt to format numbers using the scales package car_prices <- MASS::Cars93[20:49, c(\"Make\", \"Price\")]  reactable(car_prices, defaultColDef = colDef(cell = color_tiles(car_prices, number_fmt = scales::dollar))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cosmo.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme cosmo — cosmo","title":"Theme cosmo — cosmo","text":"Bootstrap-inspired cosmo theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cosmo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme cosmo — cosmo","text":"","code":"cosmo(   font_size = 14,   font_color = \"#141415\",   header_font_size = 15,   header_font_color = \"#ffffff\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cosmo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme cosmo — cosmo","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table group headers. Default #141415. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #ffffff. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cosmo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme cosmo — cosmo","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cosmo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme cosmo — cosmo","text":"","code":"data <- iris[10:29, ]  ## Standard cosmo theme reactable(data,           theme = cosmo()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = cosmo(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cyborg.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme cyborg — cyborg","title":"Theme cyborg — cyborg","text":"Bootstrap-inspired cyborg theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cyborg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme cyborg — cyborg","text":"","code":"cyborg(   font_size = 14,   font_color = \"#888888\",   header_font_size = 15,   header_font_color = \"#7b7b7b\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cyborg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme cyborg — cyborg","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table group headers. Default #888888. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #7b7b7b. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cyborg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme cyborg — cyborg","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/cyborg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme cyborg — cyborg","text":"","code":"data <- iris[10:29, ]  ## Standard cyborg theme reactable(data,           theme = cyborg()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = cyborg(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/dark.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme dark — dark","title":"Theme dark — dark","text":"dark table theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/dark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme dark — dark","text":"","code":"dark(   font_size = 15,   font_color = \"#FFFFFF\",   header_font_size = 16,   header_font_color = \"#FFFFFF\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/dark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme dark — dark","text":"font_size Numeric value representing size font within table (px). Default 15. font_color Color font text within table group headers. Default #FFFFFF. header_font_size Numeric value representing size font within table (px). Default 16. header_font_color Color font header text. Default #FFFFFF. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/dark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme dark — dark","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/dark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme dark — dark","text":"","code":"data <- iris[10:29, ]  ## Standard dark theme reactable(data,           theme = dark()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = dark(font_size = 12, font_color = \"red\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/darkly.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme darkly — darkly","title":"Theme darkly — darkly","text":"Bootstrap-inspired darkly theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/darkly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme darkly — darkly","text":"","code":"darkly(   font_size = 14,   font_color = \"#ffffff\",   header_font_size = 15,   header_font_color = \"#afbdcc\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/darkly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme darkly — darkly","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table group headers. Default #ffffff. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #afbdcc. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/darkly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme darkly — darkly","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/darkly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme darkly — darkly","text":"","code":"data <- iris[10:29, ]  ## Standard darkly theme reactable(data,           theme = darkly()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = darkly(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Add horizontal bars to cells in a column — data_bars","title":"Add horizontal bars to cells in a column — data_bars","text":"`data_bars()` function adds horizontal bar row column.     length bars relative value row relation values within column.     maximum width filled bars can adjusted. Ex. displaying percentages,     maximum value column 50     increase maximum fill 100     values bars can displayed inside outside filled bars `text_position` option.     default, values displayed outside-end filled bars.     fill_color fill background bars can adjusted.     adjust fill_color filled bar, use `fill_color`.     one color provided, conditional color palette applied values,     `fill_gradient` set TRUE, left--right gradient fill color applied.     fill colors can also provided via another column dataset referencing column name `fill_color_ref`.     `text_color` can used change color text_position. default, label color black.     values displayed inside bars dark color palette used fill bars,     `brighten_text` display values white text values visible default.     color `brighten_text_color` can changed color white desired.     border around filled bars can controlled via three different border options:     `border_style`, `border_width`, `border_color`.     icon image can added data bars `icon` `img`.     Alternatively, icons images can assigned another column `icon_ref` `img_ref`, similar `fill_color_ref`.     color icons can assigned either `icon_color` (single color) `icon_color_ref` (another column).     size images can adjusted using `img_height` `img_width`.     size icons can adjusted using `icon_size`.     `data_bars()` works columns containing positive negative values.     placed within cell argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add horizontal bars to cells in a column — data_bars","text":"","code":"data_bars(   data,   text_position = \"inside-end\",   fill_color = \"#15607A\",   fill_color_ref = NULL,   fill_by = NULL,   fill_opacity = 1,   fill_gradient = FALSE,   background = \"#EEEEEE\",   number_fmt = NULL,   bias = 1,   min_value = NULL,   max_value = NULL,   align_bars = \"left\",   bar_height = NULL,   force_outside = NULL,   text_color = \"black\",   text_color_ref = NULL,   text_size = NULL,   brighten_text = TRUE,   brighten_text_color = \"white\",   bold_text = FALSE,   border_width = NULL,   border_style = NULL,   border_color = NULL,   icon = NULL,   icon_ref = NULL,   icon_size = 20,   icon_color = NULL,   icon_color_ref = NULL,   img = NULL,   img_ref = NULL,   img_height = 20,   img_width = 20,   box_shadow = FALSE,   round_edges = FALSE,   tooltip = FALSE,   animation = \"width 1s ease\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add horizontal bars to cells in a column — data_bars","text":"data Dataset containing least one numeric column. text_position Choose display text labels relative filled data bars. Text labels can displayed within filled bars (\"inside-end\" \"inside-base\"), outside filled bars (\"outside-end\" \"outside-base\"), within center filled bars (\"center\"), filled bars (\"\"), displayed (\"none\"). Default inside-end. fill_color single color vector fill_color fill data bars. fill_color given order low values high values. Can use R's built-fill_color color packages. Default #15607A. fill_color_ref Optionally assign fill_color another column providing name column containing fill colors quotes. one color can provided per row, therefore work fill_gradient. Default NULL. fill_by Assign data bars column based values another column. column reference must contain numeric data. column colors assigned can either numerical character. Default NULL. fill_opacity value 0 1 adjusts opacity fill_color. value 0 fully transparent, value 1 fully opaque. Default 1. fill_gradient Logical: two colors provided fill_color, colors fill bars converted left--right gradient. Default FALSE. background color background data bars. Default #EEEEEE. number_fmt Optionally format numbers using formats scales package. Default NULL. bias positive value determines spacing multiple colors. higher value spaces colors higher end lower number. Default 1. min_value value use minimum value width filled bars. Default NULL. max_value value use maximum value width filled bars. default maximum value maximum value column. Default NULL. align_bars Display filled bars left--right right--left. Options \"left\" \"right\". Default left. bar_height Numeric height data bars px. Default NULL. force_outside Optionally force range values display text labels outside-end filled bars text_position set either \"inside-end\", \"inside-base\", \"center\". Must provide start stop number range values forced outside-end. Ex. c(0, 100). Default NULL. text_color color text labels. Default black. text_color_ref Optionally assign text color another column providing name column containing text colors quotes. one color can provided per cell. Default NULL. text_size Numeric value representing size text labels. Default NULL. brighten_text Logical: automatically assign color text labels based filled color text labels positioned within filled bars. Text within dark-colored filled bars turn white, text within light-colored bars black. Default TRUE. brighten_text_color Assigns color text labels values within dark-colored filled bar. Default white. bold_text Logical: display text labels bold. Default FALSE. border_width width border around filled data bars Options \"thin\", \"medium\", \"thick\", numeric value units included \"2px\" \"2mm\". May specified using one, two, three, four values. See [CSS border-width](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width) options. Default NULL. border_style style border around filled data bars Options \"solid\", \"dashed\", \"dotted\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\", \"none\", \"hidden\". May specified using one, two, three, four values. See [CSS border-style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style) options. Default NULL. border_color color border around filled data bars May specified using one, two, three, four values. See [CSS border-color](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color) options. Default NULL. icon Assign icon label Font Awesome library (via shiny). icon provided, positioned overlap text data bars. Default NULL. icon_ref Optionally assign icons another column providing name column containing icons quotes. one icon can provided per cell. Default NULL. icon_size value representing size icon px. Default 20. icon_color color icon. color provided, default set color filled bars. Default NULL. icon_color_ref Optionally assign color icons another column providing name column containing icon colors quotes. one color can provided per cell. Default NULL. img Optionally assign image label via valid URL. img_ref Optionally assign images another column providing name column containing image URLs quotes. one image can provided per cell. Default NULL. img_height value height image px. Default 20. img_width value width image px. Default 20. box_shadow Logical: add box shadow bars. Default FALSE. round_edges Logical: round edges around data bars. Default FALSE. tooltip Logical: hover tooltip. Default FALSE. animation Control duration timing function animation sorting/updating values shown page. See [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) available timing functions examples. Animation can turned setting \"none\". Default \"width 1s ease\".","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add horizontal bars to cells in a column — data_bars","text":"function applies data bars     column numeric values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add horizontal bars to cells in a column — data_bars","text":"","code":"data <- MASS::Cars93[20:49, c(\"Make\", \"MPG.city\", \"MPG.highway\")]  ## By default, data bars are aligned left and text_position are placed on the inside end reactable(data,           defaultColDef = colDef(             cell = data_bars(data))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Align the bars to the right reactable(data,           defaultColDef = colDef(             cell = data_bars(data,                              align_bars = \"right\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Move the text labels outside of the filled bars reactable(data,           defaultColDef = colDef(             cell = data_bars(data,                              text_position = \"outside-end\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Apply multiple fill_color to the filled bars reactable(data,           defaultColDef = colDef(             cell = data_bars(data,                              fill_color = c(\"lightblue\",\"royalblue\",\"navy\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Apply a fill_gradient pattern to the filled bars reactable(data,           defaultColDef = colDef(             cell = data_bars(data,                              fill_color = c(\"lightblue\",\"royalblue\",\"navy\"),                              fill_gradient = TRUE,                              text_position = \"outside-end\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Add horizontal gradient bars to rows in a column — data_bars_gradient","title":"Add horizontal gradient bars to rows in a column — data_bars_gradient","text":"`data_bars_gradient()` function depreciated.     new version `data_bars()` can convert colors gradients `gradient = TRUE`.     Please use `data_bars()` instead.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add horizontal gradient bars to rows in a column — data_bars_gradient","text":"","code":"data_bars_gradient(   data,   colors = c(\"#1efffd\", \"#1e20ff\"),   background = \"white\",   number_fmt = NULL )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add horizontal gradient bars to rows in a column — data_bars_gradient","text":"data Dataset containing least one numeric column. colors vector colors least two colors. Colors given order left right shown data bar. Default colors c(\"#1efffd\", \"#1e20ff\"). background Optionally assign color use background cells. Default set white. number_fmt Optionally format numbers using formats scales package. Default set NULL.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add horizontal gradient bars to rows in a column — data_bars_gradient","text":"function applies data bars     column numeric values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add horizontal gradient bars to rows in a column — data_bars_gradient","text":"","code":"data <- MASS::Cars93[20:49, c(\"Make\", \"MPG.city\", \"MPG.highway\")]  ## By default, colors are provided reactable(data, defaultColDef = colDef( align = \"left\", cell = data_bars(data, fill_color = c(\"#1efffd\", \"#1e20ff\"), fill_gradient = TRUE))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars_pos_neg.html","id":null,"dir":"Reference","previous_headings":"","what":"Add horizontal bars to rows in a column containing positive and negative values — data_bars_pos_neg","title":"Add horizontal bars to rows in a column containing positive and negative values — data_bars_pos_neg","text":"`data_bars_pos_neg()` function depreciated.     new version `data_bars()` can handle positive negative values now.     Please use `data_bars()` instead.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars_pos_neg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add horizontal bars to rows in a column containing positive and negative values — data_bars_pos_neg","text":"","code":"data_bars_pos_neg(data, colors = c(\"red\", \"green\"), number_fmt = NULL)"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars_pos_neg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add horizontal bars to rows in a column containing positive and negative values — data_bars_pos_neg","text":"data Dataset containing least one numeric column. colors minimum two colors vector colors. Colors given order negative values positive values. Can use R's built-colors color packages. number_fmt Optionally format numbers using formats scales package. Default set NULL.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars_pos_neg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add horizontal bars to rows in a column containing positive and negative values — data_bars_pos_neg","text":"function applies positive negative data bars     column numeric values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/data_bars_pos_neg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add horizontal bars to rows in a column containing positive and negative values — data_bars_pos_neg","text":"","code":"data <- data.frame( company = sprintf(\"Company%02d\", 1:10), profit_chg = c(0.2, 0.685, 0.917, 0.284, 0.105, -0.701, -0.528, -0.808, -0.957, -0.11))  ## By default, the negative values are assigned a red bar, ## and the positive values are assigned a green bar reactable(data, bordered = TRUE, columns = list(  company = colDef(name = \"Company\",  minWidth = 100),  profit_chg = colDef(    name = \"Change in Profit\",    defaultSortOrder = \"desc\",    align = \"center\",    minWidth = 400,    cell = data_bars(data)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## You can apply a relative color scale to the bars by assigning three or more colors reactable(data, bordered = TRUE, columns = list(   company = colDef(name = \"Company\",   minWidth = 100),   profit_chg = colDef(   name = \"Change in Profit\",   defaultSortOrder = \"desc\",   align = \"center\",   minWidth = 400,   cell = data_bars(data,   fill_color = c(\"#ff3030\", \"#ffffff\", \"#1e90ff\"))))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/default.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme default — default","title":"Theme default — default","text":"Reactable-inspired default theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme default — default","text":"","code":"default(   font_size = 15,   font_color = \"#333333\",   header_font_size = 15,   header_font_color = \"#333333\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme default — default","text":"font_size Numeric value representing size font within table (px). Default 15. font_color Color font text within table group headers. Default #333333. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #333333. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme default — default","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme default — default","text":"","code":"data <- iris[10:29, ]  ## Standard default theme reactable(data,           theme = default()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = default(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/embed_img.html","id":null,"dir":"Reference","previous_headings":"","what":"Embed image from web to cells in a column — embed_img","title":"Embed image from web to cells in a column — embed_img","text":"`embed_img()` function adds images obtained web column within reactable.     placed within cell argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/embed_img.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Embed image from web to cells in a column — embed_img","text":"","code":"embed_img(   data,   height = 24,   width = 24,   horizontal_align = \"center\",   label = NULL,   label_position = \"right\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/embed_img.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Embed image from web to cells in a column — embed_img","text":"data Dataset containing URL's images height value given height image px. Default height 24px. width value given width image px. Default width 24px. horizontal_align horizontal alignment image within cell. Options \"left\", \"right\", \"center\". Default \"center\". label Optionally assign label image another column. Default set NULL label. label_position Position label relative image. Options \"right\", \"left\", \"\", \"\". Default right.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/embed_img.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Embed image from web to cells in a column — embed_img","text":"function renders image     column containing valid web link.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/embed_img.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Embed image from web to cells in a column — embed_img","text":"","code":"## If no image links are in the original dataset, you need to assign them like so: library(dplyr) data <- iris %>%  mutate(  img = case_when(  Species == \"setosa\" ~  \"https://upload.wikimedia.org/wikipedia/commons/d/d9/Wild_iris_flower_iris_setosa.jpg\",  Species == \"versicolor\" ~  \"https://upload.wikimedia.org/wikipedia/commons/7/7a/Iris_versicolor.jpg\",  Species == \"virginica\" ~  \"https://upload.wikimedia.org/wikipedia/commons/9/9f/Iris_virginica.jpg\",  TRUE ~ \"NA\"))  ## Then use embed_img() to display images reactable(data, columns = list(  img = colDef(cell = embed_img()))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## By default, images are given a size of 24px by 24px, ## but you can adjust the size using height and width: reactable(data, columns = list(  img = colDef(cell = embed_img(height = 50, width = 45)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Optionally assign a label to the image from another column reactable(data, columns = list(  img = colDef(cell = embed_img(data, label = \"Species\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/espn.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme espn — espn","title":"Theme espn — espn","text":"ESPN-inspired table theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/espn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme espn — espn","text":"","code":"espn(   font_size = 12,   font_color = \"#6C6D6F\",   header_font_size = 11,   header_font_color = \"#48494a\",   cell_padding = 7,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/espn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme espn — espn","text":"font_size Numeric value representing size font within table (px). Default 12. font_color Color font text within table group headers. Default #6C6D6F. header_font_size Numeric value representing size font within table (px). Default 11. header_font_color Color font header text. Default #48494a. cell_padding Numeric value representing padding size cells (px). Default 7. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/espn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme espn — espn","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/espn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme espn — espn","text":"","code":"data <- iris[10:29, ]  ## Standard espn theme reactable(data,           theme = espn()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = espn(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/fivethirtyeight.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme fivethirtyeight — fivethirtyeight","title":"Theme fivethirtyeight — fivethirtyeight","text":"538-inspired table theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/fivethirtyeight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme fivethirtyeight — fivethirtyeight","text":"","code":"fivethirtyeight(   font_size = 14,   font_color = \"#222222\",   header_font_size = 12,   header_font_color = \"#000000\",   cell_padding = 5,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/fivethirtyeight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme fivethirtyeight — fivethirtyeight","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table group headers. Default #222222. header_font_size Numeric value representing size font within table (px). Default 12. header_font_color Color font header text. Default #000000. cell_padding Numeric value representing padding size cells (px). Default 5. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/fivethirtyeight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme fivethirtyeight — fivethirtyeight","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/fivethirtyeight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme fivethirtyeight — fivethirtyeight","text":"","code":"data <- iris[10:29, ]  ## Standard fivethirtyeight theme reactable(data,           theme = fivethirtyeight()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = fivethirtyeight(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/flatly.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme flatly — flatly","title":"Theme flatly — flatly","text":"Bootstrap-inspired flatly theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/flatly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme flatly — flatly","text":"","code":"flatly(   font_size = 14,   font_color = \"#212529\",   header_font_size = 15,   header_font_color = \"#ffffff\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/flatly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme flatly — flatly","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table group headers. Default #212529. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #ffffff. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/flatly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme flatly — flatly","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/flatly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme flatly — flatly","text":"","code":"data <- iris[10:29, ]  ## Standard flatly theme reactable(data,           theme = flatly()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = flatly(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/gauge_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Display numeric values in a gauge chart — gauge_chart","title":"Display numeric values in a gauge chart — gauge_chart","text":"`gauge_chart()` function displays numeric values column gauge aka speedometer chart.     minimum maximum values present column can added gauge chart setting `show_min_max` TRUE.     default, minimum maximum bounds gauge chart min/max column, can changed `min_value` `max_value`.     format min/max values values shown within gauge chart can changed `number_fmt`.     two sizes available gauge. smaller default size 1 bigger size 2. size can specified within `size`.     Many options available `data_bars()` also available `gauge_chart()`.     different ways color fill gauge.     One way apply either single multiple colors within `fill_color`.     Colors may assigned via another column referenced within `fill_color_ref`.     opacity fill color can controlled `opacity`.     multiple colors used within `fill_color`, bias color normalization can controlled `bias`.     empty fill gauge can colored `background`.     color values within gauge can changed using `text_color`.     can assigned via another column `text_color_ref`.     `gauge_chart()` needs placed within cell argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/gauge_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display numeric values in a gauge chart — gauge_chart","text":"","code":"gauge_chart(   data,   fill_color = \"#15607A\",   background = \"#EEEEEE\",   show_min_max = FALSE,   size = 1,   min_value = NULL,   max_value = NULL,   number_fmt = NULL,   fill_color_ref = NULL,   text_color = \"black\",   bold_text = FALSE,   min_text_color = \"black\",   max_text_color = \"black\",   text_color_ref = NULL,   text_size = NULL,   bias = 1,   opacity = 1,   tooltip = FALSE,   animation = \"transform 1s ease\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/gauge_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display numeric values in a gauge chart — gauge_chart","text":"data Dataset containing least one numeric column. fill_color single color vector fill_color fill gauge. fill_color given order low values high values. Can use R's built-fill_color color packages. Default #15607A. background color background gauge. Default #EEEEEE. show_min_max Show hide min max values gauge. Default FALSE. size Size gauge. Options 1 (small gauge) 2 (large gauge). Default 1. min_value value use minimum value gauge. default minimum value 0. Default NULL. max_value value use maximum value gauge. default maximum value maximum value column. Default NULL. number_fmt Optionally format numbers using formats scales package. Default NULL. fill_color_ref Assign colors fill gauge via another column providing name column containing colors quotes. one color can provided per row. Default NULL. text_color color value shown within gauge. Default black. bold_text Logical: bold text value within gauge. Default FALSE. min_text_color color minimum value shown underneath gauge. Default black. max_text_color color maximum value shown underneath gauge. Default black. text_color_ref Assign color text within gauge via another column providing name column containing text colors quotes. one color can provided per cell. Default NULL. text_size Numeric value representing size value within gauge. Default NULL. bias positive value determines spacing multiple colors. higher value spaces colors higher end lower number. Default 1. opacity value 0 1 adjusts opacity fill_color. value 0 fully transparent, value 1 fully opaque. Default 1. tooltip Logical: hover tooltip. Default FALSE. animation Control duration timing function animation sorting/updating values shown page. See [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) available timing functions examples. Animation can turned setting \"none\". Default \"background 1s ease\".","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/gauge_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display numeric values in a gauge chart — gauge_chart","text":"function displays values column gauge chart.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/gauge_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display numeric values in a gauge chart — gauge_chart","text":"","code":"library(dplyr) data <- iris[45:54, ]  ## Show values within a gauge chart: reactable( data, defaultColDef = colDef( align = \"left\", maxWidth = 150, cell = gauge_chart(data))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Show the min and max below the gauge: reactable( data, defaultColDef = colDef( align = \"left\", maxWidth = 150, cell = gauge_chart(data, show_min_max = TRUE))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Adjust the min and max value of the gauge: reactable( data, defaultColDef = colDef( align = \"left\", maxWidth = 150, cell = gauge_chart(data, show_min_max = TRUE, min_value = 0, max_value = 7))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Increase the size of the gauge chart: reactable( data, defaultColDef = colDef( align = \"left\", maxWidth = 150, cell = gauge_chart(data, size = 2))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Assign multiple colors to create a normalized fill based on value: reactable( data, defaultColDef = colDef( align = \"left\", maxWidth = 150, cell = gauge_chart(data, fill_color = c(\"blue\",\"white\",\"orange\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Conditionally apply colors from another column: data %>% mutate(color_assign = case_when( Species == \"setosa\" ~ \"red\", Species == \"versicolor\" ~ \"forestgreen\", TRUE ~ \"grey\")) %>% reactable( ., defaultColDef = colDef( align = \"left\", maxWidth = 150, cell = gauge_chart(., fill_color_ref = \"color_assign\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Change the color of the empty fill of the gauge: reactable( data, defaultColDef = colDef( align = \"left\", maxWidth = 150, cell = gauge_chart(data, background = \"transparent\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/google_font.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a font from Google Fonts <https://fonts.google.com/> to the table. — google_font","title":"Apply a font from Google Fonts <https://fonts.google.com/> to the table. — google_font","text":"Apply font Google Fonts <https://fonts.google.com/> table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/google_font.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a font from Google Fonts <https://fonts.google.com/> to the table. — google_font","text":"","code":"google_font(   table = NULL,   font_family = \"Poppins\",   font_weight = 400,   font_style = \"normal\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/google_font.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a font from Google Fonts <https://fonts.google.com/> to the table. — google_font","text":"table Null. font_family Color font text within table. Default #222222. font_weight numeric weight font. Must value 100 900. Note: every font Google Fonts font weights available. Please check <https://fonts.google.com/> available weights desired font family. Default 400. font_style Style text font. Options \"normal\" \"italic\". Default \"normal\".","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/google_font.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a font from Google Fonts <https://fonts.google.com/> to the table. — google_font","text":"function applies font reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/google_font.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a font from Google Fonts <https://fonts.google.com/> to the table. — google_font","text":"","code":"if (FALSE) { data <- iris[10:29, ]  ## Default 'Poppins' font from Google Fonts reactable(data) %>% google_font()  ## Apply styles to fonts reactable(data) %>% google_font(\"Roboto Mono\", font_weight = 500, font_style = \"italic\") }"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/group_border_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a styled border beneath rows of specified groups on sort. Must be placed within reactable::rowStyle().\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_border_sort","title":"Add a styled border beneath rows of specified groups on sort. Must be placed within reactable::rowStyle().\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_border_sort","text":"Add styled border beneath rows specified groups sort. Must placed within reactable::rowStyle(). Credit Greg Lin, creator reactable writing JS function.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/group_border_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a styled border beneath rows of specified groups on sort. Must be placed within reactable::rowStyle().\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_border_sort","text":"","code":"group_border_sort(   columns = NULL,   border_width = \"thin\",   border_color = \"#777\",   border_style = \"solid\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/group_border_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a styled border beneath rows of specified groups on sort. Must be placed within reactable::rowStyle().\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_border_sort","text":"columns Name column(s). Can provide four column names. border_width width border. Options \"thin\", \"medium\", \"thick\", numeric value \"2px\". May specified using one, two, three, four values. See [CSS border-width](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width) options. Default 'thin'. border_color color border. May specified using one, two, three, four values. See [CSS border-color](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color) options. Default #777. border_style style border. Options \"solid\", \"dashed\", \"dotted\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\", \"none\", \"hidden\". May specified using one, two, three, four values. See [CSS border-style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style) options. Default 'solid'.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/group_border_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a styled border beneath rows of specified groups on sort. Must be placed within reactable::rowStyle().\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_border_sort","text":"function applies bottom border group column reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/group_border_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a styled border beneath rows of specified groups on sort. Must be placed within reactable::rowStyle().\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_border_sort","text":"","code":"data <- MASS::Cars93[1:20, c(\"Manufacturer\", \"Model\", \"Type\", \"MPG.city\")]  ## Add border beneath each unique group within a column on sort: reactable(data, pagination = FALSE, rowStyle = group_border_sort(\"Manufacturer\") ) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Can specify up to 4 columns: reactable(data, pagination = FALSE, rowStyle = group_border_sort(columns = c(\"Manufacturer\",\"Model\",\"Type\")) ) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Apply styles to the border: reactable(data, pagination = FALSE, rowStyle = group_border_sort(columns = c(\"Manufacturer\",\"Model\",\"Type\"),                              border_color = \"red\",                              border_style = \"dashed\",                              border_width = \"3px\") ) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/group_merge_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Hide rows containing duplicate values on sort. Must be placed within reactable::colDef(style).\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_merge_sort","title":"Hide rows containing duplicate values on sort. Must be placed within reactable::colDef(style).\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_merge_sort","text":"Hide rows containing duplicate values sort. Must placed within reactable::colDef(style). Credit Greg Lin, creator reactable writing JS function.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/group_merge_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hide rows containing duplicate values on sort. Must be placed within reactable::colDef(style).\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_merge_sort","text":"","code":"group_merge_sort(col_name = NULL)"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/group_merge_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hide rows containing duplicate values on sort. Must be placed within reactable::colDef(style).\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_merge_sort","text":"col_name Name column.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/group_merge_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hide rows containing duplicate values on sort. Must be placed within reactable::colDef(style).\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_merge_sort","text":"function hides duplicate values sort reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/group_merge_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hide rows containing duplicate values on sort. Must be placed within reactable::colDef(style).\r\nCredit to Greg Lin, creator of reactable for writing the JS function. — group_merge_sort","text":"","code":"data <- MASS::Cars93[1:20, c(\"Manufacturer\", \"Model\", \"Type\", \"MPG.city\")]  ## Merge unique groups in a column: reactable(data, pagination = FALSE, columns = list(Manufacturer = colDef( style = group_merge_sort(\"Manufacturer\") )) ) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Works with columns containing numeric data as well: reactable(data, pagination = FALSE, columns = list(MPG.city = colDef( style = group_merge_sort(\"MPG.city\") )) ) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Color of highlight used in `react_sparkbar`. — highlight_bars","title":"Color of highlight used in `react_sparkbar`. — highlight_bars","text":"Color highlight used `react_sparkbar`.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color of highlight used in `react_sparkbar`. — highlight_bars","text":"","code":"highlight_bars(   first = \"transparent\",   last = \"transparent\",   min = \"transparent\",   max = \"transparent\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color of highlight used in `react_sparkbar`. — highlight_bars","text":"first, last, min, max colors first, last, min, max bars","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color of highlight used in `react_sparkbar`. — highlight_bars","text":"function provides colors specific bars.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlights the maximum value in a column — highlight_max","title":"Highlights the maximum value in a column — highlight_max","text":"`highlight_max()` function assigns font color /background color maximum value column.     placed within style argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlights the maximum value in a column — highlight_max","text":"","code":"highlight_max(data, font_color = \"green\", highlighter = NULL)"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlights the maximum value in a column — highlight_max","text":"data Dataset containing least one numeric column. font_color color assign maximum value column. Default color green. highlighter color assign background cell containing maximum value column.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highlights the maximum value in a column — highlight_max","text":"function applies color     maximum value column numeric values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlights the maximum value in a column — highlight_max","text":"","code":"data <- MASS::road[11:17, ]  ## By default, the maximum value is bold with a green font color reactable(data, defaultColDef = colDef(     style = highlight_max(data))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Assign a different font color reactable(data, defaultColDef = colDef(     style = highlight_max(data,     font_color = \"red\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Highlight the background of the cell for the maximum value in each column reactable(data, defaultColDef = colDef(     style = highlight_max(data,     highlighter = \"yellow\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlights the minimum value in a column — highlight_min","title":"Highlights the minimum value in a column — highlight_min","text":"`highlight_min()` function assigns font color /background color minimum value column.     placed within style argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlights the minimum value in a column — highlight_min","text":"","code":"highlight_min(data, font_color = \"red\", highlighter = NULL)"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlights the minimum value in a column — highlight_min","text":"data Dataset containing least one numeric column. font_color color assign minimum value column. Default color red. highlighter color assign background cell containing minimum value column.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highlights the minimum value in a column — highlight_min","text":"function applies color     minimum value column numeric values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_min.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlights the minimum value in a column — highlight_min","text":"","code":"data <- MASS::road[11:17, ]  ## By default, the minimum value is bold with a red font color reactable(data, defaultColDef = colDef(     style = highlight_min(data))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Assign a different font color reactable(data, defaultColDef = colDef(     style = highlight_min(data,     font_color = \"green\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Highlight the background of the cell for the minimum value in each column reactable(data, defaultColDef = colDef(     style = highlight_min(data,     highlighter = \"yellow\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_min_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlights the minimum and maximum value in a column — highlight_min_max","title":"Highlights the minimum and maximum value in a column — highlight_min_max","text":"`highlight_min_max()` function assigns font color /background color minimum maximum values column.     placed within style argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_min_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlights the minimum and maximum value in a column — highlight_min_max","text":"","code":"highlight_min_max(   data,   min_font_color = \"red\",   max_font_color = \"green\",   min_highlighter = NULL,   max_highlighter = NULL )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_min_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlights the minimum and maximum value in a column — highlight_min_max","text":"data Dataset containing least one numeric column. min_font_color color assign minimum value column. Default color red. max_font_color color assign maximum value column. Default color green. min_highlighter color assign background cell containing minimum value column. max_highlighter color assign background cell containing maximum value column.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_min_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highlights the minimum and maximum value in a column — highlight_min_max","text":"function applies color     minimum maximum values column numeric values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_min_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlights the minimum and maximum value in a column — highlight_min_max","text":"","code":"data <- MASS::road[11:17, ]  ## By default, the minimum and maximum values are bold with a red and green font color respectively reactable(data, defaultColDef = colDef(     style = highlight_min_max(data))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Assign a different font color to the min and max values reactable(data, defaultColDef = colDef(     style = highlight_min_max(data,     min_font_color = \"orange\",     max_font_color = \"blue\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Highlight the background of the cell for the min and max values in each column reactable(data, defaultColDef = colDef(     style = highlight_min_max(data,     min_highlighter = \"salmon\",     max_highlighter = \"skyblue\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Color of points used in `react_sparkline`. — highlight_points","title":"Color of points used in `react_sparkline`. — highlight_points","text":"Color points used `react_sparkline`.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color of points used in `react_sparkline`. — highlight_points","text":"","code":"highlight_points(   all = \"transparent\",   first = \"transparent\",   last = \"transparent\",   min = \"transparent\",   max = \"transparent\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color of points used in `react_sparkline`. — highlight_points","text":", first, last, min, max colors , first, last, min, max points.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/highlight_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color of points used in `react_sparkline`. — highlight_points","text":"function provides colors specific points.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/hoverdark.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme hoverdark — hoverdark","title":"Theme hoverdark — hoverdark","text":"Changes light-themed dark-themed hover","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/hoverdark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme hoverdark — hoverdark","text":"","code":"hoverdark(   font_size = 15,   font_color = \"#222222\",   header_font_size = 15,   cell_padding = 4,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/hoverdark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme hoverdark — hoverdark","text":"font_size Numeric value representing size font within table (px). Default 15. font_color Color font text within table. Default #222222. header_font_size Numeric value representing size font within table (px). Default 15. cell_padding Numeric value representing padding size cells (px). Default 4. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/hoverdark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme hoverdark — hoverdark","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/hoverdark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme hoverdark — hoverdark","text":"","code":"data <- iris[10:29, ]  ## Standard hoverdark theme reactable(data,           theme = hoverdark()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = hoverdark(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/hoverlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme hoverlight — hoverlight","title":"Theme hoverlight — hoverlight","text":"Changes dark-themed light-themed hover","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/hoverlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme hoverlight — hoverlight","text":"","code":"hoverlight(   font_size = 15,   font_color = \"#ffffff\",   header_font_size = 15,   cell_padding = 4,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/hoverlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme hoverlight — hoverlight","text":"font_size Numeric value representing size font within table (px). Default 15. font_color Color font text within table. Default #ffffff. header_font_size Numeric value representing size font within table (px). Default 15. cell_padding Numeric value representing padding size cells (px). Default 4. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/hoverlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme hoverlight — hoverlight","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/hoverlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme hoverlight — hoverlight","text":"","code":"data <- iris[10:29, ]  ## Standard hoverlight theme reactable(data,           theme = hoverlight()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = hoverlight(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/html.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply HTML attributes to title, subtitle, and source text. — html","title":"Apply HTML attributes to title, subtitle, and source text. — html","text":"Use `html()` apply HTML attributes text within `add_title()`, `add_subtitle()`, `add_source()`.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply HTML attributes to title, subtitle, and source text. — html","text":"","code":"html(text, ...)"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply HTML attributes to title, subtitle, and source text. — html","text":"text, ... text provided within title, subtitle source HTML attributes applied.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply HTML attributes to title, subtitle, and source text. — html","text":"object class HTML.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply HTML attributes to title, subtitle, and source text. — html","text":"","code":"if (FALSE) { ## Change the title color to blue data <- iris[10:29, ] reactable(data) %>% add_title(html(\"Normal title. <span style='color:DodgerBlue;'>Blue title.<\/span>\"))  ## Add emojis to the source data <- iris[10:100, ] reactable(data) %>% add_source(html(\"<p>Made with &#128151; by: John Doe &#128512;<\/p>\")) }"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/icon_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign icons to cells in a column — icon_assign","title":"Assign icons to cells in a column — icon_assign","text":"`icon_assign()` function assigns icons Font Awesome library (via shiny) cell numeric column depending value row.     default, number icons assigned equal value cell. value less max, receive empty icons.     icon shape, size, color filled empty icons can modified parameters.     Values can optionally shown icons desired.     placed within cell argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/icon_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign icons to cells in a column — icon_assign","text":"","code":"icon_assign(   data,   icon = \"circle\",   fill_color = \"#67a9cf\",   empty_color = \"lightgrey\",   fill_opacity = 1,   empty_opacity = 1,   align_icons = \"left\",   icon_size = 16,   buckets = NULL,   number_fmt = NULL,   seq_by = 1,   show_values = \"none\",   animation = \"1s ease\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/icon_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign icons to cells in a column — icon_assign","text":"data Dataset containing least one numeric column. icon single icon Font Awesome library (via shiny). Default icon circle. fill_color single color filled icons. Default color #1e90ff. empty_color single color empty icons. Default color lightgrey. fill_opacity value 0 1 adjusts opacity fill_color. value 0 fully transparent, value 1 fully opaque. Default 1. empty_opacity value 0 1 adjusts opacity empty_color. value 0 fully transparent, value 1 fully opaque. Default 1. align_icons Choose align icons column. Options left, right, center. Default left. icon_size value representing size icon px. Default 16. buckets Optionally divide values column buckets providing numeric value. Icons assigned rank lowest highest. Default set NULL. number_fmt Optionally format numbers using formats scales package. Default set NULL. seq_by numerical input determines number icon represents. Ex. instead displaying 100 icons number 100, can set seq_by = 10 show 10 icons. Default value set 1. show_values Optionally display values next icons. Options \"left\", \"right\", \", \"\", \"none\". Default none. animation Control duration timing function animation sorting/updating values shown page. See [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) available timing functions examples. Animation can turned setting \"none\". Default \"1s ease\".","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/icon_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign icons to cells in a column — icon_assign","text":"function applies colored icons     column numeric values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/icon_assign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign icons to cells in a column — icon_assign","text":"","code":"data <- iris[10:29, ] ## By default, icon_assign() assigns a cirlce icon for each value up to the maximum value. ## If a value is 5 and the maximum value in the column is 6, ## It will assign 5 blue icons and 1 grey icon. reactable(data, columns = list( Sepal.Length = colDef(cell = icon_assign(data)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Assign colors to filled icons and empty icons reactable(data, columns = list( Sepal.Length = colDef(cell = icon_assign(data, fill_color = \"red\", empty_color = \"white\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Assign any icon from the Font Awesome Library reactable(data, columns = list( Sepal.Length = colDef(cell = icon_assign(data, icon = \"fan\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Optionally divide values into buckets and assign icons based on rank. reactable(data, columns = list( Sepal.Length = colDef(cell = icon_assign(data, buckets = 3)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Optionally display values next to icons. reactable(data, columns = list( Sepal.Length = colDef(cell = icon_assign(data, show_values = \"right\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Change the alignment of the icons within a column. reactable(data, columns = list( Sepal.Length = colDef(cell = icon_assign(data, align_icons = \"center\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/icon_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Add colored icons to cells in a column — icon_sets","title":"Add colored icons to cells in a column — icon_sets","text":"`icon_sets()` function conditionally adds icon Font Awesome library (via shiny) cell column     assigns color depending value relation values particular column.     number icons number colors can used.     number icons colors determines values shown low values high values.     icons can positioned , , , right left values.     size icon can adjusted.     Icons icon colors can provided via another reference column dataset useful assigning icons/colors particular occurrences.     placed within cell argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/icon_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add colored icons to cells in a column — icon_sets","text":"","code":"icon_sets(   data,   icons = c(\"circle\"),   icon_set = NULL,   colors = c(\"#15607A\", \"#B0B0B0\", \"#FA8C00\"),   opacity = 1,   icon_position = \"right\",   icon_ref = NULL,   icon_size = 16,   icon_color_ref = NULL,   number_fmt = NULL,   tooltip = FALSE,   animation = \"1s ease\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/icon_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add colored icons to cells in a column — icon_sets","text":"data Dataset containing least one numeric column. icons vector three icons Font Awesome library (via shiny). Icons given order low values high values. Default icons circles. icon_set Apply pre-selected set icons values. Options \"ski rating\", \"medals\", \"batteries\". Default NULL. colors color(s) assign icons. Colors given order low values high values. Default colors provided blue-grey-orange: c(\"#15607A\", \"#B0B0B0\", \"#FA8C00\"). Can use R's built-colors color packages. opacity value 0 1 adjusts opacity colors. value 0 fully transparent, value 1 fully opaque. Default 1. icon_position Position icon relative numbers. Options \"left\", \"right\", \", \"\", \"\". Default right. icon_ref Optionally assign icons another column providing name column containing icons quotes. one icon can provided per cell. Default NULL. icon_size value representing size icon px. Default 16. icon_color_ref Optionally assign color icons another column providing name column containing icon colors quotes. one color can provided per cell. Default NULL. number_fmt Optionally format numbers using formats scales package. Default set NULL. tooltip Logical: hover tooltip. Default FALSE. animation Control duration timing function animation sorting/updating values shown page. See [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) available timing functions examples. Animation can turned setting \"none\". Default \"1s ease\".","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/icon_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add colored icons to cells in a column — icon_sets","text":"function applies icon     column numeric values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/icon_sets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add colored icons to cells in a column — icon_sets","text":"","code":"data <- MASS::Cars93[20:49, c(\"Make\", \"MPG.city\", \"MPG.highway\")]  ## By default, icon_sets() assigns blue circles to the lowest-third values, ## grey circles to the middle-third values, ## and orange to the top-third values reactable(data, defaultColDef = colDef(cell = icon_sets(data))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Apply pre-set icon sets with icon_set: reactable(data, defaultColDef = colDef(cell = icon_sets(data, icon_set = 'ski rating'))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Assign custom colors reactable(data, defaultColDef = colDef(cell = icon_sets(data, colors = c(\"tomato\", \"grey\", \"dodgerblue\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Assign icons from Font Awesome's icon library reactable(data, defaultColDef = colDef(cell = icon_sets(data, icons = c(\"arrow-down\",\"minus\",\"arrow-up\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Use number_fmt to format numbers using the scales package car_prices <- MASS::Cars93[20:49, c(\"Make\", \"Price\")]  reactable(car_prices, defaultColDef = colDef(cell = icon_sets(car_prices, number_fmt = scales::dollar))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Position icons relative to the numbers. Options are to the left, right, above, below, or over. reactable(car_prices, defaultColDef = colDef(cell = icon_sets(car_prices, icon_position = \"above\"))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/journal.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme journal — journal","title":"Theme journal — journal","text":"Bootstrap-inspired journal theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/journal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme journal — journal","text":"","code":"journal(   font_size = 14,   font_color = \"#222222\",   header_font_size = 15,   header_font_color = \"#fad9d8\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/journal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme journal — journal","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table group headers. Default #222222. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #fad9d8. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/journal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme journal — journal","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/journal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme journal — journal","text":"","code":"data <- iris[10:29, ]  ## Standard journal theme reactable(data,           theme = journal()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = journal(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/lux.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme lux — lux","title":"Theme lux — lux","text":"Bootstrap-inspired lux theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/lux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme lux — lux","text":"","code":"lux(   font_size = 14,   font_color = \"#8c8c8c\",   header_font_size = 15,   header_font_color = \"#7f7f7f\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/lux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme lux — lux","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table group headers. Default #8c8c8c. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #7f7f7f. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/lux.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme lux — lux","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/lux.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme lux — lux","text":"","code":"data <- iris[10:29, ]  ## Standard lux theme reactable(data,           theme = lux()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = lux(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/margin.html","id":null,"dir":"Reference","previous_headings":"","what":"Margin dimensions. — margin","title":"Margin dimensions. — margin","text":"Margin dimensions.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/margin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Margin dimensions. — margin","text":"","code":"margin(t = 0, r = 0, b = 0, l = 0)"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/margin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Margin dimensions. — margin","text":"t, r, b, l dimensions top, right, bottom, left margins.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/margin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Margin dimensions. — margin","text":"function provides margin dimensions.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/merge_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two columns together in a specified arrangement. — merge_column","title":"Merge two columns together in a specified arrangement. — merge_column","text":"`merge_column()` function can used merge style values two columns within reactable table.     `merge_column()` works numeric non-numeric columns.     style/format current column merged column can controlled via size, color, weight, text decoration.     style parameters start \"merged_\" control column merged specified `merged_name`.     style parameters start \"merged_\" control current column within.     position column merged relative current column can controlled `merged_position`.     position options merged column , , left, right current column.     spacing current column merged column can controlled `spacing`.     `merge_column()` needs placed within cell argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/merge_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two columns together in a specified arrangement. — merge_column","text":"","code":"merge_column(   data,   merged_name = NULL,   merged_position = \"right\",   merged_size = 12,   merged_color = \"#777\",   merged_weight = \"normal\",   merged_style = \"normal\",   merged_decoration = \"normal\",   size = 14,   color = NULL,   weight = \"bold\",   style = \"normal\",   decoration = NULL,   spacing = 0 )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/merge_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two columns together in a specified arrangement. — merge_column","text":"data Dataset containing either text numeric column. merged_name name column merge existing column. column can contain either numeric non-numeric data. single column can provided. Default NULL. merged_position position merged column relation existing column. Options 'right', 'left', '', ''. Default right. merged_size size text merged column. Default 12. merged_color color text merged column. Default #777. merged_weight font weight text merged column. Options \"bold\" \"normal\". Default \"normal\". merged_style style text merged column. Options \"normal\" \"italic\". Default \"normal\". merged_decoration decoration text merged column. example, add underline, overline, line-text. Default NULL. size size text displayed current column. Default 12. color color text displayed current column. Default NULL. weight font weight text displayed current column. Options \"bold\" \"normal\". Default \"normal\". style style text displayed current column. Options \"normal\" \"italic\". Default \"normal\". decoration decoration text displayed current column. example, add underline, overline, line-text. Default NULL. spacing spacing merged existing columns. value greater 0 creates space , value less 0 creates less space. Default 0.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/merge_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two columns together in a specified arrangement. — merge_column","text":"function merges two columns together.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/merge_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two columns together in a specified arrangement. — merge_column","text":"","code":"data <- MASS::Cars93[20:49, c(\"Manufacturer\", \"Model\", \"MPG.city\", \"MPG.highway\")]  ## Stack text from one column with another column: reactable( data, columns = list( Manufacturer = colDef(name = \"Manufacturer/Model\",                       cell = merge_column(data, merged_name = \"Model\"                       )), Model = colDef(show = FALSE))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Control the appearance of both the current and merged columns: reactable( data, columns = list( Manufacturer = colDef(name = \"Manufacturer/Model\",                       cell = merge_column(data,                                           merged_name = \"Model\",                                           merged_size = 16,                                           merged_color = \"blue\",                                           merged_style = \"italic\",                                           size = 18,                                           color = \"red\"                                           )), Model = colDef(show = FALSE))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Combine both numeric and non-numeric columns together: reactable( data, columns = list( Model = colDef(name = \"Model/MPG Highway\",                   cell = merge_column(data,                                       merged_name = \"MPG.highway\",                                       merged_position = \"below\",                                       merged_size = 20,                                       merged_color = \"green\" )), MPG.highway = colDef(show = FALSE), MPG.city = colDef(show = FALSE))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/midnight.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme midnight — midnight","title":"Theme midnight — midnight","text":"midnight table theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/midnight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme midnight — midnight","text":"","code":"midnight(   font_size = 15,   font_color = \"#727272\",   header_font_size = 15,   header_font_color = \"#666666\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/midnight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme midnight — midnight","text":"font_size Numeric value representing size font within table (px). Default 15. font_color Color font text within table group headers. Default #727272. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #666666. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/midnight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme midnight — midnight","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/midnight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme midnight — midnight","text":"","code":"data <- iris[10:29, ]  ## Standard midnight theme reactable(data,           theme = midnight()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = midnight(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/midnightblue.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme midnightblue — midnightblue","title":"Theme midnightblue — midnightblue","text":"midnightblue table theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/midnightblue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme midnightblue — midnightblue","text":"","code":"midnightblue(   font_size = 15,   font_color = \"#bababa\",   header_font_size = 15,   header_font_color = \"lightgrey\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/midnightblue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme midnightblue — midnightblue","text":"font_size Numeric value representing size font within table (px). Default 15. font_color Color font text within table group headers. Default #bababa. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default lightgrey. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/midnightblue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme midnightblue — midnightblue","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/midnightblue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme midnightblue — midnightblue","text":"","code":"data <- iris[10:29, ]  ## Standard midnightblue theme reactable(data,           theme = midnightblue()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = midnightblue(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/minty.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme minty — minty","title":"Theme minty — minty","text":"Bootstrap-inspired minty theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/minty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme minty — minty","text":"","code":"minty(   font_size = 15,   font_color = \"#9a9a9a\",   header_font_size = 16,   header_font_color = \"#c9e7de\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/minty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme minty — minty","text":"font_size Numeric value representing size font within table (px). Default 15. font_color Color font text within table group headers. Default #9a9a9a. header_font_size Numeric value representing size font within table (px). Default 16. header_font_color Color font header text. Default #c9e7de. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/minty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme minty — minty","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/minty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme minty — minty","text":"","code":"data <- iris[10:29, ]  ## Standard minty theme reactable(data,           theme = minty()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = minty(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/no_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme no_lines — no_lines","title":"Theme no_lines — no_lines","text":"table style lines borders","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/no_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme no_lines — no_lines","text":"","code":"no_lines(   font_size = 14,   font_color = \"#222222\",   header_font_size = 15,   header_font_color = \"#222222\",   centered = FALSE,   cell_padding = 6 )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/no_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme no_lines — no_lines","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table. Default #222222. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default transparent centered Logical: vertically center contents table. Default FALSE. cell_padding Numeric value representing padding size cells (px). Default 6.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/no_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme no_lines — no_lines","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/no_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme no_lines — no_lines","text":"","code":"data <- iris[10:29, ]  ## Standard no_lines theme reactable(data,           theme = no_lines()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = no_lines(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/nytimes.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme nytimes — nytimes","title":"Theme nytimes — nytimes","text":"New York Times-inspired table theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/nytimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme nytimes — nytimes","text":"","code":"nytimes(   font_size = 13,   font_color = \"#333333\",   header_font_size = 11,   header_font_color = \"#999999\",   cell_padding = 5,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/nytimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme nytimes — nytimes","text":"font_size Numeric value representing size font within table (px). Default 13. font_color Color font text within table group headers. Default #333333. header_font_size Numeric value representing size font within table (px). Default 11. header_font_color Color font header text. Default #999999. cell_padding Numeric value representing padding size cells (px). Default 5. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/nytimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme nytimes — nytimes","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/nytimes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme nytimes — nytimes","text":"","code":"data <- iris[10:29, ]  ## Standard nytimes theme reactable(data,           theme = nytimes()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = nytimes(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pff.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme pff — pff","title":"Theme pff — pff","text":"Pro Football Focus-inspired table theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme pff — pff","text":"","code":"pff(   font_size = 16,   font_color = \"#878e94\",   header_font_size = 12,   header_font_color = \"#ffffff\",   cell_padding = 4,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme pff — pff","text":"font_size Numeric value representing size font within table (px). Default 16. font_color Color font text within table group headers. Default #878e94. header_font_size Numeric value representing size font within table (px). Default 12. header_font_color Color font header text. Default #ffffff. cell_padding Numeric value representing padding size cells (px). Default 4. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme pff — pff","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme pff — pff","text":"","code":"data <- iris[10:29, ]  ## Standard pff theme reactable(data,           theme = pff()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = pff(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pill_buttons.html","id":null,"dir":"Reference","previous_headings":"","what":"Surround text or numeric values in a colored pill button — pill_buttons","title":"Surround text or numeric values in a colored pill button — pill_buttons","text":"`pill_buttons()` function surrounds text numeric values column colored pill button.     `pill_buttons()` applied column containing text, color pill button can provided via single color can provided within `color`     via another column dataset referencing column name `color_ref` (conditionally applying colors text).     `pill_buttons` applied numeric column, either single color vector colors can provided within `color`     colors can also assigned via `color_ref`.     opacity color(s) provided can adjusted providing value 0 1 `opacity`.     color text/values can changed using `text_color`.     text/values displayed within dark-colored background, `brighten_text` display text/values white visible.     color `brighten_text_color` can changed color white desired.     horizontal alignment `pill_buttons()` can controlled using reactable::colDef(align = \"center\").     `pill_buttons()` needs placed within cell argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pill_buttons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Surround text or numeric values in a colored pill button — pill_buttons","text":"","code":"pill_buttons(   data,   colors = \"#15607A\",   color_ref = NULL,   opacity = 1,   number_fmt = NULL,   show_text = TRUE,   text_size = NULL,   text_color = \"black\",   text_color_ref = NULL,   brighten_text = TRUE,   brighten_text_color = \"white\",   bold_text = FALSE,   box_shadow = FALSE,   tooltip = FALSE,   animation = \"background 1s ease\" )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pill_buttons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Surround text or numeric values in a colored pill button — pill_buttons","text":"data Dataset containing either text numeric column. colors background color pill button. single color can provided columns containing text. Multiple colors can provided columns containing values given order low values high values. multiple colors provided columns containing text, first color vector assigned text. default color provided \"#15607A\". Can use R's built-colors color packages. color_ref Optionally assign colors another column providing name column containing colors quotes. one color can provided per row. Default NULL. opacity value 0 1 adjusts opacity color(s). value 0 fully transparent, value 1 fully opaque. Default 1. number_fmt Optionally format numbers using formats scales package. Default NULL. show_text Logical: show text hide text. Default TRUE. text_size Numeric value representing size text labels. Default NULL. text_color Assigns text color values. Default black. text_color_ref Optionally assign text color another column providing name column containing text colors quotes. one color can provided per cell. Default NULL. brighten_text Logical: automatically assign color text based background color pill button. Text within dark-colored backgrounds turn white, text within light-colored backgrounds black. Default TRUE. brighten_text_color Assigns text color values values within dark-colored pill button backgrounds. Default white. bold_text Logical: bold text. Default FALSE. box_shadow Logical: add box shadow buttons. Default FALSE. tooltip Logical: hover tooltip. Default FALSE. animation Control duration timing function animation sorting/updating values shown page. See [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) available timing functions examples. Animation can turned setting \"none\". Default \"background 1s ease\".","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pill_buttons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Surround text or numeric values in a colored pill button — pill_buttons","text":"function surrounds text/values column     colored pill button.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pill_buttons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Surround text or numeric values in a colored pill button — pill_buttons","text":"","code":"library(dplyr) data <- iris[45:54, ]  ## Surround text with pill buttons: reactable( data, columns = list( Species = colDef(cell = pill_buttons(data)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Conditionally apply colors from another column: data %>% mutate(color_assign = case_when( Species == \"setosa\" ~ \"red\", Species == \"versicolor\" ~ \"forestgreen\", TRUE ~ \"grey\")) %>% reactable(., columns = list( Species = colDef(cell = pill_buttons(., color_ref = \"color_assign\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Surround numeric values with pill buttons: reactable( data, columns = list( Petal.Width = colDef(cell = pill_buttons(data)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Apply multiple colors to numeric values: reactable( data, columns = list( Petal.Width = colDef( cell = pill_buttons(data,                     colors = c(\"lightpink\",\"white\",\"lightgreen\"),                     opacity = 0.3)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Apply a box shadow to the buttons to give a 3-D effect: reactable( data, columns = list( Petal.Width = colDef( cell = pill_buttons(data,                     box_shadow = TRUE,                     colors = c(\"lightpink\",\"white\",\"lightgreen\"),                     opacity = 0.3)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pos_neg_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign colors to negative and positive values — pos_neg_colors","title":"Assign colors to negative and positive values — pos_neg_colors","text":"`pos_neg_colors()` function assigns color negative values color positive values.     placed within style argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pos_neg_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign colors to negative and positive values — pos_neg_colors","text":"","code":"pos_neg_colors(neg_col, pos_col, bold = NULL)"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pos_neg_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign colors to negative and positive values — pos_neg_colors","text":"neg_col color assign negative values. pos_col color assign positive values. bold optional argument bold values. Default set NULL bold.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pos_neg_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign colors to negative and positive values — pos_neg_colors","text":"function applies color     positive negative values numeric column.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/pos_neg_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign colors to negative and positive values — pos_neg_colors","text":"","code":"data <- data.frame( Symbol = c(\"GOOG\", \"FB\", \"AMZN\", \"NFLX\", \"TSLA\"), Price = c(1265.13, 187.89, 1761.33, 276.82, 328.13), Change = c(4.14, 1.51, -19.45, 5.32, -12.45))  ## Assign the color red to negative values and green to positive values reactable(data, columns = list( Change = colDef( style = pos_neg_colors(\"red\", \"green\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Bold values reactable(data, columns = list( Change = colDef( style = pos_neg_colors(\"red\", \"green\", bold = TRUE)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/reactablefmtr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"reactablefmtr: Streamlined Table Styling and Formatting for Reactable — reactablefmtr-package","title":"reactablefmtr: Streamlined Table Styling and Formatting for Reactable — reactablefmtr-package","text":"Provides various features streamline enhance styling interactive      reactable tables easy--use highly-customizable functions themes.      Apply conditional formatting cells data bars, color scales, color tiles,     icon sets. Utilize custom table themes inspired popular websites      bootstrap themes. Apply sparkline line & bar charts      (note feature requires 'dataui' package can downloaded     <https://github.com/timelyportfolio/dataui>).     Increase portability reproducibility reactable tables embedding images      web directly cells. Save final table output static image      interactive file.","code":""},{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/reference/reactablefmtr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"reactablefmtr: Streamlined Table Styling and Formatting for Reactable — reactablefmtr-package","text":"Maintainer: Kyle Cuilla kyle.cuilla@gmail.com [copyright holder] contributors: Greg Lin [contributor] June Choe [contributor] Kent Russell [contributor]","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/react_sparkbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a sparkline bar chart to a reactable table — react_sparkbar","title":"Add a sparkline bar chart to a reactable table — react_sparkbar","text":"`react_sparkbar()` function utilizes dataui package <https://github.com/timelyportfolio/dataui> create interactive sparkline bar chart.     data provided must list format.     vertical height sparkbar can adjusted `height`. default, height matched height cell reactable table. However, height can increased better see patterns data.     four-sided margin around sparkbar can controlled `margin()`. labels added sparkbars, margin auto-adjust (instances) able display labels.     labels contain large values values many digits, left right margins may need increased slightly full numbers visible.     fill color fill width can controlled `fill_color`, `fill_color_ref`, `fill_opacity`.     outline color width filled bars can controlled `outline_color`, `outline_color_ref`, `outline_width`.     `statline` can used show horizontal dotted line represents either mean, median, min, max (choice).     appearance statline statline labels can controlled `statline_color` `statline_label_size`.     bandline can added using `bandline`. options innerquartiles highlights innerquartiles data range highlights full range data.     default, `react_sparkbar()` interactive data points shown hovering sparkbars. can turned setting `tooltip` FALSE.     two tooltip types available within `tooltip_type`. size color tooltip labels can adjusted `tooltip_size` `tooltip_color`.     Also default, labels bars . However, one add labels first, last, min, max, values within `labels`.     labels shown sparkbar tooltip automatically rounded nearest whole integer. decimals can shown providing number decimal places `decimals`.     minimum value data series minimum value shown sparkbar, can adjusted `min_value` max can adjusted `max_value`.     `react_sparkline()` placed within cell argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/react_sparkbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a sparkline bar chart to a reactable table — react_sparkbar","text":"","code":"react_sparkbar(   data,   height = 22,   fill_color = \"slategray\",   fill_color_ref = NULL,   fill_opacity = 1,   outline_color = \"transparent\",   outline_color_ref = NULL,   outline_width = 1,   highlight_bars = NULL,   labels = \"none\",   label_size = \"0.8em\",   decimals = 0,   max_value = NULL,   min_value = NULL,   statline = NULL,   statline_color = \"red\",   statline_label_size = \"0.8em\",   bandline = NULL,   bandline_color = \"red\",   bandline_opacity = 0.2,   tooltip = TRUE,   tooltip_type = 1,   tooltip_color = NULL,   tooltip_size = \"1.1em\",   margin = NULL )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/react_sparkbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a sparkline bar chart to a reactable table — react_sparkbar","text":"data Dataset containing column numeric values list format. height Height sparkbar. Default 22. fill_color color bar fill. Default slategray. fill_color_ref Optionally assign fill colors another column providing name column containing colors quotes. one color can provided per row. Default NULL. fill_opacity value 0 1 adjusts opacity. value 0 fully transparent, value 1 fully opaque. Default 1. outline_color color outline around filled bars. Default transparent. outline_color_ref Optionally assign outline colors another column providing name column containing colors quotes. one color can provided per row. Default NULL. outline_width Width outline around filled bars. Default 1. highlight_bars Use `highlight_bars()` assign colors particular bars. Colors can assigned , min, max, first, last bars. default, transparent colors assigned bars. labels Show labels points interest. Options 'min', 'max', 'first', 'last', '', 'none'. Default 'none'. label_size size labels. Default 0.8em. decimals Numeric: number decimals displayed labels tooltip. Default 0. max_value maximum value sparkbar range.     Default NULL (automatically maximum value sparkbar series).     Takes either: 1. numeric vector length 1     2. numeric vector length equal number rows     3. column name (string) holds max_values use     4. function applied maximum value row min_value minimum value sparkbar range.     Default NULL (automatically minimum value sparkbar series).     Takes either: 1. numeric vector length 1     2. numeric vector length equal number rows     3. column name (string) holds min_values use     4. function applied minimum value row statline Inserts horizontal dotted line representing statistic, places value statistic right line. Options 'mean', 'median', 'min', 'max'. Default NULL. statline_color color horizontal dotted statline. Default red. statline_label_size size label right statline. Default 0.8em. bandline Inserts horizontal bandline render ranges interest. Options 'innerquartiles' 'range' (min max). Default NULL. bandline_color color bandline. Default red. bandline_opacity value 0 1 adjusts opacity. value 0 fully transparent, value 1 fully opaque. Default 0.2. tooltip Logical: turn tooltip . Default TRUE. tooltip_type tooltip type. Options 1 2. Default 1. tooltip_color color tooltip labels. Default NULL. tooltip_size size tooltip labels. Default '1.1em'. margin four-sided margin around sparkbar. Use margin() assign top, right, bottom, left margins.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/react_sparkbar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a sparkline bar chart to a reactable table — react_sparkbar","text":"function creates sparkline bar chart     column containing list values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/react_sparkbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a sparkline bar chart to a reactable table — react_sparkbar","text":"","code":"library(dplyr) ## Default sparkline bar chart iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(petal_width = colDef(cell = react_sparkbar(.)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Highlight particular bars iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(petal_width = colDef(cell = react_sparkbar(.,  decimals = 1,  min_value = 0,  highlight_bars = highlight_bars(min=\"red\",max=\"blue\"))))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Conditionally assign fill colors to groups iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  mutate(flower_cols = case_when(    Species == \"setosa\" ~ \"purple\",    Species == \"versicolor\" ~ \"darkgreen\",    Species == \"virginica\" ~ \"orange\",    TRUE ~ \"grey\"  )) %>%  reactable(.,  columns = list(flower_cols = colDef(show=FALSE),  petal_width = colDef(cell = react_sparkbar(.,  height = 80,  fill_color_ref = \"flower_cols\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Add labels to particular bars iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(petal_width = colDef(cell = react_sparkbar(.,  height = 80,  decimals = 1,  highlight_bars = highlight_bars(first=\"blue\",last=\"red\"),  labels = c(\"first\",\"last\"))))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Add statline to show the mean for each sparkbar iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(petal_width = colDef(cell = react_sparkbar(.,  height = 80,  decimals = 1,  statline = \"mean\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Combine multiple elements together iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(petal_width = colDef(cell = react_sparkbar(.,  height = 80,  decimals = 1,  statline = \"mean\",  bandline = \"innerquartiles\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/react_sparkline.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a sparkline line chart a reactable table — react_sparkline","title":"Add a sparkline line chart a reactable table — react_sparkline","text":"`react_sparkline()` function utilizes dataui package <https://github.com/timelyportfolio/dataui> create interactive sparkline line chart.     data provided must list format.     vertical height sparkline can adjusted `height`. default, height matched height cell reactable table. However, min/max/labels applied, height auto-increased better show labels. adjustment height may needed better see patterns data.     four-sided margin around sparkline can controlled `margin()`. labels added sparklines, margin auto-adjust (instances) able display labels.     labels contain large values values many digits, left right margins may need increased slightly full numbers visible.     default, sparkline line (line connects data points) shown can hidden setting `show_line` FALSE.     line color, line width, line curve can controlled `line_color`, `line_width`, `line_curve` respectively.     filled area beneath line can shown setting `show_area` TRUE. area shown, area color can controlled `area_color` `area_color_ref` opacity can controlled `area_opacity`.     `statline` can used show horizontal dotted line represents either mean, median, min, max (choice).     appearance statline statline labels can controlled `statline_color` `statline_label_size`.     bandline can added using `bandline`. options innerquartiles highlights innerquartiles data range highlights full range data.     default, `react_sparkline()` interactive data points shown hovering sparklines. can turned setting `tooltip` FALSE.     two tooltip types available within `tooltip_type`. size color tooltip labels can adjusted `tooltip_size` `tooltip_color`.     Also default, labels line . However, one add labels first, last, min, max, values within `labels`.     labels shown sparkline tooltip automatically rounded nearest whole integer. decimals can shown providing number decimal places `decimals`.     minimum value data series minimum value shown sparkline, can adjusted `min_value` max can adjusted `max_value`.     `react_sparkline()` placed within cell argument reactable::colDef.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/react_sparkline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a sparkline line chart a reactable table — react_sparkline","text":"","code":"react_sparkline(   data,   height = 22,   show_line = TRUE,   line_color = \"slategray\",   line_color_ref = NULL,   line_width = 1,   line_curve = \"cardinal\",   highlight_points = NULL,   point_size = 1.1,   labels = \"none\",   label_size = \"0.8em\",   decimals = 0,   min_value = NULL,   max_value = NULL,   show_area = FALSE,   area_color = NULL,   area_color_ref = NULL,   area_opacity = 0.1,   statline = NULL,   statline_color = \"red\",   statline_label_size = \"0.8em\",   bandline = NULL,   bandline_color = \"red\",   bandline_opacity = 0.2,   tooltip = TRUE,   tooltip_type = 1,   tooltip_color = NULL,   tooltip_size = \"1.1em\",   margin = NULL )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/react_sparkline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a sparkline line chart a reactable table — react_sparkline","text":"data Dataset containing column numeric values list format. height Height sparkline. Default 22. show_line Logical: show hide line. Default TRUE. line_color color line. Default slategray. line_color_ref Optionally assign line colors another column providing name column containing colors quotes. one color can provided per row. Default NULL. line_width Width line. Default 1. line_curve curvature line. Options 'cardinal', 'linear', 'basis', 'monotoneX'. Default 'cardinal'. highlight_points Use `highlight_points()` assign colors particular points. Colors can assigned , min, max, first, last points. default, transparent colors assigned point. point_size Size points. Must first assigned colors point(s) using `highlight_points`. Default 1.1. labels Show labels points interest. Options 'min', 'max', 'first', 'last', '', 'none'. Default 'none'. label_size Size labels. Default '0.8em'. decimals number decimals displayed labels tooltip. Default 0. min_value minimum value sparkline range.     Default NULL (automatically minimum value sparkline series).     Takes either: 1. numeric vector length 1     2. numeric vector length equal number rows     3. column name (string) holds min_values use     4. function applied minimum value row max_value maximum value sparkline range.     Default NULL (automatically maximum value sparkline series).     Takes either: 1. numeric vector length 1     2. numeric vector length equal number rows     3. column name (string) holds max_values use     4. function applied maximum value row show_area Logical: show hide area beneath line. Default FALSE. area_color color area. `show_area` must set TRUE color shown. Default NULL (inherited line_color). area_color_ref Optionally assign area colors another column providing name column containing colors quotes. one area color can provided per row. Default NULL. Default FALSE. area_opacity value 0 1 adjusts opacity. value 0 fully transparent, value 1 fully opaque. Default 0.1. statline Inserts horizontal dotted line representing statistic, places value statistic right line. Options 'mean', 'median', 'min', 'max'. Default NULL. statline_color color horizontal dotted statline. Default red. statline_label_size size label right statline. Default '0.8em'. bandline Inserts horizontal bandline render ranges interest. Options 'innerquartiles' 'range' (min max). Default NULL. bandline_color color bandline. Default red. bandline_opacity value 0 1 adjusts opacity. value 0 fully transparent, value 1 fully opaque. Default 0.2. tooltip Logical: turn tooltip . Default TRUE. tooltip_type tooltip type. Options 1 2. Default 1. tooltip_color color tooltip labels. Default NULL. tooltip_size size tooltip labels. Default '1.1em'. margin four-sided margin around sparkline. Use margin() assign top, right, bottom, left margins.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/react_sparkline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a sparkline line chart a reactable table — react_sparkline","text":"function creates sparkline chart     column containing list values.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/react_sparkline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a sparkline line chart a reactable table — react_sparkline","text":"","code":"## Default sparkline line chart library(dplyr) iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(petal_width = colDef(cell = react_sparkline(.)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Highlight min and max data points iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(  petal_width = colDef(cell = react_sparkline(.,  decimals = 1,  highlight_points = highlight_points(min=\"red\",max=\"blue\"))))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Add labels to data points and change curvature of line iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(petal_width = colDef(cell = react_sparkline(.,  line_curve = \"linear\",  decimals = 1,  highlight_points = highlight_points(first=\"orange\",last=\"blue\"),  labels = c(\"first\",\"last\"))))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Conditionally assign line colors to groups iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  mutate(flower_cols = case_when(    Species == \"setosa\" ~ \"purple\",    Species == \"versicolor\" ~ \"darkgreen\",    Species == \"virginica\" ~ \"orange\",    TRUE ~ \"grey\"  )) %>%  reactable(.,  columns = list(flower_cols = colDef(show=FALSE),  petal_width = colDef(cell = react_sparkline(.,  height = 80,  line_color_ref = \"flower_cols\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Show area beneath the line iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(petal_width = colDef(cell = react_sparkline(.,  height = 80,  line_color = \"dodgerblue\",  show_area = TRUE)))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Conditionally assign colors to the area below the line iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  mutate(flower_cols = case_when(    Species == \"setosa\" ~ \"purple\",    Species == \"versicolor\" ~ \"darkgreen\",    Species == \"virginica\" ~ \"orange\",    TRUE ~ \"grey\"  )) %>%  reactable(.,  columns = list(flower_cols = colDef(show=FALSE),  petal_width = colDef(cell = react_sparkline(.,  height = 80,  show_area = TRUE,  line_color_ref = \"flower_cols\",  area_color_ref = \"flower_cols\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Add bandline to show innerquartile range iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(petal_width = colDef(cell = react_sparkline(.,  height = 80,  decimals = 1,  highlight_points = highlight_points(max=\"red\"),  labels = c(\"max\"),  bandline = \"innerquartiles\",  bandline_color = \"darkgreen\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Add statline to show the mean for each sparkline iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(petal_width = colDef(cell = react_sparkline(.,  height = 80,  decimals = 1,  statline = \"mean\",  statline_color = \"red\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Combine multiple elements together iris %>%  group_by(Species) %>%  summarize(petal_width = list(Petal.Width)) %>%  reactable(.,  columns = list(petal_width = colDef(cell = react_sparkline(.,  height = 80,  decimals = 1,  statline = \"mean\",  statline_color = \"red\",  bandline = \"innerquartiles\",  bandline_color = \"darkgreen\")))) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sandstone.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme sandstone — sandstone","title":"Theme sandstone — sandstone","text":"Bootstrap-inspired sandstone theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sandstone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme sandstone — sandstone","text":"","code":"sandstone(   font_size = 15,   font_color = \"#3e3f3a\",   header_font_size = 16,   header_font_color = \"#7c7a78\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sandstone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme sandstone — sandstone","text":"font_size Numeric value representing size font within table (px). Default 15. font_color Color font text within table group headers. Default #3e3f3a. header_font_size Numeric value representing size font within table (px). Default 16. header_font_color Color font header text. Default #7c7a78. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sandstone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme sandstone — sandstone","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sandstone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme sandstone — sandstone","text":"","code":"data <- iris[10:29, ]  ## Standard sandstone theme reactable(data,           theme = sandstone()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = sandstone(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sanfran.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme sanfran — sanfran","title":"Theme sanfran — sanfran","text":"San Francisco Chronicles-inspired table theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sanfran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme sanfran — sanfran","text":"","code":"sanfran(   font_size = 14,   font_color = \"#222222\",   header_font_size = 15,   header_font_color = \"#212121\",   cell_color = \"#f5f5f5\",   cell_border_width = 6,   cell_border_color = \"#ffffff\",   cell_padding = 6,   pagination_color = \"#222222\",   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sanfran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme sanfran — sanfran","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table. Default #222222. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default transparent cell_color Color background cells. Default #f5f5f5. cell_border_width Numeric value representing border width cells. Default 6. cell_border_color Numeric value representing border color cells. Default #ffffff. cell_padding Numeric value representing padding size cells (px). Default 6. pagination_color Color pagination table. Default #222222. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sanfran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme sanfran — sanfran","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sanfran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme sanfran — sanfran","text":"","code":"data <- iris[10:29, ]  ## Standard void theme reactable(data,           theme = sanfran()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = sanfran(font_size = 12, font_color = \"grey\")) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/save_reactable.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a reactable table as an image or .html file — save_reactable","title":"Save a reactable table as an image or .html file — save_reactable","text":"`save_reactable()` function converts either reactable table, .html file, .Rmd file image .html file     saves user's working directory.     Table can saved either .png file .html file. file types currently supported.     reactable table located within .Rmd file additional CSS styles provided,     specify name .Rmd file input.     Alternatively, reactable table exists .html file, specify name .html file input.     Additional parameters available within webshot2::webshot vwidth, vheight, cliprect can passed `save_reactable()`.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/save_reactable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a reactable table as an image or .html file — save_reactable","text":"","code":"save_reactable(input, output, ...)"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/save_reactable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a reactable table as an image or .html file — save_reactable","text":"input reactable table, .html file, .Rmd file output .png .html file name saved image ... Optional additional parameters passed webshot2::webshot","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/save_reactable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a reactable table as an image or .html file — save_reactable","text":"function converts reactable table, .html file, .Rmd file .png file .html file     saves user's working directory.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/save_reactable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a reactable table as an image or .html file — save_reactable","text":"","code":"if (FALSE) { ## Save reactable table as a png file: iris_table <- reactable(iris) save_reactable(iris_table, \"iris_table.png\")  ## Also works with a pipe iris_table %>% save_reactable(\"iris_table.png\")  ## Or save as an html file: save_reactable(iris_table, \"iris_table.html\")  ## If the reactable table was built in R Markdown with CSS styles applied, ## specify .Rmd file as input and save_reactable will run the file ## and save the output as an image save_reactable(\"iris_table.Rmd\", \"iris_table.png\")  ## Alternatively, can do the same with an .html file save_reactable(\"iris_table.html\", \"iris_table.png\") }"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/save_reactable_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a reactable table as an image or .html file — save_reactable_test","title":"Save a reactable table as an image or .html file — save_reactable_test","text":"`save_reactable()` function converts either reactable table, .html file, .Rmd file image .html file     saves user's working directory.     Table can saved either .png file .html file. file types currently supported.     reactable table located within .Rmd file additional CSS styles provided,     specify name .Rmd file input.     Alternatively, reactable table exists .html file, specify name .html file input.     Additional parameters available within webshot::webshot vwidth, vheight, cliprect can passed `save_reactable()`.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/save_reactable_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a reactable table as an image or .html file — save_reactable_test","text":"","code":"save_reactable_test(input, output, ...)"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/save_reactable_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a reactable table as an image or .html file — save_reactable_test","text":"input reactable table, .html file, .Rmd file output .png .html file name saved image ... Optional additional parameters passed webshot::webshot","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/save_reactable_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a reactable table as an image or .html file — save_reactable_test","text":"function converts reactable table, .html file, .Rmd file .png file .html file     saves user's working directory.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/save_reactable_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a reactable table as an image or .html file — save_reactable_test","text":"","code":"if (FALSE) { ## Save reactable table as a png file: iris_table <- reactable(iris) save_reactable(iris_table, \"iris_table.png\")  ## Also works with a pipe iris_table %>% save_reactable(\"iris_table.png\")  ## Or save as an html file: save_reactable(iris_table, \"iris_table.html\")  ## If the reactable table was built in R Markdown with CSS styles applied, ## specify .Rmd file as input and save_reactable will run the file ## and save the output as an image save_reactable(\"iris_table.Rmd\", \"iris_table.png\")  ## Alternatively, can do the same with an .html file save_reactable(\"iris_table.html\", \"iris_table.png\") }"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/slate.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme slate — slate","title":"Theme slate — slate","text":"Bootstrap-inspired slate theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/slate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme slate — slate","text":"","code":"slate(   font_size = 15,   font_color = \"#aaaaaa\",   header_font_size = 16,   header_font_color = \"#97999b\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/slate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme slate — slate","text":"font_size Numeric value representing size font within table (px). Default 15. font_color Color font text within table group headers. Default #aaaaaa. header_font_size Numeric value representing size font within table (px). Default 16. header_font_color Color font header text. Default #97999b. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/slate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme slate — slate","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/slate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme slate — slate","text":"","code":"data <- iris[10:29, ]  ## Standard slate theme reactable(data,           theme = slate()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = slate(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/spacelab.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme spacelab — spacelab","title":"Theme spacelab — spacelab","text":"Bootstrap-inspired spacelab theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/spacelab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme spacelab — spacelab","text":"","code":"spacelab(   font_size = 14,   font_color = \"#8e8e8e\",   header_font_size = 15,   header_font_color = \"#8e8e8e\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/spacelab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme spacelab — spacelab","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table group headers. Default #8e8e8e. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #8e8e8e. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/spacelab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme spacelab — spacelab","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/spacelab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme spacelab — spacelab","text":"","code":"data <- iris[10:29, ]  ## Standard spacelab theme reactable(data,           theme = spacelab()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = spacelab(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sunrise.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme sunrise — sunrise","title":"Theme sunrise — sunrise","text":"sunrise table theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sunrise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme sunrise — sunrise","text":"","code":"sunrise(   font_size = 15,   font_color = \"#8069ff\",   header_font_size = 15,   header_font_color = \"#8069ff\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sunrise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme sunrise — sunrise","text":"font_size Numeric value representing size font within table (px). Default 15. font_color Color font text within table group headers. Default #8069ff. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #8069ff. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sunrise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme sunrise — sunrise","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/sunrise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme sunrise — sunrise","text":"","code":"data <- iris[10:29, ]  ## Standard sunrise theme reactable(data,           theme = sunrise()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = sunrise(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/superhero.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme superhero — superhero","title":"Theme superhero — superhero","text":"Bootstrap-inspired superhero theme","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/superhero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme superhero — superhero","text":"","code":"superhero(   font_size = 14,   font_color = \"#ebebeb\",   header_font_size = 15,   header_font_color = \"#ebebeb\",   cell_padding = 6,   centered = FALSE )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/superhero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme superhero — superhero","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table group headers. Default #ebebeb. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default #ebebeb. cell_padding Numeric value representing padding size cells (px). Default 6. centered Logical: vertically center contents table. Default FALSE.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/superhero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme superhero — superhero","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/superhero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme superhero — superhero","text":"","code":"data <- iris[10:29, ]  ## Standard superhero theme reactable(data,           theme = superhero()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = superhero(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/tooltip.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a tooltip to cells. — tooltip","title":"Apply a tooltip to cells. — tooltip","text":"Apply tooltip cells.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/tooltip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a tooltip to cells. — tooltip","text":"","code":"tooltip(data, number_fmt = NULL)"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/tooltip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a tooltip to cells. — tooltip","text":"data Null. number_fmt Optionally format numbers using formats scales package. Default NULL.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/tooltip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a tooltip to cells. — tooltip","text":"function applies tooltip reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/tooltip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a tooltip to cells. — tooltip","text":"","code":"if (FALSE) { data <- iris[10:29, ]  ## Apply a tooltip to color_scales() reactable(data,  columns = list(  Petal.Length = colDef(  cell = tooltip(),  style = color_scales(data))  )) }"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/void.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme void — void","title":"Theme void — void","text":"table style completely void borders headers","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/void.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme void — void","text":"","code":"void(   font_size = 14,   font_color = \"#222222\",   header_font_size = 15,   header_font_color = \"transparent\",   border_color = \"transparent\",   border_width = 0,   header_border_color = \"transparent\",   header_border_width = 0,   centered = FALSE,   cell_padding = 6 )"},{"path":"https://kcuilla.github.io/reactablefmtr/reference/void.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme void — void","text":"font_size Numeric value representing size font within table (px). Default 14. font_color Color font text within table. Default #222222. header_font_size Numeric value representing size font within table (px). Default 15. header_font_color Color font header text. Default transparent border_color Color borders cells. Default transparent. border_width Numeric value representing border width cells (px). Default 0. header_border_color Color bottom border header. Default transparent. header_border_width Numeric value representing bottom border width header (px). Default 0. centered Logical: vertically center contents table. Default FALSE. cell_padding Numeric value representing padding size cells (px). Default 6.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/void.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme void — void","text":"object class theme applied reactable table.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/reference/void.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme void — void","text":"","code":"data <- iris[10:29, ]  ## Standard void theme reactable(data,           theme = void()) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  ## Additional options applied reactable(data,           theme = void(font_size = 12, font_color = \"grey\", cell_padding = 3)) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator"},{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"bug-fixes-2-0-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"reactablefmtr 2.0.1","text":"Fixed save_reactable() function display save_reactable() save_reactable_test()","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"reactablefmtr-200","dir":"Changelog","previous_headings":"","what":"reactablefmtr 2.0.0","title":"reactablefmtr 2.0.0","text":"CRAN release: 2022-03-16","code":""},{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"add_legend--add_icon_legend-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"add_legend() & add_icon_legend()","title":"reactablefmtr 2.0.0","text":"Place legend reactable table add_legend() can used display color palette used within table add_icon_legend() can used display icon set used within icon_sets() legends can aligned either right left table title /footer can added legend title footer number bins displayed within add_legend() can adjusted bins","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"background_img-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"background_img()","title":"reactablefmtr 2.0.0","text":"Embed image web background cell Unlike embed_img(), image within background_img() take entire contents cell background_img() can also used conjunction embed_img()","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"bubble_grid-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"bubble_grid()","title":"reactablefmtr 2.0.0","text":"Build customizable bubble grid chart size bubbles relation values within column - bigger value, bigger size bubble shapes bubble can either circles squares specified shape","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"cell_style-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"cell_style()","title":"reactablefmtr 2.0.0","text":"cell_style() can used customize appearance certain cells within table. example, wanted display particular value set values column bold red text, can specifying either row number values Custom styling options include: color, size, style, weight font within cell, color, width, style border around cell, vertical horizontal alignment within cell, background color cell. Animation also applied cell_style() default, can turned setting ‘none’","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"gauge_chart-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"gauge_chart()","title":"reactablefmtr 2.0.0","text":"Build customizable gauge chart Show minimum maximum values column gauge setting show_min_max TRUE Many options available data_bars() available gauge_chart()","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"google_font-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"google_font()","title":"reactablefmtr 2.0.0","text":"Apply font Google Fonts https://fonts.google.com/ reactable table using google_font()","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"group_border_sort-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"group_border_sort()","title":"reactablefmtr 2.0.0","text":"Add styled border beneath rows specified groups sort Credit Greg Lin, creator {reactable} writing JS function","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"group_merge_sort-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"group_merge_sort()","title":"reactablefmtr 2.0.0","text":"Hide rows containing duplicate values sort Credit Greg Lin, creator {reactable} writing JS function","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"html-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"html()","title":"reactablefmtr 2.0.0","text":"Apply HTML attributes text within add_title(), add_subtitle(), add_source() html() helper function","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"merge_column-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"merge_column()","title":"reactablefmtr 2.0.0","text":"Merge arrange two columns together Can used numeric non-numeric columns Control appearance established column merged text options text size, color, font weight, font style, text decoration","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"pill_buttons-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"pill_buttons()","title":"reactablefmtr 2.0.0","text":"pill_buttons() can used surround text numeric values colored pill button. similar color_tiles() condensed round width pill dynamically adjusts based size text/values color_tiles(), color_scales(), data_bars(), colors can conditionally assigned another column dataset many options available color_tiles() available pill_buttons() Set box_shadow TRUE apply box shadow buttons","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"sparklines-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"sparklines","title":"reactablefmtr 2.0.0","text":"Interactive sparklines can now added reactable tables via react_sparkline() react_sparkbar() order use sparklines, one must download {dataui} package GitHub (https://github.com/timelyportfolio/dataui)","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"tooltip-2-0-0","dir":"Changelog","previous_headings":"New Features","what":"tooltip","title":"reactablefmtr 2.0.0","text":"Add tooltip cells (used color_scales()) Used within cell reactable::colDef","code":""},{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"add_title-add_subtitle-add_source-2-0-0","dir":"Changelog","previous_headings":"Enhancements","what":"add_title(), add_subtitle(), add_source()","title":"reactablefmtr 2.0.0","text":"Added ability control margin around margin()","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"animate-2-0-0","dir":"Changelog","previous_headings":"Enhancements","what":"animate","title":"reactablefmtr 2.0.0","text":"animation data_bars() can now controlled animate. animate parameter also added color_scales(), color_tiles(), icon_sets(), icon_assign(). duration timing function animation can changed within animate animation can turned setting ‘none’. available timing functions, see CSS Transitions","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"color_tiles-2-0-0","dir":"Changelog","previous_headings":"Enhancements","what":"color_tiles()","title":"reactablefmtr 2.0.0","text":"Set box_shadow TRUE apply box shadow tiles","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"data_bars-2-0-0","dir":"Changelog","previous_headings":"Enhancements","what":"data_bars()","title":"reactablefmtr 2.0.0","text":"Optionally force range values display text labels outside-end filled bars text_position set either “inside-end”, “inside-base”, “center”. can useful length filled data bars short text labels inside filled bars Control size text labels text_size Borders around filled data bars can now adjusted border_style, border_width, border_color options Set box_shadow TRUE apply box shadow bars","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"embed_img-2-0-0","dir":"Changelog","previous_headings":"Enhancements","what":"embed_img()","title":"reactablefmtr 2.0.0","text":"horizontal alignment within cell can now controlled horizontal_align option","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"icon_assign-2-0-0","dir":"Changelog","previous_headings":"Enhancements","what":"icon_assign()","title":"reactablefmtr 2.0.0","text":"alignment icons within column can now changed either left, right, center align_icons. Previously, icons aligned left","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"icon_sets-2-0-0","dir":"Changelog","previous_headings":"Enhancements","what":"icon_sets()","title":"reactablefmtr 2.0.0","text":"Custom pre-selected icon sets can assigned values via icon_set. Options “ski rating”, “medals”, “batteries”. Can used add_icon_legend()","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"reactablefmtr 2.0.0","text":"Fixed bug assign colors values within color_scales(), color_tiles(), data_bars() variance within column Fixed sparkline tooltip allow values show clearly hover Fixed issue icon_assign() displayed error columns containing zeros","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"other-modifications-2-0-0","dir":"Changelog","previous_headings":"","what":"Other Modifications","title":"reactablefmtr 2.0.0","text":"default color fill_color within data_bars() icon_assign() changed #67a9cf default position text_position within data_bars() changed “outside-end” “inside-end” Text now centered vertically within data_bars() default size text within data_bars() can now changed text_size Added two additional themes: sanfran no_lines Changed underlying package save_reactable() {webshot2} {webshot}. {webshot} package available CRAN, need users manually download {webshot2} GitHub entire contents table can vertically centered setting centered TRUE within {reactablefmtr} themes","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"reactablefmtr-100","dir":"Changelog","previous_headings":"","what":"reactablefmtr 1.0.0","title":"reactablefmtr 1.0.0","text":"CRAN release: 2021-06-16","code":""},{"path":[]},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"data_bars-1-0-0","dir":"Changelog","previous_headings":"New Features","what":"data_bars()","title":"reactablefmtr 1.0.0","text":"data_bars() can now handle columns positive negative values. data_bars_pos_neg() depreciated data_bars() can create color gradients two colors provided fill_gradient = TRUE. data_bars_gradient() depreciated colors argument data_bars() renamed fill_color height bars can now adjusted bar_height default color background changed white transparent data_bars() can now either right-aligned left-aligned align_bars argument specifying either “left” “right”. default, data_bars() aligned left placement labels can now adjusted within data_bars() text_position argument. Labels can placed either outside filled bars “outside-end” “outside-base”, inside filled bars “inside-end”, “inside-base”, “center”, labels can hidden “none”. default, labels placed “outside-end” filled bars color labels can changed using text_color argument. default color black Labels can shown bold text bold_text logical argument labels placed inside filled bars bars filled dark color, color labels automatically change white rather default black brighten_text logical argument. color brighten_text_color can changed color colors fill data_bars() can provided another column referencing name column containing colors within fill_color_ref. useful assigning conditions assigning colors bars different groups within dataset opacity fill color can adjusted fill_opacity providing value 0 1 (transparent opaque) maximum width fill data_bars() can adjusted max_value argument. default, maximum width maximum value contained column. Ex. showing percentages maximum value 80%, default, 80% look 100% filled (since ’s 80% 80%). changing max_value = 1 (max_value = 100 depending percentages displayed), shrink 80% relative 100%. maximum value provided, minimum value can also set min_value Icons can now added data bars either icon icon_ref default, color icon inherited fill color data bars, can changed icon_color icon_color_ref Images can now added data bars either img img_ref","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"color_scales--color_tiles-1-0-0","dir":"Changelog","previous_headings":"New Features","what":"color_scales() & color_tiles()","title":"reactablefmtr 1.0.0","text":"Colors can provided another column referencing name column containing colors within color_ref. useful assigning conditions assigning colors bars different groups within dataset. color_ref used within reactable::defaultColDef, every column dataset, regardless whether numeric , receive conditional colors. Default colors changed red-white-blue blue-white-orange opacity background colors can adjusted opacity providing value 0 1 color values can changed using text_color argument. default color black Values can shown bold text bold_text logical argument brighten_values renamed brighten_text color values cells brighten_values applied can changed brighten_text_color. default color white Values can now hidden setting show_text FALSE","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"embed_img-1-0-0","dir":"Changelog","previous_headings":"New Features","what":"embed_img()","title":"reactablefmtr 1.0.0","text":"Labels another column can now positioned , , left embedded image. Previously, labels positioned right image","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"icon_assign-1-0-0","dir":"Changelog","previous_headings":"New Features","what":"icon_assign()","title":"reactablefmtr 1.0.0","text":"size icons can now adjusted using icon_size opacity fill_color empty_color can adjusted fill_opacity empty_opacity respectively, providing value 0 1 (transparent opaque) addition optionally showing values left right icons, values can now also placed icons show_values","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"icon_sets-1-0-0","dir":"Changelog","previous_headings":"New Features","what":"icon_sets()","title":"reactablefmtr 1.0.0","text":"Can now use number icons colors assign data. Previously three icons colors used. Icons can positioned right, left, , , values icon_position. Previously icons positioned right values size icons can now adjusted using icon_size Default colors changed red-white-blue blue-grey-orange opacity icon colors can adjusted opacity providing value 0 1 (transparent opaque) Icons can provided another column referencing name column containing icons within icon_ref Icon colors can provided another column referencing name column containing colors within icon_color_ref","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"save_reactable-1-0-0","dir":"Changelog","previous_headings":"New Features","what":"save_reactable()","title":"reactablefmtr 1.0.0","text":"Reactable tables can now saved static .png files dynamic .html files using save_reactable() reactable table created .Rmd file additional CSS styling applied, reference name either .Rmd file containing reactable table .html file reactable table save image table Note: feature requires {webshot2} package can downloaded https://github.com/rstudio/webshot2.","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"add_title-add_subtitle-add_source-1-0-0","dir":"Changelog","previous_headings":"New Features","what":"add_title(), add_subtitle(), add_source()","title":"reactablefmtr 1.0.0","text":"can now easily add title /subtitle reactable table add_title() add_subtitle() can also add source reactable table add_source() Additional customization options adjusting font size, font color, font family also available","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"themes-1-0-0","dir":"Changelog","previous_headings":"New Features","what":"themes","title":"reactablefmtr 1.0.0","text":"Added 24 new table themes, including: Bootstrap-inspired themes: cerulean, cosmo, cyborg, darkly, flatly, journal, lux, minty, sandstone, slate, spacelab, superhero News/sports-inspired themes: espn, fivethirtyeight, nytimes, pff custom themes: clean, default, hoverdark, hoverlight, midnight, midnightblue, sunrise, void","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"New Features","what":"Breaking Changes","title":"reactablefmtr 1.0.0","text":"colors argument data_bars() renamed fill_color brighten_values argument color_scales() color_tiles() renamed brighten_text","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"reactablefmtr-020","dir":"Changelog","previous_headings":"","what":"reactablefmtr 0.2.0","title":"reactablefmtr 0.2.0","text":"CRAN release: 2021-03-18","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"reactablefmtr 0.2.0","text":"Data bars can now accept gradient colors using data_bars_gradient() Columns can now conditionally formatted color_tiles() Images web can now embedded column using embed_img() Columns can now formatted using formatters scales package using number_fmt() option default, values displayed color_scales() color_tiles() packages automatically shown black white color depending saturation background color cell. option can turned setting bright_values = FALSE Data bars now animated sort using three data bars formatters (data_bars(), data_bars_pos_neg(), data_bars_gradient()) Conditional colors can now applied values relation entire dataset group columns providing column names column positions span option within color_scales() color_tiles(). Special thanks June Chao contribution feature. Icons can assigned value column using icon_assign()","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"reactablefmtr 0.2.0","text":"issue aligning values using data_bars() always align properly fixed","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"other-0-2-0","dir":"Changelog","previous_headings":"","what":"Other","title":"reactablefmtr 0.2.0","text":"Due addition number_fmt() allows use formatters scales package, add_plus_sign() formatter retired next CRAN release well commas option data_bars() formatter, percent option data_bars_pos_neg() icon_sets() formatters","code":""},{"path":"https://kcuilla.github.io/reactablefmtr/news/index.html","id":"reactablefmtr-010","dir":"Changelog","previous_headings":"","what":"reactablefmtr 0.1.0","title":"reactablefmtr 0.1.0","text":"CRAN release: 2021-02-19 Initial release CRAN","code":""}]
